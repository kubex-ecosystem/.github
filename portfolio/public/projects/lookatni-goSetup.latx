# LookAtni Code - Gerado automaticamente
# Data: 2025-07-13T23:19:14.270Z
# Fonte: /srv/apps/KUBEX/gosetup/
# Total de arquivos: 12

/// CODE_OF_CONDUCT.md ///
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or
  advances of any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email
  address, without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
discord.gg/CCBJsFHT.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
<https://www.contributor-covenant.org/version/2/0/code_of_conduct.html>.

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder](https://github.com/mozilla/diversity).

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see the FAQ at
<https://www.contributor-covenant.org/faq>. Translations are available at
<https://www.contributor-covenant.org/translations>.

/// Dear friend,.md ///
Dear friend,

I am excited to apply for the Flutter Developer position to assist with the production release of your app on the Google Play Console. With my background as a Full-Cycle Developer and expertise in software architecture, I am confident in my ability to deliver a high-quality, production-ready app.

My approach to this project will be to divide it into clear milestones to ensure transparency and efficiency:

1. **Initial Setup and Planning:** Review the existing app code, understand the requirements, and plan the integration process.

2. **Firebase Integration:** Update Firebase keys and configurations using the provided google-services.json file.

3. **Branding Updates:** Implement the new app name and icon, ensuring consistency with your brand identity.

4. **Production Readiness:** Focus on build versioning, package name updates, and any other necessary configurations for a smooth Play Store upload.

5. **Testing and Quality Assurance:** Conduct thorough testing to identify and fix any issues, ensuring the app's stability and performance.

6. **Final Build and Handover:** Provide the signed release build and updated source code, ready for you to upload to the Play Store.

I am committed to delivering exceptional results and am eager to discuss how my skills and experience align with your needs. Please feel free to reach out to me to further discuss this exciting opportunity.

Have created this project in 3 hours just to show you some proficiency: [SUSsec](https://rafa-mori.github.io/sussec/)

Best regards,
Rafa Mori 

/// NOTICE.md ///
# NOTICE

This software is licensed under the MIT License. Below are additional notes on usage and attribution:

## Attribution Requirement (Optional)

- When distributing or using this software, please provide credit to the original author(s) in one or more of the following ways:
- Retain the copyright notice: `Copyright (c) 2025 Rafael Mori`.
- Include a link to the original project repository or website.

## Acknowledgment

This project was developed with the goal of enhancing usability and providing open access to its features.

For further information about the license and terms of use, please refer to the `LICENSE` file included with this project.

/// README.md ///
# ![GoSetup Banner](docs/assets/top_banner_b.png)

## **GoSetup üêπ ‚ö° - Smart Go Installer**

üöÄ **Easily install and configure Golang on Linux, Mac, and Windows‚Äîfast and hassle-free!**

[![Contributions Welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/rafa-mori/gosetup)  
[![License](https://img.shields.io/github/license/rafa-mori/gosetup.svg?style=flat)](https://github.com/rafa-mori/gosetup/blob/main/LICENSE)
[![Version](https://img.shields.io/github/v/release/rafa-mori/gosetup.svg?style=flat)](https://github.com/rafa-mori/gosetup/releases)

---

## üöÄ **Quick Installation**

### üèéÔ∏è **Instant Method (wget/curl)**

```bash
wget https://raw.githubusercontent.com/rafa-mori/gosetup/refs/heads/main/go.sh && bash gosetup.sh
```

```bash
bash <(curl -sL https://git.io/gosetup)
```

### üõ†Ô∏è **Cloning the Repository and Running Manually**

```bash
git clone https://github.com/rafa-mori/gosetup.git
cd gosetup
bash go.sh
```

> üí° **Tip:** By default, Go will be installed in `$HOME/.go`, and `$HOME/go` will be set as the workspace.  
> You can customize these locations by setting `GOROOT` and `GOPATH` before installation:

```bash
export GOROOT=/opt/go
export GOPATH=$HOME/projects/go
```

---

## üéØ **Features**

‚úÖ **Automatic installation & updates**  
‚úÖ **Specify a Go version to install**  
‚úÖ **Compatible with Windows, Linux, and macOS**  
‚úÖ **Smart environment configuration**  
‚úÖ **Supports multiple architectures (ARM, AMD64, i386)**  
‚úÖ **Seamless integration with GitHub Actions workflows**  

---

## üõ†Ô∏è **Essential Commands**

### üîπ **Install or update Go**

```bash
bash go.sh install
```

```powershell
.\go.ps1 -Command install
```

### üîπ **Specify a version**

```bash
bash go.sh install --version 1.19.4
```

```powershell
.\go.ps1 -Command install -Version 1.19.2
```

### üîπ **Check if a version is installed**

```bash
bash go.sh check --version 1.19.4
```

```powershell
.\go.ps1 -Command check -Version 1.19.2
```

### üîπ **Uninstall Go**

```bash
bash go.sh remove
```

```powershell
.\go.ps1 -Command remove
```

### üîπ **Display the help menu**

```bash
bash go.sh help
```

```powershell
.\go.ps1 -Command help
```

---

## üê≥ **Running Tests with Docker**

Ensure a clean testing environment:

```bash
make test
```

```powershell
.\go.ps1 -Command test
```

---

## üí° **Contribute to the Project**

1. ‚≠ê **Star the repository** to show support!  
2. üîÑ **Fork** and clone the repository.  
3. üõ†Ô∏è **Create a new branch** and make your changes.  
4. üìå **Submit a pull request** and wait for review.  
5. üéâ **Join the community and stay updated!**  

---

## üîç **How It Works**

The script follows these steps:
1Ô∏è‚É£ **Detects** your operating system and architecture.  
2Ô∏è‚É£ **Checks** the latest available Go version.  
3Ô∏è‚É£ **Downloads & installs** the correct version.  
4Ô∏è‚É£ **Sets up directories** (`GOROOT`, `GOPATH`).  
5Ô∏è‚É£ **Adds Go binaries to PATH** automatically.  
6Ô∏è‚É£ **Cleans up unnecessary files** to keep things efficient.  

---

## üõ†Ô∏è **Using in CI/CD with GitHub Actions**

Automate Go installation based on the version specified in `go.mod`:

```yaml
- name: Install Go (Exact version from go.mod)
  run: |
    export NON_INTERACTIVE=true
    bash -c "$(curl -sSfL 'https://raw.githubusercontent.com/rafa-mori/gosetup/main/go.sh')" -s --version "$(grep '^go ' go.mod | awk '{print $2}')"
```

---

<p align="center">üöÄ **Simple. Fast. Powerful.** üî•</p>

/// docs/README.md ///
# **GoSetup üêπ ‚ö° - Smart Go Installer**

üöÄ **Easily install and configure Golang on Linux, Mac, and Windows‚Äîfast and hassle-free!**

[![Contributions Welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/rafa-mori/gosetup)  
[![CI Status](https://github.com/rafa-mori/gosetup/actions/workflows/test.yml/badge.svg)](https://github.com/rafa-mori/gosetup/actions/workflows/test.yml)

---

## üöÄ **Quick Installation**
### üèéÔ∏è **Instant Method (wget/curl)**
```bash
wget https://raw.githubusercontent.com/rafa-mori/gosetup/refs/heads/main/go.sh && bash gosetup.sh
```
```bash
bash <<< "curl -sSfL 'https://raw.githubusercontent.com/rafa-mori/gosetup/refs/heads/main/go.sh' | bash"
```

### üõ†Ô∏è **Cloning the Repository and Running Manually**
```bash
git clone https://github.com/rafa-mori/gosetup.git
cd gosetup
bash go.sh
```

> üí° **Tip:** By default, Go will be installed in `$HOME/.go`, and `$HOME/go` will be set as the workspace.  
> You can customize these locations by setting `GOROOT` and `GOPATH` before installation:

```bash
export GOROOT=/opt/go
export GOPATH=$HOME/projects/go
```

---

## üéØ **Features**
‚úÖ **Automatic installation & updates**  
‚úÖ **Specify a Go version to install**  
‚úÖ **Compatible with Windows, Linux, and macOS**  
‚úÖ **Smart environment configuration**  
‚úÖ **Supports multiple architectures (ARM, AMD64, i386)**  
‚úÖ **Seamless integration with GitHub Actions workflows**  

---

## üõ†Ô∏è **Essential Commands**
### üîπ **Install or update Go**
```bash
bash go.sh install
```
```powershell
.\go.ps1 -Command install
```

### üîπ **Specify a version**
```bash
bash go.sh install --version 1.19.4
```
```powershell
.\go.ps1 -Command install -Version 1.19.2
```

### üîπ **Check if a version is installed**
```bash
bash go.sh check --version 1.19.4
```
```powershell
.\go.ps1 -Command check -Version 1.19.2
```

### üîπ **Uninstall Go**
```bash
bash go.sh remove
```
```powershell
.\go.ps1 -Command remove
```

### üîπ **Display the help menu**
```bash
bash go.sh help
```
```powershell
.\go.ps1 -Command help
```

---

## üê≥ **Running Tests with Docker**
Ensure a clean testing environment:
```bash
make test
```
```powershell
.\go.ps1 -Command test
```

---

## üí° **Contribute to the Project**
1. ‚≠ê **Star the repository** to show support!  
2. üîÑ **Fork** and clone the repository.  
3. üõ†Ô∏è **Create a new branch** and make your changes.  
4. üìå **Submit a pull request** and wait for review.  
5. üéâ **Join the community and stay updated!**  

---

## üîç **How It Works**
The script follows these steps:
1Ô∏è‚É£ **Detects** your operating system and architecture.  
2Ô∏è‚É£ **Checks** the latest available Go version.  
3Ô∏è‚É£ **Downloads & installs** the correct version.  
4Ô∏è‚É£ **Sets up directories** (`GOROOT`, `GOPATH`).  
5Ô∏è‚É£ **Adds Go binaries to PATH** automatically.  
6Ô∏è‚É£ **Cleans up unnecessary files** to keep things efficient.  

---

## üõ†Ô∏è **Using in CI/CD with GitHub Actions**
Automate Go installation based on the version specified in `go.mod`:

```yaml
- name: Install Go (Exact version from go.mod)
  run: |
    export NON_INTERACTIVE=true
    bash -c "$(curl -sSfL 'https://raw.githubusercontent.com/rafa-mori/gosetup/main/go.sh')" -s --version "$(grep '^go ' go.mod | awk '{print $2}')"
```

---

<p align="center">üöÄ **Simple. Fast. Powerful.** üî•</p>

/// docs/README_pt-BR.md ///
# **GoSetup üêπ ‚ö° - Instalador Inteligente para Go**

üöÄ **Instale e configure Golang de forma r√°pida e sem complica√ß√µes** em **Linux**, **Mac** e **Windows**!

[![Contributions Welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/rafa-mori/gosetup)
[![CI Status](https://github.com/rafa-mori/gosetup/actions/workflows/test.yml/badge.svg)](https://github.com/rafa-mori/gosetup/actions/workflows/test.yml)

---

## üöÄ **Instala√ß√£o R√°pida**
### üèéÔ∏è **M√©todo Instant√¢neo (wget/curl)**
```bash
wget https://raw.githubusercontent.com/rafa-mori/gosetup/refs/heads/main/go.sh && bash gosetup.sh
```
```bash
bash <(curl -sL https://git.io/gosetup)
```

### üõ†Ô∏è **Clonando e executando manualmente**
```bash
git clone https://github.com/rafa-mori/gosetup.git
cd gosetup
bash go.sh
```

> üí° **Dica:** O script instala Go em `$HOME/.go` e configura `$HOME/go` como workspace.  
> Para personalizar esses diret√≥rios, defina `GOROOT` e `GOPATH` antes da instala√ß√£o:
```bash
export GOROOT=/opt/go
export GOPATH=$HOME/projects/go
```

---

## üéØ **Recursos**
‚úÖ **Instala√ß√£o e atualiza√ß√£o autom√°ticas**  
‚úÖ **Defini√ß√£o de vers√£o espec√≠fica do Go**  
‚úÖ **Compat√≠vel com Windows, Linux e macOS**  
‚úÖ **Configura√ß√£o de ambiente inteligente**  
‚úÖ **Suporte a m√∫ltiplas arquiteturas (ARM, AMD64, i386)**  
‚úÖ **Integra√ß√£o perfeita com workflows do GitHub Actions**  

---

## üõ†Ô∏è **Comandos Essenciais**
### üîπ **Instalar ou atualizar Go**
```bash
bash go.sh install
```
```powershell
.\go.ps1 -Command install
```

### üîπ **Definir uma vers√£o espec√≠fica**
```bash
bash go.sh install --version 1.19.4
```
```powershell
.\go.ps1 -Command install -Version 1.19.2
```

### üîπ **Verificar se uma vers√£o j√° est√° instalada**
```bash
bash go.sh check --version 1.19.4
```
```powershell
.\go.ps1 -Command check -Version 1.19.2
```

### üîπ **Desinstalar Go**
```bash
bash go.sh remove
```
```powershell
.\go.ps1 -Command remove
```

### üîπ **Exibir menu de ajuda**
```bash
bash go.sh help
```
```powershell
.\go.ps1 -Command help
```

---

## üê≥ **Rodando Testes com Docker**
Evite interfer√™ncias no sistema e garanta um ambiente consistente:
```bash
make test
```
```powershell
.\go.ps1 -Command test
```

---

## üí° **Contribua para o Projeto**
1. ‚≠ê **D√™ uma estrela no reposit√≥rio** e ajude a fortalecer o projeto!  
2. üîÑ **Fa√ßa um fork** e clone o reposit√≥rio.  
3. üõ†Ô∏è **Crie uma nova branch** e implemente suas mudan√ßas.  
4. üìå **Envie um pull request** e aguarde revis√£o.  
5. üéâ **Junte-se √† comunidade e acompanhe as novidades!**  

---

## üîç **Como Funciona**
O script executa os seguintes passos:
1Ô∏è‚É£ **Detecta** sistema operacional e arquitetura.  
2Ô∏è‚É£ **Verifica** a vers√£o dispon√≠vel do Go.  
3Ô∏è‚É£ **Baixa e instala** a vers√£o correta.  
4Ô∏è‚É£ **Cria e configura** os diret√≥rios (`GOROOT`, `GOPATH`).  
5Ô∏è‚É£ **Adiciona ao PATH** automaticamente.  
6Ô∏è‚É£ **Limpa** arquivos desnecess√°rios para manter efici√™ncia.  

---

## üõ†Ô∏è **Usando em CI/CD com GitHub Actions**
Automatize a instala√ß√£o do Go na vers√£o especificada no `go.mod`:

```yaml
- name: Install Go (Exact version from go.mod)
  run: |
    export NON_INTERACTIVE=true
    bash -c "$(curl -sSfL 'https://raw.githubusercontent.com/rafa-mori/gosetup/main/go.sh')" -s --version "$(grep '^go ' go.mod | awk '{print $2}')"
```

---

<p align="center">üöÄ **Simples. Eficiente. Poderoso.** üî•</p>

/// docs/assets/styles.css ///
body {
    font-family: Arial, sans-serif;
    margin: 20px;
    padding: 0;
    background-color: #f9f9f9;
    color: #333;
}

header {
    text-align: center;
    padding: 20px;
    background-color: #0277bd;
    color: white;
}

h1 {
    font-size: 2em;
}

.badges img {
    margin: 5px;
}

section {
    margin: 20px 0;
    padding: 15px;
    background: white;
    border-radius: 5px;
    box-shadow: 2px 2px 10px rgba(0,0,0,0.1);
}

h2 {
    color: #01579b;
}

code {
    display: block;
    background: #eee;
    padding: 10px;
    border-radius: 5px;
    font-size: 0.9em;
}

.command-block {
    margin: 10px 0;
}

footer {
    text-align: center;
    padding: 10px;
    background-color: #0277bd;
    color: white;
}

/// docs/index.html ///
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GoSetup - Smart Go Installer</title>
    <link rel="stylesheet" href="assets/styles.css"> <!-- Arquivo de estilos separado -->
</head>
<body>

    <header>
        <h1>üêπ GoSetup ‚ö° - Smart Go Installer</h1>
        <p>üöÄ Easily install and configure Golang on Linux, Mac, and Windows‚Äîfast and hassle-free!</p>
        <div class="badges">
            <img src="https://img.shields.io/badge/contributions-welcome-brightgreen.svg" alt="Contributions Welcome">
            <img src="https://github.com/rafa-mori/gosetup/actions/workflows/test.yml/badge.svg" alt="CI Status">
        </div>
    </header>

    <section id="installation">
        <h2>üöÄ Quick Installation</h2>
        <p>Choose the best method for your environment:</p>
        <h3>üèéÔ∏è Instant Method (wget/curl)</h3>
        <code>wget https://raw.githubusercontent.com/rafa-mori/gosetup/refs/heads/main/go.sh && bash gosetup.sh</code>
        <code>bash <(curl -sL https://git.io/gosetup)</code>

        <h3>üõ†Ô∏è Cloning and Running Manually</h3>
        <code>git clone https://github.com/rafa-mori/gosetup.git</code>
        <code>cd gosetup && bash go.sh</code>

        <p><strong>Tip:</strong> You can customize the installation directories:</p>
        <code>export GOROOT=/opt/go</code>
        <code>export GOPATH=$HOME/projects/go</code>
    </section>

    <section id="features">
        <h2>üéØ Features</h2>
        <ul>
            <li>‚úÖ Automatic installation & updates</li>
            <li>‚úÖ Specify a Go version to install</li>
            <li>‚úÖ Compatible with Windows, Linux, and macOS</li>
            <li>‚úÖ Smart environment configuration</li>
            <li>‚úÖ Supports multiple architectures (ARM, AMD64, i386)</li>
            <li>‚úÖ Seamless integration with GitHub Actions workflows</li>
        </ul>
    </section>

    <section id="commands">
        <h2>üõ†Ô∏è Essential Commands</h2>
        <div class="command-block">
            <h3>üîπ Install or update Go</h3>
            <code>bash go.sh install</code>
            <code>.\go.ps1 -Command install</code>
        </div>
        <div class="command-block">
            <h3>üîπ Specify a version</h3>
            <code>bash go.sh install --version 1.19.4</code>
            <code>.\go.ps1 -Command install -Version 1.19.2</code>
        </div>
        <div class="command-block">
            <h3>üîπ Uninstall Go</h3>
            <code>bash go.sh remove</code>
            <code>.\go.ps1 -Command remove</code>
        </div>
    </section>

    <section id="ci-cd">
        <h2>üõ†Ô∏è Using in CI/CD with GitHub Actions</h2>
        <pre>
- name: Install Go (Exact version from go.mod)
  run: |
    export NON_INTERACTIVE=true
    bash -c "$(curl -sSfL 'https://raw.githubusercontent.com/rafa-mori/gosetup/main/go.sh')" -s --version "$(grep '^go ' go.mod | awk '{print $2}')"
        </pre>
    </section>

    <footer>
        <p>üöÄ <strong>Simple. Fast. Powerful.</strong> üî•</p>
    </footer>

</body>
</html>

/// go.ps1 ///
param(
    [string]$Command = "install",
    [string]$Version = "latest"
)

switch ($Command) {
    "install" {
        if ($Version -eq "latest") {
            Write-Output "Fetching the latest version of Go for Windows..."
            $GoDownloadPage = "https://go.dev/dl/"
            try {
                $WebContent = Invoke-WebRequest -Uri $GoDownloadPage -UseBasicParsing
                $LatestGoURL = ($WebContent.Content -match 'href="(https://go.dev/dl/go[0-9.]+\.windows-amd64\.msi)"') | Out-Null
                $LatestGoURL = $Matches[1]
            } catch {
                Write-Output "Error accessing the Go download page."
                exit 1
            }

            if ($LatestGoURL) {
                Write-Output "Latest version URL: $LatestGoURL"
                $InstallerPath = "$env:TEMP\gosetup.msi"
                Invoke-WebRequest -Uri $LatestGoURL -OutFile $InstallerPath
                Start-Process msiexec.exe -ArgumentList "/i $InstallerPath /quiet /norestart" -Wait
                Remove-Item $InstallerPath
                Write-Output "Latest version of Go installed successfully!"
            } else {
                Write-Output "Error: Could not find the latest version."
            }
        } else {
            Write-Output "Installing specified version of Go: $Version"
            $GoURL = "https://go.dev/dl/go${Version}.windows-amd64.msi"
            $InstallerPath = "$env:TEMP\gosetup.msi"
            try {
                Invoke-WebRequest -Uri $GoURL -OutFile $InstallerPath
                Start-Process msiexec.exe -ArgumentList "/i $InstallerPath /quiet /norestart" -Wait
                Remove-Item $InstallerPath
                Write-Output "Go version $Version installed successfully!"
            } catch {
                Write-Output "Error: Could not download or install version $Version."
            }
        }
    }
    "update" {
        Write-Output "Updating Go..."
        & $PSCommandPath -Command "remove"
        & $PSCommandPath -Command "install"
        Write-Output "Go updated successfully."
    }
    "remove" {
        Write-Output "Removing Go..."
        $GoUninstallKey = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" | Where-Object { $_.DisplayName -like "Go*" }
        if ($GoUninstallKey) {
            $UninstallString = $GoUninstallKey.UninstallString
            Start-Process -FilePath $UninstallString -ArgumentList "/quiet /norestart" -Wait
            Write-Output "Go removed successfully."
        } else {
            Write-Output "Go not found on the system."
        }
    }
    "help" {
        Write-Output @"
Usage: go.ps1 [-Command install|update|remove|help] [-Version X.X.X]
Commands:
  install - Installs Go. Use [-Version] to specify the version (default: latest).
  update  - Updates Go to the latest version.
  remove  - Removes Go from the system.
  help    - Shows this help message.
"@
    }
    default {
        Write-Output "Invalid command. Use 'install', 'update', 'remove' or 'help'."
    }
}

/// go.sh ///
#!/bin/bash

# shellcheck disable=SC2016

# Color definitions for tput
BLACK=0
RED=1
GREEN=2
YELLOW=3
BLUE=4
CYAN=6
RESET=$(tput sgr0)
TEXT_COLOR="tput setaf "
BACKGROUND_COLOR="tput setab "
CLEAR_UP="#tput cuu 1; tput ed;"

version_regex="[[:digit:]]*\.[[:digit:]]*\.[[:digit:]]"
VERSION_REGEX="[[:digit:]]*\.[[:digit:]]*\.[[:digit:]]"
is_latest_version="yes"

if [[ -n "$NON_INTERACTIVE" ]] && [[ "$NON_INTERACTIVE" == "true" ]]; then
  BYPASS_PROMPTS="true"
else
  BYPASS_PROMPTS=""
fi

function print_welcome() {
  echo -e "$($TEXT_COLOR $CYAN)
\t ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
\t‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
\t‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
\t‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù
\t‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë
${RESET}"
}

function print_help() {
  if test -z $BYPASS_PROMPTS; then
    echo -e "\t$($TEXT_COLOR $BLUE)go.sh${RESET} is a tool that helps you easily install, update or uninstall Go\n
    \t$($TEXT_COLOR $GREEN)-------------------------------  Usage  -------------------------------\n
    \t$($TEXT_COLOR $YELLOW)bash go.sh${RESET}\t\t\t\tInstalls or update Go (if installed)
    \t$($TEXT_COLOR $YELLOW)bash go.sh --version [version]${RESET}\t\tInstalls a specific version of Go
    \t$($TEXT_COLOR $YELLOW)bash go.sh --version check [version]${RESET}\tChecks if a specific version of Go is installed
    \t$($TEXT_COLOR $YELLOW)bash go.sh remove${RESET}\t\t\tUninstalls the installed version of Go
    \t$($TEXT_COLOR $YELLOW)bash go.sh update${RESET}\t\t\tUpdates the installed version of Go
    \t$($TEXT_COLOR $YELLOW)bash go.sh help${RESET}\t\t\t\tPrints this help message
    "
  fi
}

function what_platform() {
  os="$(uname -s)"
  arch="$(uname -m)"

  case $os in
  "Linux")
    case $arch in
    "x86_64")
      arch=amd64
      ;;
    "armv6")
      arch=armv6l
      ;;
    "armv8" | "aarch64")
      arch=arm64
      ;;
    .*386.*)
      arch=386
      ;;
    esac
    platform="linux-$arch"
    ;;
  "Darwin")
    case $arch in
    "x86_64")
      arch=amd64
      ;;
    "arm64")
      arch=arm64
      ;;
    esac
    platform="darwin-$arch"
    ;;
  "MINGW" | "MSYS" | "CYGWIN")
    case $arch in
    "x86_64")
      arch=amd64
      ;;
    "arm64")
      arch=arm64
      ;;
    esac
    platform="windows-$arch"
    ;;
  esac
}

function what_shell_profile() {
  local CURRENT_SHELL="$SHELL"

  if test -z "$CURRENT_SHELL"; then
    CURRENT_SHELL=$(ps -p $$ | tail -n 1 | awk '{print $4}')
  fi

  case $CURRENT_SHELL in
  *zsh)
    shell_profile="zshrc"
    ;;
  *bash)
    shell_profile="bashrc"
    ;;
  *fish)
    shell_profile="config/fish/config.fish"
    ;;
  esac

  if [[ -z $shell_profile ]]; then
    echo "$($TEXT_COLOR $RED)Couldn't detect your shell profile!${RESET}"
    echo "Please add the following lines to your shell profile manually:"
    echo "export GOROOT=\$HOME/.go"
    echo "export GOPATH=\$HOME/go"
    echo "export PATH=\$PATH:\$GOROOT/bin:\$GOPATH/bin"
    exit 1
  fi
}

function what_installed_version() {
  INSTALLED_VERSION=$(go version)
}

function extract_version_from() {
  local version
  version=$(grep -o "$VERSION_REGEX" <<<"$1")
  echo "$version"
}

function get_download_command() {
  if command -v curl &>/dev/null; then
    echo "curl -s"
  elif command -v wget &>/dev/null; then
    echo "wget -qO-"
  else
    echo "$($TEXT_COLOR $RED)Error: Neither curl nor wget is available. Please install one of them.${RESET}" >&2
    exit 1
  fi
}

function find_version_link() {
  file_name="go$version_regex.$platform.tar.gz"
  link_regex="dl/$file_name"
  go_website="https://go.dev/"

  download_command=$(get_download_command)

  latest_version_link="$go_website$(
    $download_command "$go_website/dl/" | # get the HTML of golang page
      grep -o "$link_regex" |             # select installation links
      head -1                             # only get the first link i.e.(latest version)
  )"

  latest_version_file_name=$(grep -o "$file_name" <<<"$latest_version_link")
  [[ -z $latest_version_file_name ]] && echo "$($TEXT_COLOR $RED)Couldn't find $file_name on $go_website${RESET}" && exit 1
}

function go_exists() {
  go version &>/dev/null
}

function remove() {
  if ! go_exists; then
    echo "$($TEXT_COLOR $RED)Go is not installed!${RESET}"
    exit
  fi

  what_shell_profile
  what_installed_version
  echo "$($TEXT_COLOR $RED)removing $INSTALLED_VERSION${RESET} from ${GOROOT}"

  if ! rm -r -f "$GOROOT"; then
    echo "$($TEXT_COLOR $RED)Couldn't remove Go${RESET}."
    echo "Can't remove contents of $GOROOT"
    echo "Maybe you need to run the script with root privileges!"
    echo "sudo bash go.sh"
    exit 1
  fi

  RC_PROFILE="$HOME/.${shell_profile}"

  echo "Creating a backup of your ${RC_PROFILE} to ${RC_PROFILE}-BACKUP"
  cp -af "$RC_PROFILE" "${RC_PROFILE}-BACKUP"
  echo "Removing exports for GOROOT & GOPATH from ${RC_PROFILE}"
  sed -i'' -e '/export GOROOT/d' "${RC_PROFILE}"

  sed -i'' -e '/:$GOROOT/d' "${RC_PROFILE}"
  sed -i'' -e '/export GOPATH/d' "${RC_PROFILE}"
  sed -i'' -e '/:$GOPATH/d' "${RC_PROFILE}"

  echo "$($TEXT_COLOR $GREEN)Uninstalled Go Successfully!${RESET}"
}

function test_installation() {
  if [ $? -ne 0 ]; then
    echo "$($TEXT_COLOR $RED)Installation failed!!${RESET}"
    exit 1
  fi

  what_shell_profile

  echo "$($TEXT_COLOR $CYAN)Go${RESET} ($VERSION) has been installed $($TEXT_COLOR $GREEN)successfully!${RESET}"
  echo "Open a new terminal(to re login) or you can do: $($TEXT_COLOR $YELLOW)source $HOME/.${shell_profile}${RESET}"
}

function install_go() {
  local _VERSION

  _VERSION=${1:-$version_regex}

  what_shell_profile

  eval "$CLEAR_UP"

  VERSION=$(extract_version_from "$latest_version_link")
  version_name="latest version"
  [[ $is_latest_version == "no" ]] && version_name="version"
  echo "Downloading $($TEXT_COLOR $CYAN)Go${RESET} $version_name ($(
    $BACKGROUND_COLOR $BLACK
    tput smul
  )$VERSION${RESET})..."

  download_command=$(get_download_command)

  if [[ $download_command == "curl -s" ]]; then
    if ! curl -fSL --progress-bar "$latest_version_link" -o "$latest_version_file_name"; then
      echo "$($TEXT_COLOR $RED)Download failed!${RESET}"
      exit 1
    fi
  else
    # wget2 v2.1.0 changed --show-progress to --force-progress, so we need to check which one to use
    progress_arg="--show-progress"
    wget --help | grep -q -- --force-progress && progress_arg="--force-progress"

    if ! wget --quiet --continue $progress_arg "$latest_version_link"; then
      echo "$($TEXT_COLOR $RED)Download failed!${RESET}"
      exit 1
    fi
  fi

  [ -z "$GOROOT" ] && GOROOT="$HOME/.go"
  [ -z "$GOPATH" ] && GOPATH="$HOME/go"

  eval "$CLEAR_UP"

  mkdir -p "$GOPATH"/{src,pkg,bin} "$GOROOT"

  echo "Extracting $latest_version_file_name files to $GOROOT..."

  tar -xzf "$latest_version_file_name"

  if [ -d "$GOROOT/go" ]; then
    mv -f "$GOROOT/go" "$GOROOT/go-old"
  fi

  mv -f go/* "$GOROOT"

  if ! rmdir go &>/dev/null; then
    echo "$($TEXT_COLOR $RED)Failed to remove go directory${RESET}"
    if test -z $BYPASS_PROMPTS; then
      read -t 3 -r -p "Do you want to remove it manually? [y/n]: " option || option="n" # timeout after 3 seconds and default to no
      [[ $option == "y" || $option == "Y" ]] && rm -rf go
    else
      rm -rf go || exit 1
    fi
  fi

  what_shell_profile

  touch "$HOME/.${shell_profile}"
  {
    echo "export GOROOT=$GOROOT"
    echo "export GOPATH=$GOPATH"
    echo 'export PATH=$PATH:$GOROOT/bin:$GOPATH/bin'
  } >>"$HOME/.${shell_profile}"

  eval "$CLEAR_UP"
}

function echo_finding() {
  finding="Finding latest version"
  [[ $is_latest_version == "no" ]] && finding="You chose to install version $version_regex"
  echo "$finding of $($TEXT_COLOR $CYAN)Go${RESET} for $($TEXT_COLOR $YELLOW)$platform${RESET}..."
}

function update_go() {
  what_shell_profile

  GOPATH=$(go env GOPATH)
  GOROOT=$(go env GOROOT)
  what_installed_version
  latest=$(extract_version_from "$latest_version_link")
  current=$(extract_version_from "$INSTALLED_VERSION")

  eval "$CLEAR_UP"
  echo -e "          VERSION"
  echo -e "CURRENT:   $current"
  echo -e "CHOSEN:    $latest"

  if [[ $current == "$latest" ]]; then
    echo "You already have that version of $($TEXT_COLOR $CYAN)Go${RESET} Installed!"
    echo "$($TEXT_COLOR $BLUE)Exiting, Bye!${RESET}"
    exit 0
  fi

  echo "Installing will remove the current installed version from '$GOROOT'"

  if [[ $1 == "update" ]]; then
    option=""
  else
    if test -z $BYPASS_PROMPTS; then
      echo -e "Do you want to install $($TEXT_COLOR $GREEN)Go($latest)${RESET} and remove $($TEXT_COLOR $RED)Go($current)${RESET}? [ENTER(yes)/n]: \c"
      read -r option
    else
      option="Y"
    fi
  fi

  case $option in
  "" | Y* | y*)
    remove && install_go
    ;;
  N* | n*)
    echo "Okay, Bye!"
    exit 0
    ;;
  *)
    echo "Wrong choice!"
    exit 1
    ;;
  esac

}

function remove_downloaded_package() {
  rm -f "$latest_version_file_name"
}

function main() {
  print_welcome

  what_shell_profile

  if [[ $# == 1 ]]; then
    case $1 in
    "update")
      ;;
    "remove")
      remove
      exit
      ;;
    *)
      print_help
      exit
      ;;
    esac
  elif [[ $# == 2 ]]; then
    case $1 in
    "--version")
      version_regex=$2
      what_installed_version
      is_latest_version=$(echo "$INSTALLED_VERSION" | grep -q "$version_regex" && echo "yes" || echo "no")
      if [[ $is_latest_version == "yes" ]]; then
        echo "You already have that version of Go Installed!"
        echo "Exiting, Bye!"
        exit 0
      else
        echo "You don't have that version ($version_regex) of Go Installed!"
        echo "Installing..."

        what_platform
        echo_finding
        find_version_link

        if go_exists -eq 0; then
          echo "Go exists"
          update_go "$1"
        else
          install_go "${2:-$version_regex}"
        fi

        remove_downloaded_package
        test_installation

        exit $? # exit with the same exit code as test_installation
      fi
    ;;
    *)
      print_help
      exit
      ;;
    esac
  elif [[ $# == 3 ]]; then
    case $1 in
    "--version")
      if [[ $2 == "check" ]]; then
        version_regex=$3
        what_installed_version
        is_latest_version=$(echo "$INSTALLED_VERSION" | grep -q "$version_regex" && echo "yes" || echo "no")
        if [[ $is_latest_version == "yes" ]]; then
          echo "You already have that version of Go Installed!"
          echo "Exiting, Bye!"
          exit 0
        else
          echo "You don't have that version ($version_regex) of Go Installed!"
          echo "I can install it for you..."
          echo "If you want to install it, run the following command:"
          echo ""
          echo "$($TEXT_COLOR $YELLOW)bash go.sh --version $version_regex${RESET}"
          echo ""
          exit 0
        fi
      else
        print_help
        exit 1
      fi
    ;;
    *)
      print_help
      exit 1
    ;;
    esac
  elif [[ $# -gt 3 ]]; then
    print_help
    exit 1
  fi

  what_platform
  echo_finding
  find_version_link

  if go_exists -eq 0; then
    echo "Go exists"
    update_go "$1"
  else
    install_go
  fi

  test_installation
  remove_downloaded_package
}

main "$@"

/// test.ps1 ///
param(
    [string]$CI = $env:CI
)

function Run-Test {
    param(
        [string]$CI
    )

    if ($CI) {
        Write-Output "Running tests in a CI/CD environment"

        # Test the script in a CI/CD environment
        & .\go.ps1 -Command update
        & .\go.ps1 -Command update
        & .\go.ps1 -Command remove
        & .\go.ps1 -Command remove
        & .\go.ps1 -Command install
        & .\go.ps1 -Command install
        & .\go.ps1 -Command help
        & .\go.ps1 -Command install -Version 1.19.2

    } else {
        Write-Output "Running tests locally (DOCKER ENVIRONMENT TEST TO PREVENT SIDE EFFECTS)"
        Write-Output "This may take a while..."

        # Check if Docker is installed
        if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
            Write-Output "Docker is not installed"
            exit 1
        }

        # Test the script in a Docker environment (with docker security and isolation to prevent side effects)
        $dockerTestResult = docker run --rm -e TERM=xterm -v "${PWD}:/app" -w /app mcr.microsoft.com/powershell:latest pwsh -Command {
            apt-get update
            apt-get install -y curl
            .\go.ps1 -Command update
            .\go.ps1 -Command update
            .\go.ps1 -Command remove
            .\go.ps1 -Command remove
            .\go.ps1 -Command install
            .\go.ps1 -Command install
            .\go.ps1 -Command help
            .\go.ps1 -Command install -Version 1.19.2
        }

        if ($LASTEXITCODE -ne 0) {
            Write-Output "Docker test failed"
            exit $LASTEXITCODE
        } else {
            Write-Output "Docker test passed"
        }

        Remove-Item -Recurse -Force .\go
    }
}

Run-Test -CI $CI

/// test.sh ///
#!/usr/bin/env bash

run_test() {
  local _CI="${1:-${CI:-}}"

  # Check if the script is running in a CI/CD environment
  if test -n "$_CI"; then
    echo "Running tests in a CI/CD environment"

    # Test the script in a CI/CD environment
    bash go.sh update
    bash go.sh update
    bash go.sh remove
    bash go.sh remove
    bash go.sh
    bash go.sh
    bash go.sh help
    bash go.sh --version 1.19.2

  else
    echo "Running tests locally (DOCKER ENVIRONMENT TEST TO PREVENT SIDE EFFECTS)"
    echo "This may take a while..."

    # Check if Docker is installed
    if ! command -v docker &> /dev/null; then
      echo "Docker is not installed"
      exit 1
    fi

    # Test the script in a Docker environment (with docker security and isolation to prevent side effects)
    _docker_test_result=$(docker run --rm -e TERM=xterm -v "$(pwd):/app" -w /app ubuntu bash -c 'apt-get update && apt-get install -y curl && bash go.sh update && bash go.sh update && bash go.sh remove && bash go.sh remove && bash go.sh && bash go.sh && bash go.sh help && bash go.sh --version $(grep -o "v[0-9]*\.[0-9]*\.[0-9]*" <<<"$(bash go.sh --version | grep -o "v[0-9]*\.[0-9]*\.[0-9]*")")') && _docker_test_exit_code=$? || _docker_test_exit_code=$?

    if [[ $_docker_test_exit_code -ne 0 ]]; then
      echo "Docker test failed"
    else
      echo "Docker test passed"
    fi

    sudo rm -rf ./go

    return "$_docker_test_exit_code"
  fi
}

run_test "$@"

exit $?
