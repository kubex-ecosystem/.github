'use client';

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  SparklesIcon, 
  CheckCircleIcon, 
  ExclamationTriangleIcon,
  XCircleIcon,
  DocumentArrowDownIcon,
  ClipboardDocumentIcon
} from '@heroicons/react/24/outline';

interface ValidationResult {
  isValid: boolean;
  markerCount: number;
  estimatedFiles: number;
  errors: string[];
  warnings: string[];
  projectStructure: string[];
}

interface ProjectInfo {
  name: string;
  description: string;
  language: string;
  framework: string;
  estimatedSize: number;
}

export default function AICodePlayground() {
  const [aiCode, setAiCode] = useState('');
  const [isValidating, setIsValidating] = useState(false);
  const [isExtracting, setIsExtracting] = useState(false);
  const [validationResult, setValidationResult] = useState<{
    validation: ValidationResult;
    projectInfo: ProjectInfo;
    suggestions: string[];
  } | null>(null);

  const validateCode = async () => {
    if (!aiCode.trim()) return;
    
    setIsValidating(true);
    try {
      const response = await fetch('/api/validate-ai-code', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ code: aiCode })
      });
      
      const data = await response.json();
      if (data.success) {
        setValidationResult(data);
      }
    } catch (error) {
      console.error('Validation failed:', error);
    } finally {
      setIsValidating(false);
    }
  };

  const extractAndDownload = async () => {
    if (!validationResult?.validation.isValid) return;
    
    setIsExtracting(true);
    try {
      // Criar um arquivo temporário com o código
      const blob = new Blob([aiCode], { type: 'text/plain' });
      const formData = new FormData();
      formData.append('code', aiCode);
      
      // Simular extração (normalmente salvaria em temp file)
      const response = await fetch('/api/extract-ai-project', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ code: aiCode, format: 'zip' })
      });
      
      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${validationResult.projectInfo.name.replace(/\s+/g, '-')}.zip`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      }
    } catch (error) {
      console.error('Extraction failed:', error);
    } finally {
      setIsExtracting(false);
    }
  };

  const pasteExampleCode = () => {
    const exampleCode = `// LookAtni Code - AI Generated Project Example
// This is an example of AI-generated code with invisible markers

/// package.json ///
{
  "name": "ai-react-app",
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev",
    "build": "next build"
  },
  "dependencies": {
    "react": "^18.0.0",
    "next": "^13.0.0"
  }
}

/// src/App.tsx ///
import React from 'react';

export default function App() {
  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="bg-white p-8 rounded-lg shadow-lg">
        <h1 className="text-2xl font-bold text-gray-800 mb-4">
          🚀 AI Generated App
        </h1>
        <p className="text-gray-600">
          This project was generated by AI and extracted using LookAtni!
        </p>
      </div>
    </div>
  );
}

/// README.md ///
# AI Generated React App

This project was created using AI and extracted with LookAtni File Markers.

## Getting Started

\`\`\`bash
npm install
npm run dev
\`\`\`

## Features

- ⚡ Next.js
- 🎨 Tailwind CSS
- 🚀 AI Generated
`;
    setAiCode(exampleCode);
  };

  const getStatusIcon = () => {
    if (!validationResult) return null;
    
    if (validationResult.validation.isValid) {
      return <CheckCircleIcon className="w-5 h-5 text-green-500" />;
    } else if (validationResult.validation.errors.length > 0) {
      return <XCircleIcon className="w-5 h-5 text-red-500" />;
    } else {
      return <ExclamationTriangleIcon className="w-5 h-5 text-yellow-500" />;
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="mb-8 text-center">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex items-center justify-center gap-2 mb-4"
        >
          <SparklesIcon className="w-8 h-8 text-purple-500" />
          <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
            AI Code Playground
          </h2>
          <SparklesIcon className="w-8 h-8 text-purple-500" />
        </motion.div>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Cole código gerado por IA (ChatGPT, Claude, etc.) com marcadores invisíveis do LookAtni 
          e extraia projetos completos instantaneamente!
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input Section */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">🤖 Código AI Gerado</h3>
            <button
              onClick={pasteExampleCode}
              className="flex items-center gap-2 px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
            >
              <ClipboardDocumentIcon className="w-4 h-4" />
              Exemplo
            </button>
          </div>
          
          <div className="relative">
            <textarea
              value={aiCode}
              onChange={(e) => setAiCode(e.target.value)}
              placeholder="Cole aqui o código gerado pela IA com marcadores LookAtni...

Exemplo:
/// package.json ///
{
  'name': 'meu-projeto',
  'version': '1.0.0'
}

/// src/App.js ///
import React from 'react';
export default function App() {
  return <h1>Hello World!</h1>;
}"
              className="w-full h-96 p-4 border border-gray-300 rounded-lg font-mono text-sm resize-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            />
            <div className="absolute bottom-4 right-4 text-xs text-gray-500">
              {aiCode.length} caracteres
            </div>
          </div>

          <div className="flex gap-2">
            <button
              onClick={validateCode}
              disabled={!aiCode.trim() || isValidating}
              className="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 transition-colors"
            >
              {isValidating ? (
                <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
              ) : (
                <SparklesIcon className="w-4 h-4" />
              )}
              {isValidating ? 'Validando...' : 'Validar Código'}
            </button>
            
            {validationResult?.validation.isValid && (
              <button
                onClick={extractAndDownload}
                disabled={isExtracting}
                className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors"
              >
                {isExtracting ? (
                  <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                ) : (
                  <DocumentArrowDownIcon className="w-4 h-4" />
                )}
                {isExtracting ? 'Extraindo...' : 'Baixar Projeto'}
              </button>
            )}
          </div>
        </div>

        {/* Results Section */}
        <div className="space-y-4">
          <h3 className="text-lg font-semibold">📊 Resultado da Análise</h3>
          
          <AnimatePresence>
            {validationResult ? (
              <motion.div
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.95 }}
                className="space-y-4"
              >
                {/* Status Card */}
                <div className={`p-4 rounded-lg border ${
                  validationResult.validation.isValid 
                    ? 'bg-green-50 border-green-200' 
                    : 'bg-red-50 border-red-200'
                }`}>
                  <div className="flex items-center gap-2 mb-2">
                    {getStatusIcon()}
                    <h4 className="font-semibold">
                      {validationResult.validation.isValid ? 'Código Válido!' : 'Problemas Encontrados'}
                    </h4>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-4 text-sm">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-blue-600">
                        {validationResult.validation.markerCount}
                      </div>
                      <div className="text-gray-600">Marcadores</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-600">
                        {validationResult.validation.estimatedFiles}
                      </div>
                      <div className="text-gray-600">Arquivos</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-purple-600">
                        {Math.round(validationResult.projectInfo.estimatedSize / 1024)}KB
                      </div>
                      <div className="text-gray-600">Tamanho</div>
                    </div>
                  </div>
                </div>

                {/* Project Info */}
                <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg">
                  <h4 className="font-semibold text-blue-800 mb-2">📁 Informações do Projeto</h4>
                  <div className="space-y-1 text-sm">
                    <div><strong>Nome:</strong> {validationResult.projectInfo.name}</div>
                    <div><strong>Linguagem:</strong> {validationResult.projectInfo.language}</div>
                    <div><strong>Framework:</strong> {validationResult.projectInfo.framework}</div>
                  </div>
                </div>

                {/* File Structure */}
                {validationResult.validation.projectStructure.length > 0 && (
                  <div className="bg-gray-50 border border-gray-200 p-4 rounded-lg">
                    <h4 className="font-semibold text-gray-800 mb-2">📂 Estrutura de Arquivos</h4>
                    <div className="space-y-1 text-sm font-mono">
                      {validationResult.validation.projectStructure.slice(0, 10).map((file, index) => (
                        <div key={index} className="text-gray-600">
                          📄 {file}
                        </div>
                      ))}
                      {validationResult.validation.projectStructure.length > 10 && (
                        <div className="text-gray-500 italic">
                          ... e mais {validationResult.validation.projectStructure.length - 10} arquivos
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* Suggestions */}
                {validationResult.suggestions.length > 0 && (
                  <div className="bg-yellow-50 border border-yellow-200 p-4 rounded-lg">
                    <h4 className="font-semibold text-yellow-800 mb-2">💡 Sugestões</h4>
                    <ul className="space-y-1 text-sm">
                      {validationResult.suggestions.map((suggestion, index) => (
                        <li key={index} className="text-yellow-700">
                          {suggestion}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Errors & Warnings */}
                {(validationResult.validation.errors.length > 0 || validationResult.validation.warnings.length > 0) && (
                  <div className="space-y-2">
                    {validationResult.validation.errors.length > 0 && (
                      <div className="bg-red-50 border border-red-200 p-4 rounded-lg">
                        <h4 className="font-semibold text-red-800 mb-2">❌ Erros</h4>
                        <ul className="space-y-1 text-sm">
                          {validationResult.validation.errors.map((error, index) => (
                            <li key={index} className="text-red-700">
                              {error}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                    
                    {validationResult.validation.warnings.length > 0 && (
                      <div className="bg-orange-50 border border-orange-200 p-4 rounded-lg">
                        <h4 className="font-semibold text-orange-800 mb-2">⚠️ Avisos</h4>
                        <ul className="space-y-1 text-sm">
                          {validationResult.validation.warnings.map((warning, index) => (
                            <li key={index} className="text-orange-700">
                              {warning}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                )}
              </motion.div>
            ) : (
              <div className="flex items-center justify-center h-64 border-2 border-dashed border-gray-300 rounded-lg">
                <div className="text-center text-gray-500">
                  <SparklesIcon className="w-12 h-12 mx-auto mb-2 opacity-50" />
                  <p>Cole código AI e clique em "Validar Código"</p>
                  <p className="text-sm">para ver a análise aqui</p>
                </div>
              </div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
}
