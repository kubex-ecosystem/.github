# LookAtni Code - Gerado automaticamente
# Data: 2025-07-28T13:30:22.109Z
# Fonte: ./grompt
# Total de arquivos: 62

/// CODE_OF_CONDUCT.md ///
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or
  advances of any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email
  address, without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
discord.gg/CCBJsFHT.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
<https://www.contributor-covenant.org/version/2/0/code_of_conduct.html>.

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder](https://github.com/mozilla/diversity).

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see the FAQ at
<https://www.contributor-covenant.org/faq>. Translations are available at
<https://www.contributor-covenant.org/translations>.

/// NOTICE.md ///
# NOTICE

This software is licensed under the MIT License. Below are additional notes on usage and attribution:

## Attribution Requirement (Optional)

- When distributing or using this software, please provide credit to the original author(s) in one or more of the following ways:
- Retain the copyright notice: `Copyright (c) 2025 Rafael Mori`.
- Include a link to the original project repository or website.

## Acknowledgment

This project was developed with the goal of enhancing usability and providing open access to its features.

For further information about the license and terms of use, please refer to the `LICENSE` file included with this project.

/// README.md ///
# ![Grompt Logo](docs/assets/top_banner.png)

> **Transform your raw ideas into structured, professional prompts with real engineering practices**

[![Go Version](https://img.shields.io/badge/Go-1.21+-blue.svg)](https://golang.org)
[![React](https://img.shields.io/badge/React-18+-blue.svg)](https://reactjs.org)
[![License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)
[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](docs/CONTRIBUTING.md)
[![Build Status](https://github.com/rafa-mori/grompt/actions/workflows/release.yml/badge.svg)](https://github.com/rafa-mori/grompt/actions/workflows/release.yml)
[![GitHub Stars](https://img.shields.io/github/stars/rafa-mori/grompt?style=social)](https://github.com/rafa-mori/grompt/stargazers)

---

**Grompt** is a modern prompt engineering tool that applies real engineering practices to transform messy, unstructured thoughts into clean, effective prompts for AI models. Built with Go and React, it runs as a single binary with zero dependencies.

---

## **Table of Contents**

1. [üéØ Why Grompt?](#-why-grompt)
2. [‚ú® Key Features](#-key-features)
3. [üöÄ Quick Start](#-quick-start)
4. [üí° Usage Examples](#-usage-examples)
5. [üé™ Use Cases](#-use-cases)
6. [‚öôÔ∏è Configuration & API Support](#Ô∏è-configuration--api-support)
7. [üîó Custom Build Hooks](#-custom-build-hooks-modular-build-steps-with-pred-and-posd)
8. [üõ°Ô∏è Security & Best Practices](#Ô∏è-security--best-practices)
9. [üèóÔ∏è Performance & Specifications](#-performance--specifications)
10. [üõ£Ô∏è Roadmap](#Ô∏è-roadmap)
11. [ü§ù Contributing](#-contributing)
12. [üôè Acknowledgments](#-acknowledgments)
13. [üìÑ License](#-license)
14. [üåé Documentation](#-documentation)

---

## üéØ **Why Grompt?**

**Before Grompt:**

```plaintext
hey can you help me make a function that takes a list and sorts it but also 
removes duplicates and maybe returns the count too? oh and it should work 
with strings and numbers...
```

**After Grompt:**

```plaintext
Create a generic TypeScript function that:

**Primary Objective:** Process arrays with dual functionality - sorting and deduplication

**Requirements:**
- Accept arrays of primitive types (strings, numbers)
- Remove duplicate values while preserving original data types
- Sort results using appropriate comparison logic
- Return both processed array and count metadata

**Expected Output:**
- Function signature with proper generic constraints
- Return type: { sorted: T[], count: number }
- Handle edge cases (empty arrays, single elements)
- Include JSDoc documentation with examples

**Context:** Building a data processing utility for a React application where consistent array manipulation is needed across multiple components.
```

---

## ‚ú® **Key Features**

| Feature | Description |
|---------|-------------|
| üß† **Real Prompt Engineering** | Applies genuine prompt engineering techniques, not just templates |
| ‚öõÔ∏è **Modern React UI** | Responsive, intuitive interface with dark/light themes |
| üêπ **Robust Go Backend** | Efficient HTTP server with zero external dependencies |
| üì¶ **Single Binary** | Self-contained executable - just download and run |
| üåç **Cross-Platform** | Windows, Linux, macOS support out of the box |
| üîå **Multiple AI Providers** | OpenAI, Claude, DeepSeek, Ollama, plus demo mode |
| üöÄ **Instant Setup** | No installation, configuration, or cloud dependencies required |

---

## üöÄ **Quick Start**

### Option 1: Download Pre-built Binary

```bash
# Download the latest release for your platform
curl -L https://github.com/rafa-mori/grompt/releases/latest/download/grompt-linux-amd64 -o grompt
chmod +x grompt
./grompt

# Opens automatically at http://localhost:8080
```

### Option 2: Build from Source

```bash
git clone https://github.com/rafa-mori/grompt
cd grompt
make build-all
./grompt
```

**That's it!** No Docker, no complex setup, no cloud accounts needed.

### CLI: Generate AI Squad

Use the `squad` command to generate an `AGENTS.md` with recommended AI agents based on your project requirements:

```bash
./grompt squad "Quero um microservi√ßo de backend para pagamentos, com autentica√ß√£o, integra√ß√£o com Stripe, testes automatizados, e deploy em Docker. Prefiro Go ou Python, sem Java."
```

This will create an `AGENTS.md` file in the current directory.

---

## üí° **Usage Examples**

### Example 1: Code Generation Prompt

**Input Ideas:**

- "Make a REST API"
- "User authentication"
- "Database with PostgreSQL"
- "Rate limiting"

**Generated Prompt:**

```plaintext
Create a RESTful API server with the following specifications:

**Core Requirements:**
- User authentication system with JWT tokens
- PostgreSQL database integration with proper schema design
- Rate limiting middleware to prevent abuse
- RESTful endpoints following standard conventions

**Technical Stack:**
- Backend framework of your choice (Node.js/Express, Go, Python/FastAPI)
- PostgreSQL for data persistence
- JWT for stateless authentication
- Redis or in-memory rate limiting

**Deliverables:**
- Complete API server with documented endpoints
- Database migration scripts
- Authentication middleware implementation
- Rate limiting configuration
- Basic API documentation

**Security Considerations:**
- Password hashing (bcrypt or similar)
- Input validation and sanitization
- CORS configuration
- Environment variable management for secrets
```

### Example 2: Creative Writing Prompt

**Input Ideas:**

- "Sci-fi story"
- "Time travel paradox"
- "Character loses memory"
- "Mystery elements"

**Generated Prompt:**

```plaintext
Write a science fiction short story with the following elements:

**Core Concept:** Time travel creates a paradox that affects the protagonist's memory

**Plot Structure:**
- Protagonist discovers they can time travel but each trip erases specific memories
- A mystery unfolds as they realize someone else knows about their ability
- The memory loss isn't random - it's following a pattern that reveals a larger conspiracy
- Resolution must address both the time paradox and the mystery elements

**Setting & Tone:**
- Near-future setting with accessible time travel technology
- Psychological thriller atmosphere with sci-fi elements
- Focus on internal conflict and mystery rather than action

**Character Development:**
- Protagonist struggles with unreliable memories and identity
- Supporting characters may know more than they initially reveal
- Character growth through solving the mystery despite memory limitations

**Target Length:** 2,000-3,000 words
**Style:** Third-person limited perspective focusing on the protagonist's confusion and discovery process
```

---

## üé™ **Use Cases**

| Scenario | How Grompt Helps |
|----------|------------------|
| **Code Reviews** | Transform vague feedback into specific, actionable prompts for improvements |
| **Content Creation** | Convert content briefs into detailed creative writing or copywriting prompts |
| **Learning & Research** | Turn study topics into structured learning prompts with clear objectives |
| **API Documentation** | Convert technical notes into comprehensive documentation requests |
| **Design Systems** | Transform design ideas into detailed component specification prompts |
| **Data Analysis** | Convert business questions into precise data science and analysis prompts |

---

## ‚öôÔ∏è **Configuration & API Support**

### Environment Variables

```bash
# Server Configuration
export PORT=8080                    # Server port (default: 8080)
export DEBUG=true                   # Enable debug mode

# AI Provider APIs (all optional)
export OPENAI_API_KEY=sk-...        # OpenAI GPT models
export CLAUDE_API_KEY=sk-ant-...    # Anthropic Claude models  
export DEEPSEEK_API_KEY=...         # DeepSeek models
export CHATGPT_API_KEY=...          # ChatGPT API

# Local AI
export OLLAMA_ENDPOINT=http://localhost:11434  # Ollama local models
```

### Supported AI Providers

| Provider | Models | Setup Required |
|----------|--------|----------------|
| **Demo Mode** | Built-in templates | ‚úÖ None - works out of the box |
| **OpenAI** | GPT-4, GPT-4o, GPT-3.5-turbo | API key |
| **Claude** | Claude 3.5 Sonnet, Claude 3 Haiku | API key |
| **DeepSeek** | DeepSeek Chat, DeepSeek Coder | API key |
| **Ollama** | Llama, Mistral, CodeLlama, etc. | Local installation |

---

## üèóÔ∏è **Architecture & Development**

### Project Structure

```plaintext
grompt/
‚îú‚îÄ‚îÄ üìÅ frontend/              # React application
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.jsx          # Main component
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.js         # Entry point
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ ÔøΩ internal/
‚îÇ   ‚îú‚îÄ‚îÄ services/server/     # HTTP server & handlers  
‚îÇ   ‚îî‚îÄ‚îÄ types/               # API integrations & types
‚îú‚îÄ‚îÄ ÔøΩ cmd/                  # CLI entry points
‚îú‚îÄ‚îÄ üìÑ main.go              # Application entry
‚îú‚îÄ‚îÄ üìÑ Makefile             # Build automation
‚îî‚îÄ‚îÄ üìÑ go.mod               # Go dependencies
```

### Development Setup

```bash
# Install dependencies
make install-deps

# Development mode (hot reload)
make dev

# Build for production
make build-all

# Cross-platform builds
make build-cross

# Run tests
make test
```

### API Endpoints

```bash
# Configuration & Health
GET  /api/config     # Available APIs and configuration
GET  /api/health     # Server health status
GET  /api/models     # Available models per provider

# Prompt Generation
POST /api/unified    # Unified endpoint for all providers
POST /api/openai     # OpenAI specific endpoint
POST /api/claude     # Claude specific endpoint
POST /api/deepseek   # DeepSeek specific endpoint
POST /api/ollama     # Ollama specific endpoint

# Utility
GET  /api/test       # Test API provider availability
```

---

## üîó **Custom Build Hooks: Modular Build Steps with `pre.d` and `pos.d`**

Grompt supports **user-customizable build hooks** that run before and after the main build process.
This provides maximum flexibility for teams and advanced users who need to automate steps, integrate with other tools, or adapt builds for different environments ‚Äî **all without changing core scripts.**

### üìÇ **How It Works**

- **Scripts in `support/pre.d/`** are executed **before** the main build (pre-build).
- **Scripts in `support/pos.d/`** run **after** the main build (post-build).
- All scripts are executed in **lexicographic order** (`01-init.sh`, `10-db-migrate.sh`, etc).
- Each script runs in its own subshell for safety.

**Perfect for:**

- Setting up environment variables before building
- Running migrations or checks
- Cleaning up files or sending notifications after build

### üìù **Example Hook Script**

- **support/pre.d/10-setup-env.sh**

```bash
#!/usr/bin/env bash
# Example pre-build hook

echo "üîß [pre.d] Setting up environment..."
export GROMPT_ENV="dev"
```

- **support/pos.d/10-notify.sh**

```bash
#!/usr/bin/env bash
# Example post-build hook

echo "‚úÖ [pos.d] Build completed! Sending notification..."
# your notification code here
```

---

## ‚ö†Ô∏è **Security & Best Practices**

- **Scripts are run with the current user‚Äôs permissions.**
  **DO NOT** add untrusted code to these folders!
- Keep hooks small, modular, and easy to review.
- Always set execute permission: `chmod +x script.sh`
- Use ordered prefixes (`01-`, `02-`, etc) for predictable execution.
- If a script fails, the error is logged but the process continues (you can tune this as needed).
- Full execution log is available for troubleshooting.

### üõ°Ô∏è **Sandboxing Tips (Bash Shell Level)**

While bash has limited sandboxing, these measures help mitigate risk:

- **Run each script in a subshell:**
  Prevents variable/function leakage.

  ```bash
  ( bash "$SCRIPT" )
  ```

- **Restrict permissions:**
  Set `chmod 500` on scripts, and limit writable locations.
- **Resource limits:**
  Use `ulimit` for memory/CPU protection (Linux).

  ```bash
  ulimit -v 1048576  # Limit to 1GB RAM
  ```

- **Use containers or chroot for critical tasks** (advanced).
- **Review every script before use**; never add code you don't trust.

### üìÑ **Template: Default Hook Script**

- **support/pre.d/10-example.sh**

```bash
#!/usr/bin/env bash
# Pre-build hook example for Grompt/GoForge template

echo "üîß Running $(basename "$0")"
# Put your custom commands below
```

- **support/pos.d/10-example.sh**

```bash
#!/usr/bin/env bash
# Post-build hook example for Grompt/GoForge template

echo "‚úÖ Finished $(basename "$0")"
# Put your custom cleanup, notification, or deployment steps here
```

### üí° **Why Use This System?**

- **No need to fork or patch main build scripts for local/company tweaks**
- Keeps project clean, modular, and easy to maintain
- Encourages community contributions and custom workflows
- Great for CI/CD, advanced automation, or onboarding new team members

---

## üèÜ **Summary**

> Create or drop scripts into `support/pre.d/` and `support/pos.d/`, make them executable, and Grompt (or any GoForge-based project) will run them for you at the right time.
> This makes your automation as extensible as your imagination ‚Äî no more ‚Äúhacking‚Äù core scripts.

---

**Pro Tip:**
When you migrate this to GoForge, j√° pode chamar de
**‚ÄúZero-Fragile Build System‚Ñ¢‚Äù** ‚Äî porque toda extens√£o agora √© plug√°vel e revers√≠vel.
Quem mexe, entende, quem n√£o mexe, nem percebe!

## üõ£Ô∏è **Roadmap**

### üöß Current Development

- [ ] **Prompt Templates Library** - Pre-built templates for common use cases
- [ ] **Prompt History & Versioning** - Save and track prompt iterations
- [ ] **Batch Processing** - Process multiple ideas simultaneously

### ÔøΩ Future Features

- [ ] **Prompt Analytics** - Track effectiveness and usage patterns
- [ ] **Team Collaboration** - Share prompts and collaborate on prompt engineering
- [ ] **Plugin System** - Extend functionality with custom prompt processors
- [ ] **API Rate Limiting** - Built-in rate limiting for API providers
- [ ] **Prompt Testing Framework** - A/B test different prompt variations
- [ ] **Integration Webhooks** - Connect with external tools and workflows

### üí≠ Under Consideration

- [ ] **Prompt Marketplace** - Community-driven prompt sharing
- [ ] **AI Model Training Data** - Export prompts for fine-tuning
- [ ] **Multi-language Support** - Interface localization
- [ ] **Mobile App** - Native mobile applications

---

## ü§ù **Contributing**

We welcome contributions! Here's how you can help:

### üêõ **Bug Reports & Feature Requests**

- Open an issue with detailed description
- Include steps to reproduce for bugs
- Use issue templates when available

### üíª **Code Contributions**

```bash
# 1. Fork and clone
git clone https://github.com/your-username/grompt
cd grompt

# 2. Create feature branch
git checkout -b feature/awesome-feature

# 3. Make changes and test
make test
make build-all

# 4. Commit with clear message
git commit -m "Add awesome feature: brief description"

# 5. Push and create PR
git push origin feature/awesome-feature
```

### üìã **Development Guidelines**

- Follow Go and React best practices
- Add tests for new functionality
- Update documentation for API changes
- Ensure cross-platform compatibility

### üéØ **Good First Issues**

Look for issues labeled `good-first-issue` or `help-wanted` to get started!

---

## ÔøΩ **Performance & Specifications**

| Metric | Value |
|--------|-------|
| **Binary Size** | ~15MB (includes React frontend) |
| **Memory Usage** | ~20MB idle, ~50MB under load |
| **Startup Time** | <1 second |
| **Response Time** | <100ms (excluding AI API calls) |
| **Concurrent Users** | 1000+ (depends on AI provider limits) |
| **Platform Support** | Windows, Linux, macOS (x86_64, ARM64) |

---

## üôè **Acknowledgments**

Special thanks to:

- **[Anthropic](https://anthropic.com)** for the Claude API and advancing AI safety
- **[OpenAI](https://openai.com)** for pioneering accessible AI models  
- **[Ollama](https://ollama.ai)** for making local LLMs accessible to everyone
- **[Go Team](https://golang.org)** for creating a robust, efficient language
- **[React Team](https://reactjs.org)** for the excellent UI framework
- **All contributors** who help improve this project

---

## üìÑ **License**

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üåé **Documentation**

- **[English Documentation](README.md)** (this file)
- **[Documenta√ß√£o em Portugu√™s](docs/README.pt-BR.md)**
- **[Contributing Guidelines](docs/CONTRIBUTING.md)**
<!-- - **[API Documentation](docs/API.md)**
- **[Developer Guide](docs/DEVELOPMENT.md)** -->

---

**Made with ‚ù§Ô∏è by Mori family, using Go + React!**

[‚≠ê Star this project](https://github.com/rafa-mori/grompt/stargazers) ‚Ä¢ [üêõ Report Bug](https://github.com/rafa-mori/grompt/issues) ‚Ä¢ [‚ú® Request Feature](https://github.com/rafa-mori/grompt/issues)

*Transform your ideas into powerful prompts today!*

/// SECURITY.md ///
# Security Policy

## Supported Versions

The following table outlines which versions of Grompt currently receive security updates:

| Version | Supported           |
| ------- | ------------------- |
| 1.0.x   | :white_check_mark:  |
| < 0.0   | :x:                 |

> **Note:** Only the latest minor versions in each major release are supported with security updates. Older versions do not receive fixes.

## Reporting a Vulnerability

If you discover a security vulnerability in Grompt:

- **Do NOT disclose it publicly** or via any public forum (including Discord).
- Please report it through one of these private channels:
  - [GitHub Security Advisories](https://github.com/rafa-mori/grompt/security/advisories)
  - Or email: [maintainer@example.com] (replace this with your actual security contact email)

Include as much detail as possible, such as:

- A description of the vulnerability.
- Steps to reproduce or proof-of-concept.
- The impact, if known.

### What to Expect

- **Acknowledgement:** We will acknowledge your report within **2 business days**.
- **Status Updates:** You‚Äôll receive updates at least every **7 days** until we resolve or close the report.
- **Resolution:** We‚Äôll work with you to verify and address the issue as quickly as possible.
- **Credit:** With your permission, we‚Äôll credit you in our release notes.

## Community Support

For general questions, help, or to join our community, visit our [Discord server](https://discord.gg/CCBJsFHT).

> **Please do not report security issues via Discord.** Use the private channels listed above for vulnerability disclosures.

---

If you have questions about this policy, contact the maintainers through the channels above.

/// agents.json ///
[
  {
    "id": 0,
    "Title": "Desenvolvedor Full-Stack",
    "Role": "Implementar API's REST",
    "Skills": [
      "Python",
      "Go",
      "NodeJS"
    ],
    "Restrictions": [],
    "PromptExample": "Criar um backend para embarcar React em Go e Python."
  }
]

/// bkp/AGENTS_IMPORT_EXPORT_DOCS.md ///
# Funcionalidades de Import/Export/Valida√ß√£o de Agents - Implementadas

## Resumo

Implementei com sucesso todas as funcionalidades solicitadas para aprimorar o fluxo de gera√ß√£o de agents com import/export de arquivos AGENTS.md. O sistema agora oferece:

## ‚úÖ Funcionalidades Implementadas

### 1. **Import de AGENTS.md**
- **Interface Modal**: Modal intuitivo com op√ß√µes de upload de arquivo ou colar conte√∫do
- **Valida√ß√£o em Tempo Real**: Parse e valida√ß√£o do conte√∫do antes da importa√ß√£o
- **Op√ß√µes de Importa√ß√£o**:
  - Mesclar com agents existentes
  - Substituir todos os agents
  - Validar antes de importar
- **Relat√≥rio de Erros**: Exibe erros detalhados com localiza√ß√£o e descri√ß√£o
- **Preview**: Mostra preview dos agents que ser√£o importados

### 2. **Export Avan√ßado de Agents**
- **Sele√ß√£o Flex√≠vel**: Permite selecionar agents espec√≠ficos para exportar
- **M√∫ltiplos Formatos**:
  - Markdown (.md) - Formato padr√£o AGENTS.md
  - JSON (.json) - Para integra√ß√£o com outras ferramentas
  - YAML (.yaml) - Para configura√ß√µes estruturadas
- **Nome Personalizado**: Usu√°rio pode definir o nome do arquivo
- **Download Autom√°tico**: Inicia download do arquivo automaticamente

### 3. **Valida√ß√£o de AGENTS.md**
- **Valida√ß√£o Standalone**: Modal dedicado para validar conte√∫do de AGENTS.md
- **Detec√ß√£o de Erros**: Identifica problemas estruturais e de conte√∫do
- **Preview de Agents V√°lidos**: Mostra quais agents foram parseados com sucesso
- **Relat√≥rio Completo**: Estat√≠sticas de valida√ß√£o com contadores de erros

## üîß Endpoints API Implementados

### 1. `POST /api/agents/validate`
```json
{
  "content": "# Agents\n\n## Agent 1: Title\n- Role: ...\n- Skills: ..."
}
```
**Resposta:**
```json
{
  "valid": true,
  "agents_found": 1,
  "agents": [...],
  "errors": [],
  "error_count": 0
}
```

### 2. `POST /api/agents/import`
```json
{
  "content": "...",
  "merge": true,
  "validate": true
}
```
**Resposta:**
```json
{
  "success": true,
  "message": "Successfully imported N agents",
  "imported_agents": [...],
  "imported_count": N,
  "errors": []
}
```

### 3. `POST /api/agents/export-advanced`
```json
{
  "format": "markdown",
  "agent_ids": [1, 2, 3],
  "filename": "my_agents"
}
```
**Resposta:** Arquivo para download no formato solicitado

## üé® Interface do Usu√°rio

### Componentes React Criados:
1. **ImportAgentsModal.jsx** - Modal de importa√ß√£o completo
2. **ExportAgentsModal.jsx** - Modal de exporta√ß√£o avan√ßado
3. **ValidationAgentsModal.jsx** - Modal de valida√ß√£o independente

### Bot√µes Adicionados ao Dashboard:
- üîΩ **Importar AGENTS.md** - Abre modal de importa√ß√£o
- üì§ **Exportar Agentes** - Abre modal de exporta√ß√£o avan√ßado
- ‚úÖ **Validar AGENTS.md** - Abre modal de valida√ß√£o
- üì• **Exportar AGENTS.md** - Export r√°pido (funcionalidade existente)

## üåç Internacionaliza√ß√£o

Adicionei tradu√ß√µes completas em portugu√™s e ingl√™s para todas as novas funcionalidades:
- T√≠tulos e bot√µes
- Mensagens de erro e sucesso
- Placeholders e tooltips
- Op√ß√µes e configura√ß√µes

## üß™ Testes Realizados

### Backend:
- ‚úÖ Valida√ß√£o de agents v√°lidos
- ‚úÖ Detec√ß√£o de erros em agents inv√°lidos
- ‚úÖ Import com merge e replace
- ‚úÖ Export em m√∫ltiplos formatos (MD, JSON, YAML)
- ‚úÖ Compila√ß√£o sem erros

### Frontend:
- ‚úÖ Compila√ß√£o React sem erros
- ‚úÖ Integra√ß√£o dos modais
- ‚úÖ Navega√ß√£o e UX consistente
- ‚úÖ Tema dark/light mode

## üéØ Funcionalidades Principais

### Parse Inteligente
- Suporte a formato padr√£o AGENTS.md
- Detec√ß√£o autom√°tica de estrutura
- Toler√¢ncia a varia√ß√µes de formata√ß√£o
- Valida√ß√£o de campos obrigat√≥rios

### UX Aprimorada
- Fluxo intuitivo de 3 etapas: Input ‚Üí Preview ‚Üí Action
- Feedback visual em tempo real
- Confirma√ß√µes para a√ß√µes destrutivas
- Indicadores de progresso

### Robustez
- Tratamento de erros abrangente
- Valida√ß√£o tanto no frontend quanto backend
- Rollback autom√°tico em caso de falha
- Logs detalhados para debugging

## üìÅ Arquivos de Teste Criados

1. **example_agents.md** - Exemplo de arquivo AGENTS.md v√°lido
2. **test_agents_with_errors.md** - Arquivo com erros para testar valida√ß√£o

## üöÄ Como Usar

1. **Para Importar:**
   - Clique em "Importar AGENTS.md"
   - Carregue arquivo ou cole conte√∫do
   - Escolha op√ß√µes (merge/replace, valida√ß√£o)
   - Visualize preview e erros
   - Confirme importa√ß√£o

2. **Para Exportar:**
   - Clique em "Exportar Agentes"
   - Selecione agents desejados
   - Escolha formato (MD/JSON/YAML)
   - Defina nome do arquivo
   - Baixe automaticamente

3. **Para Validar:**
   - Clique em "Validar AGENTS.md"
   - Cole conte√∫do para validar
   - Veja relat√≥rio completo
   - Identifique e corrija erros

## üéâ Resultado

O sistema agora oferece uma experi√™ncia completa e profissional para gerenciamento de agents via AGENTS.md, com:
- Import/export robusto e flex√≠vel
- Valida√ß√£o abrangente com feedback detalhado
- Interface moderna e intuitiva
- Suporte a m√∫ltiplos formatos
- Tratamento de erros profissional
- Internacionaliza√ß√£o completa

Todas as funcionalidades foram testadas e est√£o funcionando perfeitamente! üöÄ

/// bkp/clean_git_history.sh ///
#!/bin/bash

# üî• Script de Limpeza Completa do Hist√≥rico Git - SUSsec
# Este script remove COMPLETAMENTE o hist√≥rico do Git para eliminar chaves expostas

set -e  # Parar em caso de erro

echo "üî• LIMPEZA COMPLETA DO HIST√ìRICO GIT"
echo "=================================="
echo ""
echo "‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o √© IRREVERS√çVEL!"
echo "    - TODO o hist√≥rico do Git ser√° perdido"
echo "    - Todos os commits anteriores ser√£o removidos"
echo "    - Branches antigas ser√£o eliminadas"
echo ""
echo "‚úÖ Benef√≠cios:"
echo "    - Remove definitivamente chaves expostas"
echo "    - Elimina qualquer rastro de vulnerabilidades"
echo "    - Reposit√≥rio limpo e seguro"
echo ""

# Verificar se estamos em um reposit√≥rio Git
if [ ! -d ".git" ]; then
    echo "‚ùå Erro: Este diret√≥rio n√£o √© um reposit√≥rio Git!"
    exit 1
fi

# Mostrar informa√ß√µes atuais
echo "üìä Status atual do reposit√≥rio:"
echo "   Branch atual: $(git branch --show-current)"
echo "   Total de commits: $(git rev-list --all --count)"
echo "   Remotes: $(git remote -v | wc -l) configurados"
echo ""

# Confirmar com o usu√°rio
read -p "ü§î Tem certeza que deseja LIMPAR TODO O HIST√ìRICO? (digite 'CONFIRMO' para prosseguir): " confirmacao

if [ "$confirmacao" != "CONFIRMO" ]; then
    echo "‚ùå Opera√ß√£o cancelada pelo usu√°rio."
    exit 1
fi

echo ""
echo "üöÄ Iniciando limpeza do hist√≥rico..."

# Backup do remote atual (se existir)
REMOTE_URL=""
if git remote get-url origin &>/dev/null; then
    REMOTE_URL=$(git remote get-url origin)
    echo "üíæ Remote atual salvo: $REMOTE_URL"
fi

# Salvar nome da branch atual
CURRENT_BRANCH=$(git branch --show-current)
echo "üåø Branch atual: $CURRENT_BRANCH"

# Verificar se h√° mudan√ßas n√£o commitadas
if ! git diff-index --quiet HEAD --; then
    echo "üìù Detectadas mudan√ßas n√£o commitadas. Fazendo stash..."
    git stash push -m "Backup antes da limpeza de hist√≥rico - $(date)"
fi

echo ""
echo "üî• Executando limpeza completa..."

# 1. Remover refer√™ncia ao remote para evitar push acidental
if [ ! -z "$REMOTE_URL" ]; then
    git remote remove origin
    echo "   ‚úÖ Remote removido temporariamente"
fi

# 2. Criar um novo branch orf√£o (sem hist√≥rico)
git checkout --orphan new-clean-history
echo "   ‚úÖ Branch √≥rf√£o criado"

# 3. Adicionar todos os arquivos atuais
git add .
echo "   ‚úÖ Arquivos adicionados"

# 4. Fazer o primeiro commit limpo
git commit -m "üéâ Initial commit - Clean history

‚úÖ Security vulnerabilities resolved
‚úÖ Supabase keys removed from history
‚úÖ Fresh start with secure configuration

Previous history removed for security reasons.
Date: $(date '+%Y-%m-%d %H:%M:%S')
"
echo "   ‚úÖ Commit inicial criado"

# 5. Deletar a branch antiga
git branch -D "$CURRENT_BRANCH" 2>/dev/null || echo "   ‚ö†Ô∏è  Branch antiga n√£o p√¥de ser removida (normal se era main/master)"

# 6. Renomear o branch atual para o nome original
if [ "$CURRENT_BRANCH" != "new-clean-history" ]; then
    git branch -m new-clean-history "$CURRENT_BRANCH"
    echo "   ‚úÖ Branch renomeado para $CURRENT_BRANCH"
fi

# 7. For√ßar garbage collection para liberar espa√ßo
git gc --aggressive --prune=now
echo "   ‚úÖ Limpeza de espa√ßo executada"

# 8. Reconectar o remote se existia
if [ ! -z "$REMOTE_URL" ]; then
    git remote add origin "$REMOTE_URL"
    echo "   ‚úÖ Remote reconectado: $REMOTE_URL"
fi

# 9. Aplicar stash se existe
if git stash list | grep -q "Backup antes da limpeza"; then
    echo "   üìù Aplicando mudan√ßas que estavam em stash..."
    git stash pop
fi

echo ""
echo "üéâ LIMPEZA CONCLU√çDA COM SUCESSO!"
echo "================================"
echo ""
echo "üìä Novo status do reposit√≥rio:"
echo "   Branch atual: $(git branch --show-current)"
echo "   Total de commits: $(git rev-list --all --count)"
echo "   Primeiro commit: $(git log --oneline | tail -1)"
echo ""
echo "üö® PR√ìXIMOS PASSOS OBRIGAT√ìRIOS:"
echo ""
echo "1. üîç Verificar se tudo est√° correto:"
echo "   git log --oneline"
echo "   git status"
echo ""
echo "2. üöÄ Force push para o reposit√≥rio remoto:"
echo "   git push -f origin $CURRENT_BRANCH"
echo ""
echo "3. ‚ö†Ô∏è  AVISAR A EQUIPE:"
echo "   - O hist√≥rico foi completamente reescrito"
echo "   - Todos devem re-clonar o reposit√≥rio"
echo "   - Branches locais antigas devem ser descartadas"
echo ""
echo "4. üîê Confirmar no Supabase:"
echo "   - Revogar as chaves antigas imediatamente"
echo "   - Gerar novas chaves"
echo "   - Configurar .env com as novas chaves"
echo ""
echo "‚úÖ Seu reposit√≥rio agora est√° 100% limpo de vulnerabilidades!"

/// bkp/composer.sh ///
#!/bin/bash

# Define o diret√≥rio base
BASE_DIR="lib"

# Lista de arquivos a serem criados
FILES=(
  "config.sh"
  "utils.sh"
  "platform.sh"
  "build.sh"
  "validate.sh"
  "install_funcs.sh"
  "info.sh"
)

# Cria o diret√≥rio base, se ainda n√£o existir
mkdir -p "$BASE_DIR"

# Cria os arquivos dentro do diret√≥rio
for file in "${FILES[@]}"; do
  FILE_PATH="$BASE_DIR/$file"
  if [[ ! -f "$FILE_PATH" ]]; then
    touch "$FILE_PATH"
    printf '%s' "#!/bin/bash" | tee "$FILE_PATH" >/dev/null
    printf '%s' "# $file - script placeholder" | tee -a "$FILE_PATH" >/dev/null
    chmod +x "$FILE_PATH"
    echo "Criado: $FILE_PATH"
  else
    echo "J√° existe: $FILE_PATH"
  fi
done


/// bkp/quick_clean_history.sh ///
#!/bin/bash

# üöÄ Script R√°pido de Limpeza do Hist√≥rico Git
# Vers√£o simplificada para execu√ß√£o direta

echo "üî• LIMPEZA R√ÅPIDA DO HIST√ìRICO GIT"
echo "================================"
echo ""
echo "‚ö†Ô∏è  Esta opera√ß√£o remove TODO o hist√≥rico do Git!"
echo "‚úÖ Mant√©m apenas os arquivos atuais"
echo ""

# Verificar se estamos em um reposit√≥rio Git
if [ ! -d ".git" ]; then
    echo "‚ùå Erro: N√£o est√° em um reposit√≥rio Git!"
    exit 1
fi

# Mostrar status atual
echo "üìä Status atual:"
echo "   Branch: $(git branch --show-current)"
echo "   Commits: $(git rev-list --all --count)"
echo ""

# Confirmar
echo "ü§î Para prosseguir, digite exatamente: LIMPAR HISTORICO"
read -p "Confirma√ß√£o: " confirm

if [ "$confirm" != "LIMPAR HISTORICO" ]; then
    echo "‚ùå Opera√ß√£o cancelada."
    exit 1
fi

echo ""
echo "üöÄ Executando limpeza..."

# Salvar informa√ß√µes
BRANCH=$(git branch --show-current)
REMOTE=$(git remote get-url origin 2>/dev/null || echo "")

# Fazer stash se necess√°rio
if ! git diff-index --quiet HEAD --; then
    git stash push -m "Backup antes da limpeza"
    echo "   üíæ Mudan√ßas salvas em stash"
fi

# Remover remote temporariamente
if [ ! -z "$REMOTE" ]; then
    git remote remove origin
fi

# Criar branch √≥rf√£o
git checkout --orphan temp-clean-branch
echo "   üåø Branch √≥rf√£o criado"

# Adicionar todos os arquivos
git add .
echo "   üìÅ Arquivos adicionados"

# Commit inicial
git commit -m "üéâ Clean history - Security fix

‚úÖ Removed exposed Supabase keys from history
‚úÖ Implemented secure environment configuration  
‚úÖ Fresh start for security compliance

Previous commits removed for security reasons.
Cleaned on: $(date)"

echo "   üíæ Commit inicial criado"

# Deletar branch antigo
git branch -D "$BRANCH" 2>/dev/null || true

# Renomear branch
git branch -m temp-clean-branch "$BRANCH"
echo "   üîÑ Branch renomeado"

# Reconectar remote
if [ ! -z "$REMOTE" ]; then
    git remote add origin "$REMOTE"
    echo "   üîó Remote reconectado"
fi

# Aplicar stash se existe
if git stash list | grep -q "Backup antes da limpeza"; then
    git stash pop
    echo "   üìù Mudan√ßas restauradas"
fi

# Limpeza final
git gc --aggressive --prune=now
echo "   üßπ Limpeza de cache conclu√≠da"

echo ""
echo "üéâ LIMPEZA CONCLU√çDA!"
echo "==================="
echo ""
echo "üìä Novo status:"
echo "   Branch: $(git branch --show-current)"  
echo "   Commits: $(git rev-list --all --count)"
echo ""
echo "üöÄ PR√ìXIMO PASSO - Execute o comando:"
echo ""
echo "   git push -f origin $BRANCH"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE: Avise a equipe para re-clonar o reposit√≥rio!"
echo "‚úÖ O hist√≥rico foi completamente limpo de vulnerabilidades."

/// bkp/quick_start_script.sh ///
#!/usr/bin/env bash

# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë                 üöÄ Grompt Quick Start               ‚ïë
# ‚ïë                                                              ‚ïë
# ‚ïë          Script de instala√ß√£o e execu√ß√£o autom√°tica         ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Project info
PROJECT_NAME="grompt"
SETUP_SCRIPT_URL="https://raw.githubusercontent.com/SEU_USUARIO/grompt-setup/main/setup.sh"

print_banner() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                 üöÄ Grompt Quick Start               ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë          Instala√ß√£o e execu√ß√£o autom√°tica                   ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo
}

print_step() {
    echo -e "${CYAN}üîß $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

check_dependencies() {
    print_step "Verificando depend√™ncias do sistema..."
    
    # Check Go
    if ! command -v go &> /dev/null; then
        print_error "Go n√£o encontrado! Instale Go 1.21+ antes de continuar."
    fi
    
    GO_VERSION=$(go version | grep -oE 'go[0-9]+\.[0-9]+' | sed 's/go//')
    if [[ "$(printf '%s\n' "1.21" "$GO_VERSION" | sort -V | head -n1)" != "1.21" ]]; then
        print_error "Go 1.21+ √© necess√°rio. Vers√£o atual: $GO_VERSION"
    fi
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Node.js n√£o encontrado. Instalando via nvm...${NC}"
        install_nodejs
    fi
    
    NODE_VERSION=$(node --version | sed 's/v//')
    if [[ "$(printf '%s\n' "16.0.0" "$NODE_VERSION" | sort -V | head -n1)" != "16.0.0" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Node.js 16+ recomendado. Vers√£o atual: $NODE_VERSION${NC}"
    fi
    
    # Check npm
    if ! command -v npm &> /dev/null; then
        print_error "npm n√£o encontrado! Instale npm junto com Node.js."
    fi
    
    print_success "Depend√™ncias verificadas"
}

install_nodejs() {
    print_step "Instalando Node.js via nvm..."
    
    # Install nvm if not present
    if ! command -v nvm &> /dev/null; then
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    fi
    
    # Install latest LTS Node.js
    nvm install --lts
    nvm use --lts
    
    print_success "Node.js instalado"
}

run_setup() {
    print_step "Executando script de configura√ß√£o..."
    
    # Baixar e executar o script de setup se n√£o existir localmente
    if [ ! -f "setup.sh" ]; then
        echo -e "${YELLOW}üì• Script de setup n√£o encontrado localmente.${NC}"
        echo -e "${YELLOW}üí° Execute o setup.sh que voc√™ j√° tem ou baixe de um reposit√≥rio.${NC}"
        echo -e "${YELLOW}üîß Por enquanto, vou criar a estrutura localmente...${NC}"
        echo
        
        # Se n√£o tiver o setup.sh, criar estrutura b√°sica
        create_basic_structure
    else
        chmod +x setup.sh
        ./setup.sh
    fi
}

create_basic_structure() {
    print_step "Criando estrutura b√°sica do projeto..."
    
    if [ -d "$PROJECT_NAME" ]; then
        print_error "Diret√≥rio '$PROJECT_NAME' j√° existe!"
    fi
    
    mkdir -p "$PROJECT_NAME"
    cd "$PROJECT_NAME"
    
    print_step "Para continuar, voc√™ precisa do arquivo setup.sh completo."
    print_step "Execute o script setup.sh que foi gerado anteriormente."
    
    cd ..
    print_success "Estrutura b√°sica criada. Execute o setup.sh para continuar."
}

build_and_run() {
    print_step "Fazendo build e executando aplica√ß√£o..."
    
    cd "$PROJECT_NAME"
    
    # Install dependencies
    if [ -f "Makefile" ]; then
        make install-deps
        make build-all
        
        if [ -f "grompt" ] || [ -f "grompt.exe" ]; then
            print_success "Build conclu√≠do com sucesso!"
            
            echo -e "${CYAN}üöÄ Iniciando Grompt...${NC}"
            echo -e "${YELLOW}üí° A aplica√ß√£o abrir√° automaticamente no seu navegador${NC}"
            echo -e "${YELLOW}üõë Pressione Ctrl+C para parar o servidor${NC}"
            echo
            
            # Execute the application
            if [ -f "grompt" ]; then
                ./grompt
            else
                ./grompt.exe
            fi
        else
            print_error "Build falhou! Verifique as depend√™ncias."
        fi
    else
        print_error "Makefile n√£o encontrado! Execute o setup.sh primeiro."
    fi
}

show_manual_instructions() {
    echo
    echo -e "${CYAN}üìö Instru√ß√µes Manuais:${NC}"
    echo
    echo -e "${YELLOW}1. Gerar estrutura:${NC}"
    echo -e "   ${BLUE}curl -O [URL_DO_SETUP_SCRIPT]${NC}"
    echo -e "   ${BLUE}chmod +x setup.sh${NC}"
    echo -e "   ${BLUE}./setup.sh${NC}"
    echo
    echo -e "${YELLOW}2. Build e execu√ß√£o:${NC}"
    echo -e "   ${BLUE}cd grompt${NC}"
    echo -e "   ${BLUE}make install-deps${NC}"
    echo -e "   ${BLUE}make build-all${NC}"
    echo -e "   ${BLUE}./grompt${NC}"
    echo
    echo -e "${YELLOW}3. Configurar APIs (opcional):${NC}"
    echo -e "   ${BLUE}export CLAUDE_API_KEY=your_claude_api_key${NC}"
    echo -e "   ${BLUE}export OLLAMA_ENDPOINT=http://localhost:11434${NC}"
    echo
}

main() {
    print_banner
    
    echo -e "${CYAN}üéØ O que voc√™ gostaria de fazer?${NC}"
    echo -e "${YELLOW}1)${NC} Instala√ß√£o completa (verificar deps + setup + build + run)"
    echo -e "${YELLOW}2)${NC} Apenas verificar depend√™ncias"
    echo -e "${YELLOW}3)${NC} Apenas executar setup"
    echo -e "${YELLOW}4)${NC} Apenas build e executar (se j√° configurado)"
    echo -e "${YELLOW}5)${NC} Mostrar instru√ß√µes manuais"
    echo
    
    read -p "Escolha uma op√ß√£o (1-5): " choice
    echo
    
    case $choice in
        1)
            check_dependencies
            run_setup
            build_and_run
            ;;
        2)
            check_dependencies
            ;;
        3)
            run_setup
            ;;
        4)
            build_and_run
            ;;
        5)
            show_manual_instructions
            ;;
        *)
            echo -e "${RED}Op√ß√£o inv√°lida!${NC}"
            exit 1
            ;;
    esac
}

# Execute if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi

/// bkp/setup_script.sh ///
#!/usr/bin/env bash

# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë                    üöÄ Grompt Setup                  ‚ïë
# ‚ïë                                                              ‚ïë
# ‚ïë              Script autom√°tico de configura√ß√£o              ‚ïë
# ‚ïë                     Powered by Shell + Go                   ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Project info
PROJECT_NAME="grompt"
PROJECT_VERSION="1.0.0"
AUTHOR_NAME="Grompt Team"

# Functions
print_banner() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üöÄ Grompt Setup                  ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë              Gerando estrutura completa do projeto          ‚ïë"
    echo "‚ïë                     Powered by Shell + Go                   ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo
}

print_step() {
    echo -e "${CYAN}üìÅ $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

# Check dependencies
check_dependencies() {
    print_step "Verificando depend√™ncias..."
    
    if ! command -v node &> /dev/null; then
        print_warning "Node.js n√£o encontrado. Certifique-se de instalar Node.js 16+ para desenvolvimento."
    fi
    
    if ! command -v npm &> /dev/null; then
        print_warning "npm n√£o encontrado. Ser√° necess√°rio para instalar depend√™ncias do frontend."
    fi
    
    if ! command -v go &> /dev/null; then
        print_error "Go n√£o encontrado. Por favor, instale Go 1.21+ antes de continuar."
    fi
    
    print_success "Verifica√ß√£o de depend√™ncias conclu√≠da"
}

# Create project structure
create_structure() {
    print_step "Criando estrutura do projeto..."
    
    # Create main directories
    mkdir -p "$PROJECT_NAME"
    cd "$PROJECT_NAME"
    
    # Create frontend structure
    mkdir -p frontend/src
    mkdir -p frontend/public
    mkdir -p .github/workflows
    
    print_success "Estrutura de diret√≥rios criada"
}

# Create Go files
create_go_files() {
    print_step "Gerando arquivos Go..."
    
    # main.go
    cat > main.go << 'EOF'
package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"
)

const (
	AppName     = "Grompt"
	AppVersion  = "1.0.0"
	DefaultPort = "8080"
)

func main() {
	printBanner()

	// Configura√ß√£o
	cfg := &Config{
		Port:           getEnvOr("PORT", DefaultPort),
		ClaudeAPIKey:   os.Getenv("CLAUDE_API_KEY"),
		OllamaEndpoint: getEnvOr("OLLAMA_ENDPOINT", "http://localhost:11434"),
	}

	// Inicializar servidor
	server := NewServer(cfg)

	// Graceful shutdown
	go func() {
		c := make(chan os.Signal, 1)
		signal.Notify(c, os.Interrupt, syscall.SIGTERM)
		<-c
		fmt.Println("\nüõë Encerrando servidor...")
		server.Shutdown()
		os.Exit(0)
	}()

	// Iniciar servidor
	if err := server.Start(); err != nil {
		log.Fatal("‚ùå Erro ao iniciar servidor:", err)
	}
}

func printBanner() {
	fmt.Printf(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üöÄ %s v%s                    ‚ïë
‚ïë                                                              ‚ïë
‚ïë              Transforme ideias em prompts estruturados      ‚ïë
‚ïë                     Powered by Go + React                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

`, AppName, AppVersion)
}

func getEnvOr(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}
EOF

    # config.go
    cat > config.go << 'EOF'
package main

type Config struct {
	Port           string
	ClaudeAPIKey   string
	OllamaEndpoint string
	Debug          bool
}

type APIConfig struct {
	ClaudeAvailable bool   `json:"claude_available"`
	OllamaAvailable bool   `json:"ollama_available"`
	DemoMode        bool   `json:"demo_mode"`
	Version         string `json:"version"`
}

func (c *Config) GetAPIConfig() *APIConfig {
	return &APIConfig{
		ClaudeAvailable: c.ClaudeAPIKey != "",
		OllamaAvailable: c.checkOllamaConnection(),
		DemoMode:        true,
		Version:         AppVersion,
	}
}

func (c *Config) checkOllamaConnection() bool {
	// Implementar verifica√ß√£o de conex√£o com Ollama
	// Por simplicidade, retorna false por enquanto
	return false
}
EOF

    # server.go
    cat > server.go << 'EOF'
package main

import (
	"embed"
	"fmt"
	"io/fs"
	"log"
	"net/http"
	"os"
	"os/exec"
	"runtime"
	"time"
)

//go:embed build/*
var reactApp embed.FS

type Server struct {
	config   *Config
	handlers *Handlers
}

func NewServer(cfg *Config) *Server {
	handlers := NewHandlers(cfg)
	return &Server{
		config:   cfg,
		handlers: handlers,
	}
}

func (s *Server) Start() error {
	// Configurar roteamento
	s.setupRoutes()

	url := fmt.Sprintf("http://localhost:%s", s.config.Port)
	
	fmt.Printf("üåê Servidor iniciado em: %s\n", url)
	fmt.Printf("üìÅ Servindo aplica√ß√£o React embarcada\n")
	fmt.Printf("üîß APIs dispon√≠veis:\n")
	fmt.Printf("   ‚Ä¢ /api/config - Configura√ß√£o\n")
	fmt.Printf("   ‚Ä¢ /api/claude - Claude API\n")
	fmt.Printf("   ‚Ä¢ /api/ollama - Ollama Local\n")
	fmt.Printf("üí° Pressione Ctrl+C para parar\n\n")

	// Abrir navegador ap√≥s delay
	go func() {
		time.Sleep(1 * time.Second)
		openBrowser(url)
	}()

	return http.ListenAndServe(":"+s.config.Port, nil)
}

func (s *Server) setupRoutes() {
	// Servir aplica√ß√£o React
	buildFS, err := fs.Sub(reactApp, "build")
	if err != nil {
		log.Fatal("Erro ao criar subfilesystem:", err)
	}

	fileServer := http.FileServer(http.FS(buildFS))

	// SPA routing - sempre servir index.html para rotas n√£o encontradas
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Path != "/" {
			if _, err := fs.Stat(buildFS, r.URL.Path[1:]); os.IsNotExist(err) {
				r.URL.Path = "/"
			}
		}
		fileServer.ServeHTTP(w, r)
	})

	// API Routes
	http.HandleFunc("/api/config", s.handlers.HandleConfig)
	http.HandleFunc("/api/claude", s.handlers.HandleClaude)
	http.HandleFunc("/api/ollama", s.handlers.HandleOllama)
	http.HandleFunc("/api/health", s.handlers.HandleHealth)
}

func (s *Server) Shutdown() {
	fmt.Println("üßπ Limpando recursos...")
}

func openBrowser(url string) {
	var err error
	switch runtime.GOOS {
	case "linux":
		err = exec.Command("xdg-open", url).Start()
	case "windows":
		err = exec.Command("rundll32", "url.dll,FileProtocolHandler", url).Start()
	case "darwin":
		err = exec.Command("open", url).Start()
	default:
		fmt.Printf("üåê Abra seu navegador em: %s\n", url)
		return
	}

	if err != nil {
		fmt.Printf("‚ö†Ô∏è  N√£o foi poss√≠vel abrir o navegador automaticamente.\n")
		fmt.Printf("üåê Abra manualmente: %s\n", url)
	}
}
EOF

    # handlers.go
    cat > handlers.go << 'EOF'
package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type Handlers struct {
	config    *Config
	claudeAPI *ClaudeAPI
	ollamaAPI *OllamaAPI
}

func NewHandlers(cfg *Config) *Handlers {
	return &Handlers{
		config:    cfg,
		claudeAPI: NewClaudeAPI(cfg.ClaudeAPIKey),
		ollamaAPI: NewOllamaAPI(cfg.OllamaEndpoint),
	}
}

func (h *Handlers) HandleConfig(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)
	
	if r.Method == "OPTIONS" {
		return
	}

	config := h.config.GetAPIConfig()
	
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(config)
}

func (h *Handlers) HandleClaude(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)
	
	if r.Method == "OPTIONS" {
		return
	}
	
	if r.Method != "POST" {
		http.Error(w, "M√©todo n√£o permitido", http.StatusMethodNotAllowed)
		return
	}

	var req ClaudeRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "JSON inv√°lido", http.StatusBadRequest)
		return
	}

	if h.config.ClaudeAPIKey == "" {
		http.Error(w, "Claude API Key n√£o configurada", http.StatusServiceUnavailable)
		return
	}

	response, err := h.claudeAPI.Complete(req.Prompt, req.MaxTokens)
	if err != nil {
		http.Error(w, fmt.Sprintf("Erro na API Claude: %v", err), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"response": response,
		"provider": "claude",
	})
}

func (h *Handlers) HandleOllama(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)
	
	if r.Method == "OPTIONS" {
		return
	}
	
	if r.Method != "POST" {
		http.Error(w, "M√©todo n√£o permitido", http.StatusMethodNotAllowed)
		return
	}

	var req OllamaRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "JSON inv√°lido", http.StatusBadRequest)
		return
	}

	response, err := h.ollamaAPI.Complete(req.Model, req.Prompt)
	if err != nil {
		http.Error(w, fmt.Sprintf("Erro na API Ollama: %v", err), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"response": response,
		"provider": "ollama",
	})
}

func (h *Handlers) HandleHealth(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"status":    "ok",
		"timestamp": time.Now().Unix(),
		"version":   AppVersion,
		"apis": map[string]bool{
			"claude": h.config.ClaudeAPIKey != "",
			"ollama": h.ollamaAPI.IsAvailable(),
		},
	})
}

func (h *Handlers) setCORSHeaders(w http.ResponseWriter) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
}
EOF

    # claude.go
    cat > claude.go << 'EOF'
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

type ClaudeAPI struct {
	apiKey     string
	baseURL    string
	httpClient *http.Client
}

type ClaudeRequest struct {
	Prompt    string `json:"prompt"`
	MaxTokens int    `json:"max_tokens"`
}

type ClaudeAPIRequest struct {
	Model     string `json:"model"`
	MaxTokens int    `json:"max_tokens"`
	Messages  []struct {
		Role    string `json:"role"`
		Content string `json:"content"`
	} `json:"messages"`
}

type ClaudeAPIResponse struct {
	Content []struct {
		Text string `json:"text"`
	} `json:"content"`
}

func NewClaudeAPI(apiKey string) *ClaudeAPI {
	return &ClaudeAPI{
		apiKey:  apiKey,
		baseURL: "https://api.anthropic.com/v1/messages",
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
	}
}

func (c *ClaudeAPI) Complete(prompt string, maxTokens int) (string, error) {
	if c.apiKey == "" {
		return "", fmt.Errorf("API key n√£o configurada")
	}

	requestBody := ClaudeAPIRequest{
		Model:     "claude-3-sonnet-20240229",
		MaxTokens: maxTokens,
		Messages: []struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		}{
			{
				Role:    "user",
				Content: prompt,
			},
		},
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", fmt.Errorf("erro ao serializar request: %v", err)
	}

	req, err := http.NewRequest("POST", c.baseURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("erro ao criar request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("x-api-key", c.apiKey)
	req.Header.Set("anthropic-version", "2023-06-01")

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("erro na requisi√ß√£o: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("erro ao ler resposta: %v", err)
	}

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API retornou status %d: %s", resp.StatusCode, string(body))
	}

	var response ClaudeAPIResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return "", fmt.Errorf("erro ao decodificar resposta: %v", err)
	}

	if len(response.Content) == 0 {
		return "", fmt.Errorf("resposta vazia da API")
	}

	return response.Content[0].Text, nil
}
EOF

    # ollama.go
    cat > ollama.go << 'EOF'
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

type OllamaAPI struct {
	baseURL    string
	httpClient *http.Client
}

type OllamaRequest struct {
	Model  string `json:"model"`
	Prompt string `json:"prompt"`
	Stream bool   `json:"stream"`
}

type OllamaResponse struct {
	Response string `json:"response"`
	Done     bool   `json:"done"`
}

func NewOllamaAPI(baseURL string) *OllamaAPI {
	return &OllamaAPI{
		baseURL: baseURL,
		httpClient: &http.Client{
			Timeout: 60 * time.Second,
		},
	}
}

func (o *OllamaAPI) Complete(model, prompt string) (string, error) {
	endpoint := fmt.Sprintf("%s/api/generate", o.baseURL)

	requestBody := OllamaRequest{
		Model:  model,
		Prompt: prompt,
		Stream: false,
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", fmt.Errorf("erro ao serializar request: %v", err)
	}

	req, err := http.NewRequest("POST", endpoint, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("erro ao criar request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := o.httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("erro na requisi√ß√£o para Ollama: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("erro ao ler resposta: %v", err)
	}

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("Ollama retornou status %d: %s", resp.StatusCode, string(body))
	}

	var response OllamaResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return "", fmt.Errorf("erro ao decodificar resposta: %v", err)
	}

	return response.Response, nil
}

func (o *OllamaAPI) IsAvailable() bool {
	endpoint := fmt.Sprintf("%s/api/tags", o.baseURL)
	
	resp, err := o.httpClient.Get(endpoint)
	if err != nil {
		return false
	}
	defer resp.Body.Close()
	
	return resp.StatusCode == http.StatusOK
}
EOF

    # go.mod
    cat > go.mod << EOF
module grompt

go 1.21

require ()
EOF

    print_success "Arquivos Go criados"
}

# Create React files
create_react_files() {
    print_step "Gerando arquivos React..."
    
    # package.json
    cat > frontend/package.json << EOF
{
  "name": "grompt-frontend",
  "version": "1.0.0",
  "description": "Interface React para o Grompt - Ferramenta de Engenharia de Prompts",
  "private": true,
  "homepage": "./",
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^14.5.2",
    "lucide-react": "^0.263.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build && npm run post-build",
    "post-build": "echo '‚úÖ Build conclu√≠do! Arquivos prontos para embed no Go.'",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "build:go": "npm run build && echo 'üì¶ Build otimizado para integra√ß√£o Go criado em ./build/'",
    "analyze": "npm run build && npx bundle-analyzer build/static/js/*.js"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "bundle-analyzer": "^0.1.0"
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "keywords": [
    "prompt-engineering",
    "ai",
    "claude",
    "react",
    "golang",
    "embedded"
  ],
  "author": "$AUTHOR_NAME",
  "license": "MIT"
}
EOF

    # public/index.html
    cat > frontend/public/index.html << 'EOF'
<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Grompt - Transforme ideias em prompts estruturados" />
    <script src="https://cdn.tailwindcss.com"></script>
    <title>Grompt</title>
  </head>
  <body>
    <noscript>Voc√™ precisa habilitar JavaScript para executar esta aplica√ß√£o.</noscript>
    <div id="root"></div>
  </body>
</html>
EOF

    # src/index.js
    cat > frontend/src/index.js << 'EOF'
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
EOF

    # src/index.css
    cat > frontend/src/index.css << 'EOF'
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.slider::-webkit-slider-thumb {
  appearance: none;
  height: 20px;
  width: 20px;
  border-radius: 50%;
  background: #3b82f6;
  cursor: pointer;
}

.slider::-moz-range-thumb {
  height: 20px;
  width: 20px;
  border-radius: 50%;
  background: #3b82f6;
  cursor: pointer;
}
EOF

    print_success "Arquivos React criados"
}

# Create configuration files
create_config_files() {
    print_step "Criando arquivos de configura√ß√£o..."
    
    # Makefile
    cat > Makefile << 'EOF'
.PHONY: build-frontend build-backend build-all clean dev install-deps run help

# Vari√°veis
APP_NAME=grompt
VERSION=1.0.0
BUILD_DIR=build
FRONTEND_DIR=frontend

# Help
help:
	@echo "üöÄ Grompt - Comandos Dispon√≠veis:"
	@echo ""
	@echo "üì¶ Build:"
	@echo "  make install-deps     - Instalar depend√™ncias"
	@echo "  make build-frontend   - Build do React"
	@echo "  make build-backend    - Build do Go"
	@echo "  make build-all        - Build completo"
	@echo "  make build-cross      - Build multiplataforma"
	@echo ""
	@echo "üîß Desenvolvimento:"
	@echo "  make dev              - Modo desenvolvimento"
	@echo "  make run              - Executar aplica√ß√£o"
	@echo ""
	@echo "üßπ Limpeza:"
	@echo "  make clean            - Limpar builds"

# Instalar depend√™ncias
install-deps:
	@echo "üì¶ Instalando depend√™ncias do frontend..."
	cd $(FRONTEND_DIR) && npm install
	@echo "üì¶ Baixando m√≥dulos Go..."
	go mod tidy
	@echo "‚úÖ Depend√™ncias instaladas!"

# Build do frontend React
build-frontend:
	@echo "‚öõÔ∏è  Compilando React..."
	cd $(FRONTEND_DIR) && npm run build
	@echo "üìÅ Copiando build para diret√≥rio raiz..."
	cp -r $(FRONTEND_DIR)/build ./
	@echo "‚úÖ Frontend compilado!"

# Build do backend Go
build-backend:
	@echo "üêπ Compilando Go..."
	go build -ldflags="-s -w -X main.AppVersion=$(VERSION)" -o $(APP_NAME) .
	@echo "‚úÖ Backend compilado!"

# Build completo
build-all: build-frontend build-backend
	@echo "üéâ Build completo finalizado!"
	@echo "üì± Execute: ./$(APP_NAME)"

# Build multiplataforma
build-cross: build-frontend
	@echo "üåç Compilando para m√∫ltiplas plataformas..."
	GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o $(APP_NAME)-windows-amd64.exe .
	GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o $(APP_NAME)-linux-amd64 .
	GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o $(APP_NAME)-macos-amd64 .
	GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o $(APP_NAME)-macos-arm64 .
	@echo "‚úÖ Builds multiplataforma conclu√≠dos!"

# Desenvolvimento
dev:
	@echo "üîß Iniciando modo desenvolvimento..."
	cd $(FRONTEND_DIR) && npm start &
	sleep 3
	go run . --dev

# Executar aplica√ß√£o
run: build-all
	@echo "üöÄ Iniciando $(APP_NAME)..."
	./$(APP_NAME)

# Limpeza
clean:
	@echo "üßπ Limpando builds..."
	rm -rf $(BUILD_DIR)/
	rm -f $(APP_NAME)*
	cd $(FRONTEND_DIR) && rm -rf build/
	@echo "‚úÖ Limpeza conclu√≠da!"
EOF

    # .gitignore
    cat > .gitignore << 'EOF'
# Bin√°rios
grompt*
!grompt/

# Build outputs
build/
dist/

# Go
*.exe
*.exe~
*.dll
*.so
*.dylib
*.test
*.out
go.work

# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# React
frontend/build/
frontend/.env.local
frontend/.env.development.local
frontend/.env.test.local
frontend/.env.production.local

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log
logs/

# Temporary files
tmp/
temp/

# Environment variables
.env
.env.local
EOF

    # LICENSE
    cat > LICENSE << EOF
MIT License

Copyright (c) 2024 $AUTHOR_NAME

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF

    print_success "Arquivos de configura√ß√£o criados"
}

# Create App.jsx (the main React component)
create_app_jsx() {
    print_step "Criando componente React principal..."
    
    cat > frontend/src/App.jsx << 'EOF'
import React, { useState, useEffect } from 'react';
import { Trash2, Edit3, Plus, Wand2, Sun, Moon, Copy, Check, AlertCircle } from 'lucide-react';

const Krompt = () => {
  const [darkMode, setDarkMode] = useState(true);
  const [currentInput, setCurrentInput] = useState('');
  const [ideas, setIdeas] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [editingText, setEditingText] = useState('');
  const [purpose, setPurpose] = useState('Outros');
  const [customPurpose, setCustomPurpose] = useState('');
  const [maxLength, setMaxLength] = useState(5000);
  const [generatedPrompt, setGeneratedPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [copied, setCopied] = useState(false);
  const [apiProvider, setApiProvider] = useState('claude');
  const [availableAPIs, setAvailableAPIs] = useState({
    claude_available: false,
    ollama_available: false,
    demo_mode: true
  });
  const [connectionStatus, setConnectionStatus] = useState('checking');

  useEffect(() => {
    document.documentElement.className = darkMode ? 'dark' : '';
  }, [darkMode]);

  // Verificar configura√ß√£o e APIs dispon√≠veis na inicializa√ß√£o
  useEffect(() => {
    checkAPIAvailability();
  }, []);

  const checkAPIAvailability = async () => {
    try {
      const response = await fetch('/api/config');
      if (response.ok) {
        const config = await response.json();
        setAvailableAPIs(config);
        setConnectionStatus('connected');
        
        // Definir provider padr√£o baseado na disponibilidade
        if (config.claude_available) {
          setApiProvider('claude');
        } else if (config.ollama_available) {
          setApiProvider('ollama');
        } else {
          setApiProvider('demo');
        }
      } else {
        throw new Error('Servidor n√£o respondeu');
      }
    } catch (error) {
      console.error('Erro ao verificar APIs:', error);
      setConnectionStatus('offline');
      setAvailableAPIs({ demo_mode: true });
      setApiProvider('demo');
    }
  };

  const addIdea = () => {
    if (currentInput.trim()) {
      const newIdea = {
        id: Date.now(),
        text: currentInput.trim()
      };
      setIdeas([...ideas, newIdea]);
      setCurrentInput('');
    }
  };

  const removeIdea = (id) => {
    setIdeas(ideas.filter(idea => idea.id !== id));
  };

  const startEditing = (id, text) => {
    setEditingId(id);
    setEditingText(text);
  };

  const saveEdit = () => {
    setIdeas(ideas.map(idea => 
      idea.id === editingId 
        ? { ...idea, text: editingText }
        : idea
    ));
    setEditingId(null);
    setEditingText('');
  };

  const cancelEdit = () => {
    setEditingId(null);
    setEditingText('');
  };

  const generateDemoPrompt = () => {
    const purposeText = purpose === 'Outros' && customPurpose 
      ? customPurpose 
      : purpose;

    return `# Prompt Estruturado - ${purposeText}

## üéØ Contexto
Voc√™ √© um assistente especializado em **${purposeText.toLowerCase()}** com conhecimento profundo na √°rea.

## üìù Ideias do Usu√°rio Organizadas:
${ideas.map((idea, index) => `**${index + 1}.** ${idea.text}`).join('\n')}

## üîß Instru√ß√µes Espec√≠ficas
- Analise cuidadosamente todas as ideias apresentadas acima
- Identifique o objetivo principal e objetivos secund√°rios
- Forne√ßa uma resposta estruturada e bem organizada
- Mantenha o foco no prop√≥sito definido: **${purposeText}**
- Use exemplos pr√°ticos quando apropriado
- Seja espec√≠fico e action√°vel

## üìã Formato de Resposta Esperado
1. **An√°lise Inicial**: Resumo do que foi solicitado
2. **Desenvolvimento**: Resposta detalhada seguindo as ideias
3. **Conclus√£o**: Pr√≥ximos passos ou considera√ß√µes finais

## ‚öôÔ∏è Configura√ß√µes T√©cnicas
- M√°ximo de caracteres: ${maxLength.toLocaleString()}
- Prop√≥sito: ${purposeText}
- Total de ideias processadas: ${ideas.length}

---
*Prompt gerado automaticamente pelo Grompt v1.0*
*Modo: Demo (configure APIs para funcionalidade completa)*`;
  };

  const generatePrompt = async () => {
    if (ideas.length === 0) return;
    
    setIsGenerating(true);
    
    const purposeText = purpose === 'Outros' && customPurpose 
      ? customPurpose 
      : purpose;
    
    const engineeringPrompt = `
Voc√™ √© um especialista em engenharia de prompts com conhecimento profundo em t√©cnicas de prompt engineering. Sua tarefa √© transformar ideias brutas e desorganizadas em um prompt estruturado, profissional e eficaz.

CONTEXTO: O usu√°rio inseriu as seguintes notas/ideias brutas:
${ideas.map((idea, index) => `${index + 1}. "${idea.text}"`).join('\n')}

PROP√ìSITO DO PROMPT: ${purposeText}
TAMANHO M√ÅXIMO: ${maxLength} caracteres

INSTRU√á√ïES PARA ESTRUTURA√á√ÉO:
1. Analise todas as ideias e identifique o objetivo principal
2. Organize as informa√ß√µes de forma l√≥gica e hier√°rquica
3. Aplique t√©cnicas de engenharia de prompt como:
   - Defini√ß√£o clara de contexto e papel
   - Instru√ß√µes espec√≠ficas e mensur√°veis
   - Exemplos quando apropriado
   - Formato de sa√≠da bem definido
   - Chain-of-thought se necess√°rio
4. Use markdown para estrutura√ß√£o clara
5. Seja preciso, objetivo e profissional
6. Mantenha o escopo dentro do limite de caracteres

IMPORTANTE: Responda APENAS com o prompt estruturado em markdown, sem explica√ß√µes adicionais ou texto introdut√≥rio. O prompt deve ser completo e pronto para uso.
`;

    try {
      let response;
      
      if (apiProvider === 'demo') {
        // Simular delay para parecer real
        await new Promise(resolve => setTimeout(resolve, 2000));
        response = generateDemoPrompt();
      } else if (apiProvider === 'claude') {
        const result = await fetch('/api/claude', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            prompt: engineeringPrompt,
            max_tokens: maxLength
          })
        });
        
        if (!result.ok) {
          throw new Error(`Erro HTTP: ${result.status}`);
        }
        
        const data = await result.json();
        response = data.response || data.content || 'Resposta vazia do servidor';
      } else if (apiProvider === 'ollama') {
        const result = await fetch('/api/ollama', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'llama2',
            prompt: engineeringPrompt,
            stream: false
          })
        });
        
        if (!result.ok) {
          throw new Error(`Erro HTTP: ${result.status}`);
        }
        
        const data = await result.json();
        response = data.response || 'Resposta vazia do Ollama';
      }
      
      setGeneratedPrompt(response);
    } catch (error) {
      console.error('Erro ao gerar prompt:', error);
      setGeneratedPrompt(`# Erro ao Gerar Prompt

**Erro:** ${error.message}

**Detalhes:** N√£o foi poss√≠vel conectar com a API selecionada. Verifique:
- Se o servidor est√° rodando
- Se a API est√° configurada corretamente
- Se h√° conex√£o com a internet (para APIs externas)

**Dica:** Tente usar o modo demo ou configure uma API diferente.`);
    }
    
    setIsGenerating(false);
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generatedPrompt);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Erro ao copiar:', error);
      // Fallback para navegadores mais antigos
      const textArea = document.createElement('textarea');
      textArea.value = generatedPrompt;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  const theme = {
    dark: {
      bg: 'bg-gray-900',
      cardBg: 'bg-gray-800',
      text: 'text-gray-100',
      textSecondary: 'text-gray-300',
      border: 'border-gray-700',
      input: 'bg-gray-700 border-gray-600 text-gray-100',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-700 hover:bg-gray-600 text-gray-200',
      accent: 'text-blue-400'
    },
    light: {
      bg: 'bg-gray-50',
      cardBg: 'bg-white',
      text: 'text-gray-900',
      textSecondary: 'text-gray-600',
      border: 'border-gray-300',
      input: 'bg-white border-gray-300 text-gray-900',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-200 hover:bg-gray-300 text-gray-700',
      accent: 'text-blue-600'
    }
  };

  const currentTheme = darkMode ? theme.dark : theme.light;

  const getConnectionStatusColor = () => {
    switch (connectionStatus) {
      case 'connected': return 'text-green-500';
      case 'offline': return 'text-red-500';
      default: return 'text-yellow-500';
    }
  };

  const getConnectionStatusText = () => {
    switch (connectionStatus) {
      case 'connected': return 'Conectado';
      case 'offline': return 'Offline (Modo Demo)';
      default: return 'Verificando...';
    }
  };

  return (
    <div className={`min-h-screen ${currentTheme.bg} ${currentTheme.text} p-4 transition-colors duration-300`}>
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-4xl font-bold mb-2">
              <span className={currentTheme.accent}>Prompt</span> Crafter
            </h1>
            <p className={currentTheme.textSecondary}>
              Transforme suas ideias brutas em prompts estruturados e profissionais
            </p>
          </div>
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <div className={`h-2 w-2 rounded-full ${connectionStatus === 'connected' ? 'bg-green-500' : connectionStatus === 'offline' ? 'bg-red-500' : 'bg-yellow-500'}`}></div>
              <span className={`text-sm ${getConnectionStatusColor()}`}>
                {getConnectionStatusText()}
              </span>
            </div>
            <select 
              value={apiProvider}
              onChange={(e) => setApiProvider(e.target.value)}
              className={`px-3 py-2 rounded-lg ${currentTheme.input} border focus:ring-2 focus:ring-blue-500`}
            >
              {availableAPIs.claude_available && (
                <option value="claude">Claude API</option>
              )}
              {availableAPIs.ollama_available && (
                <option value="ollama">Ollama Local</option>
              )}
              <option value="demo">Modo Demo</option>
            </select>
            <button
              onClick={() => setDarkMode(!darkMode)}
              className={`p-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
            >
              {darkMode ? <Sun size={20} /> : <Moon size={20} />}
            </button>
          </div>
        </div>

        {/* Status Alert */}
        {connectionStatus === 'offline' && (
          <div className="mb-6 p-4 bg-yellow-900 border border-yellow-600 rounded-lg flex items-center gap-3">
            <AlertCircle className="text-yellow-400" size={20} />
            <p className="text-yellow-100">
              <strong>Modo Offline:</strong> Executando em modo demo. Configure APIs para funcionalidade completa.
            </p>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Input Section */}
          <div className={`${currentTheme.cardBg} rounded-xl p-6 border ${currentTheme.border} shadow-lg`}>
            <h2 className="text-xl font-semibold mb-4">üìù Adicionar Ideias</h2>
            <div className="space-y-4">
              <textarea
                value={currentInput}
                onChange={(e) => setCurrentInput(e.target.value)}
                placeholder="Cole suas notas, ideias brutas ou pensamentos desorganizados aqui..."
                className={`w-full h-32 px-4 py-3 rounded-lg border ${currentTheme.input} focus:ring-2 focus:ring-blue-500 resize-none`}
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && e.ctrlKey) {
                    addIdea();
                  }
                }}
              />
              <button
                onClick={addIdea}
                disabled={!currentInput.trim()}
                className={`w-full flex items-center justify-center gap-2 px-4 py-3 rounded-lg ${currentTheme.button} disabled:opacity-50 disabled:cursor-not-allowed transition-all`}
              >
                <Plus size={20} />
                Incluir (Ctrl+Enter)
              </button>
            </div>

            {/* Configuration */}
            <div className="mt-6 space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">Prop√≥sito do Prompt</label>
                <div className="space-y-2">
                  <div className="flex gap-2">
                    {['C√≥digo', 'Imagem', 'Outros'].map((option) => (
                      <button
                        key={option}
                        onClick={() => setPurpose(option)}
                        className={`px-3 py-2 rounded-lg text-sm border transition-colors ${
                          purpose === option 
                            ? 'bg-blue-600 text-white border-blue-600' 
                            : `${currentTheme.buttonSecondary} ${currentTheme.border}`
                        }`}
                      >
                        {option}
                      </button>
                    ))}
                  </div>
                  {purpose === 'Outros' && (
                    <input
                      type="text"
                      value={customPurpose}
                      onChange={(e) => setCustomPurpose(e.target.value)}
                      placeholder="Descreva o objetivo do prompt..."
                      className={`w-full px-3 py-2 rounded-lg border ${currentTheme.input} focus:ring-2 focus:ring-blue-500`}
                    />
                  )}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  Tamanho M√°ximo: {maxLength.toLocaleString()} caracteres
                </label>
                <input
                  type="range"
                  min="500"
                  max="130000"
                  step="500"
                  value={maxLength}
                  onChange={(e) => setMaxLength(parseInt(e.target.value))}
                  className="w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer slider"
                />
              </div>
            </div>
          </div>

          {/* Ideas List */}
          <div className={`${currentTheme.cardBg} rounded-xl p-6 border ${currentTheme.border} shadow-lg`}>
            <h2 className="text-xl font-semibold mb-4">üí° Suas Ideias ({ideas.length})</h2>
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {ideas.length === 0 ? (
                <p className={`${currentTheme.textSecondary} text-center py-8`}>
                  Adicione suas primeiras ideias ao lado ‚Üê
                </p>
              ) : (
                ideas.map((idea) => (
                  <div key={idea.id} className={`p-3 rounded-lg border ${currentTheme.border} bg-opacity-50`}>
                    {editingId === idea.id ? (
                      <div className="space-y-2">
                        <textarea
                          value={editingText}
                          onChange={(e) => setEditingText(e.target.value)}
                          className={`w-full px-2 py-1 rounded border ${currentTheme.input} text-sm`}
                          rows="2"
                        />
                        <div className="flex gap-1">
                          <button
                            onClick={saveEdit}
                            className="px-2 py-1 bg-green-600 text-white rounded text-xs hover:bg-green-700"
                          >
                            Salvar
                          </button>
                          <button
                            onClick={cancelEdit}
                            className={`px-2 py-1 rounded text-xs ${currentTheme.buttonSecondary}`}
                          >
                            Cancelar
                          </button>
                        </div>
                      </div>
                    ) : (
                      <>
                        <p className="text-sm mb-2">{idea.text}</p>
                        <div className="flex justify-end gap-1">
                          <button
                            onClick={() => startEditing(idea.id, idea.text)}
                            className={`p-1 rounded ${currentTheme.buttonSecondary} hover:bg-opacity-80`}
                          >
                            <Edit3 size={14} />
                          </button>
                          <button
                            onClick={() => removeIdea(idea.id)}
                            className="p-1 rounded bg-red-600 text-white hover:bg-red-700"
                          >
                            <Trash2 size={14} />
                          </button>
                        </div>
                      </>
                    )}
                  </div>
                ))
              )}
            </div>
            
            {ideas.length > 0 && (
              <button
                onClick={generatePrompt}
                disabled={isGenerating}
                className={`w-full mt-4 flex items-center justify-center gap-2 px-4 py-3 rounded-lg bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all transform hover:scale-105`}
              >
                <Wand2 size={20} className={isGenerating ? 'animate-spin' : ''} />
                {isGenerating ? 'Gerando...' : 'Me ajude, engenheiro?!'}
              </button>
            )}
          </div>

          {/* Generated Prompt */}
          <div className={`${currentTheme.cardBg} rounded-xl p-6 border ${currentTheme.border} shadow-lg ${generatedPrompt ? 'lg:col-span-1' : ''}`}>
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">üöÄ Prompt Estruturado</h2>
              {generatedPrompt && (
                <button
                  onClick={copyToClipboard}
                  className={`flex items-center gap-2 px-3 py-2 rounded-lg ${currentTheme.buttonSecondary} hover:bg-opacity-80 transition-colors`}
                >
                  {copied ? <Check size={16} /> : <Copy size={16} />}
                  {copied ? 'Copiado!' : 'Copiar'}
                </button>
              )}
            </div>
            
            {generatedPrompt ? (
              <div className="space-y-4">
                <div className={`text-xs ${currentTheme.textSecondary} flex justify-between`}>
                  <span>Caracteres: {generatedPrompt.length}</span>
                  <span>Limite: {maxLength.toLocaleString()}</span>
                </div>
                <div className={`max-h-96 overflow-y-auto p-4 rounded-lg border ${currentTheme.border} bg-opacity-50`}>
                  <pre className="whitespace-pre-wrap text-sm font-mono">{generatedPrompt}</pre>
                </div>
              </div>
            ) : (
              <div className={`${currentTheme.textSecondary} text-center py-12`}>
                <Wand2 size={48} className="mx-auto mb-4 opacity-50" />
                <p>Seu prompt estruturado aparecer√° aqui</p>
                <p className="text-sm mt-2">Adicione ideias e clique em "Me ajude, engenheiro?!"</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Krompt;
EOF

    print_success "Componente React principal criado"
}

# Create README
create_readme() {
    print_step "Criando documenta√ß√£o..."
    
    cat > README.md << EOF
# üöÄ Grompt

> Transforme suas ideias brutas em prompts estruturados e profissionais

[![Go Version](https://img.shields.io/badge/Go-1.21+-blue.svg)](https://golang.org)
[![React](https://img.shields.io/badge/React-18+-blue.svg)](https://reactjs.org)
[![License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)

## ‚ú® Caracter√≠sticas

- üß† **Engenharia de Prompts Real** - Aplica t√©cnicas genu√≠nas de prompt engineering
- ‚öõÔ∏è **Interface React Moderna** - UI responsiva e intuitiva
- üêπ **Backend Go Robusto** - Servidor HTTP eficiente e leve
- üì¶ **Bin√°rio √önico** - Zero depend√™ncias no deploy
- üåç **Multiplataforma** - Windows, Linux, macOS
- üîå **APIs Integradas** - Claude, Ollama e modo demo
- üé® **Temas Dark/Light** - Interface personaliz√°vel

## üöÄ In√≠cio R√°pido

### Pr√©-requisitos
- Go 1.21+
- Node.js 16+
- npm ou yarn

### Instala√ß√£o

\`\`\`bash
# 1. Clone o reposit√≥rio
git clone https://github.com/seu-usuario/grompt
cd grompt

# 2. Instale depend√™ncias
make install-deps

# 3. Build completo
make build-all

# 4. Execute
./grompt
\`\`\`

A aplica√ß√£o abrir√° automaticamente em \`http://localhost:8080\`

## üîß Desenvolvimento

\`\`\`bash
# Modo desenvolvimento (hot reload)
make dev

# Build apenas frontend
make build-frontend

# Build apenas backend
make build-backend

# Build multiplataforma
make build-cross
\`\`\`

## ‚öôÔ∏è Configura√ß√£o

### Vari√°veis de Ambiente

\`\`\`bash
# Porta do servidor (padr√£o: 8080)
export PORT=3000

# Claude API Key (opcional)
export CLAUDE_API_KEY=your_claude_api_key

# Ollama Endpoint (padr√£o: http://localhost:11434)
export OLLAMA_ENDPOINT=http://localhost:11434
\`\`\`

### APIs Suportadas

- **Claude API** - Configure \`CLAUDE_API_KEY\`
- **Ollama Local** - Instale Ollama localmente
- **Modo Demo** - Funciona sem configura√ß√£o

## üìÅ Estrutura do Projeto

\`\`\`
grompt/
‚îú‚îÄ‚îÄ üìÅ frontend/          # Aplica√ß√£o React
‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ üìÑ main.go           # Entrada principal
‚îú‚îÄ‚îÄ üìÑ server.go         # Servidor HTTP
‚îú‚îÄ‚îÄ üìÑ handlers.go       # Manipuladores de rotas
‚îú‚îÄ‚îÄ üìÑ claude.go         # Integra√ß√£o Claude
‚îú‚îÄ‚îÄ üìÑ ollama.go         # Integra√ß√£o Ollama
‚îú‚îÄ‚îÄ üìÑ config.go         # Configura√ß√µes
‚îú‚îÄ‚îÄ üìÑ Makefile          # Scripts de build
‚îî‚îÄ‚îÄ üìÑ README.md
\`\`\`

## üéØ Como Usar

1. **Adicione Ideias** - Cole suas notas brutas no primeiro campo
2. **Configure Prop√≥sito** - Escolha entre C√≥digo, Imagem ou Outros
3. **Ajuste Tamanho** - Define limite de caracteres (500-130k)
4. **Gere Prompt** - Clique em "Me ajude, engenheiro?!"
5. **Copie Resultado** - Use o prompt estruturado gerado

## üîå Integra√ß√µes

### Claude API
\`\`\`bash
export CLAUDE_API_KEY=your_api_key
./grompt
\`\`\`

### Ollama Local
\`\`\`bash
# Instalar Ollama
curl -fsSL https://ollama.ai/install.sh | sh

# Baixar modelo
ollama pull llama2

# Executar Grompt
./grompt
\`\`\`

## üì¶ Distribui√ß√£o

\`\`\`bash
# Build para produ√ß√£o
make build-cross

# Arquivos gerados:
# grompt-windows-amd64.exe
# grompt-linux-amd64
# grompt-macos-amd64
# grompt-macos-arm64
\`\`\`

## ü§ù Contribuindo

1. Fork o projeto
2. Crie uma branch (\`git checkout -b feature/nova-funcionalidade\`)
3. Commit suas mudan√ßas (\`git commit -am 'Adiciona nova funcionalidade'\`)
4. Push para a branch (\`git push origin feature/nova-funcionalidade\`)
5. Abra um Pull Request

## üìÑ Licen√ßa

Este projeto est√° sob a licen√ßa MIT. Veja o arquivo [LICENSE](LICENSE) para detalhes.

## üôè Agradecimentos

- [Anthropic](https://anthropic.com) pela API Claude
- [Ollama](https://ollama.ai) pela plataforma de LLMs locais
- [React](https://reactjs.org) pela biblioteca de UI
- [Go](https://golang.org) pela linguagem robusta

---

<div align="center">
Feito com ‚ù§Ô∏è em Go + React
</div>
EOF

    print_success "Documenta√ß√£o criada"
}

# Create GitHub Actions
create_github_actions() {
    print_step "Configurando GitHub Actions..."
    
    cat > .github/workflows/build.yml << 'EOF'
name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.21
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install frontend dependencies
      run: cd frontend && npm install
      
    - name: Build frontend
      run: cd frontend && npm run build
      
    - name: Copy build to root
      run: cp -r frontend/build ./
      
    - name: Build Go application
      run: go build -v ./...
      
    - name: Test
      run: go test -v ./...
EOF

    print_success "GitHub Actions configurado"
}

# Initialize git repository
init_git() {
    print_step "Inicializando reposit√≥rio Git..."
    
    git init
    git add .
    git commit -m "üöÄ Initial commit: Grompt v$PROJECT_VERSION

‚ú® Features:
- Interface React moderna com temas dark/light
- Backend Go com servidor HTTP embarcado
- Integra√ß√£o Claude API e Ollama
- Engenharia de prompts real
- Bin√°rio √∫nico sem depend√™ncias
- Build multiplataforma

üîß Tech Stack:
- Go 1.21+ (backend)
- React 18+ (frontend)
- TailwindCSS (styling)
- Embedded filesystem (go:embed)

üì¶ Zero dependencies deployment
üåç Cross-platform binary"

    print_success "Reposit√≥rio Git inicializado"
}

# Test build
test_build() {
    print_step "Testando build inicial..."
    
    if command -v npm &> /dev/null; then
        echo "üîß Instalando depend√™ncias do npm..."
        cd frontend && npm install && cd ..
        
        echo "‚öõÔ∏è  Fazendo build do React..."
        cd frontend && npm run build && cd ..
        
        echo "üìÅ Copiando build..."
        cp -r frontend/build ./
    else
        print_warning "npm n√£o encontrado. Pulando build do frontend."
    fi
    
    echo "üì¶ Inicializando m√≥dulos Go..."
    go mod tidy
    
    echo "üêπ Testando build Go..."
    go build -o grompt-test .
    
    if [ -f "grompt-test" ]; then
        print_success "Build teste bem-sucedido!"
        rm grompt-test
    else
        print_warning "Build teste falhou, mas estrutura foi criada."
    fi
}

# Final instructions
show_final_instructions() {
    echo
    print_step "üéâ Projeto Grompt criado com sucesso!"
    echo
    echo -e "${GREEN}üìÅ Estrutura criada em: ${BLUE}./$PROJECT_NAME/${NC}"
    echo
    echo -e "${CYAN}üöÄ Pr√≥ximos passos:${NC}"
    echo -e "   ${YELLOW}1.${NC} cd $PROJECT_NAME"
    echo -e "   ${YELLOW}2.${NC} make install-deps    # Instalar depend√™ncias"
    echo -e "   ${YELLOW}3.${NC} make build-all       # Build completo"
    echo -e "   ${YELLOW}4.${NC} ./grompt     # Executar aplica√ß√£o"
    echo
    echo -e "${CYAN}üîß Comandos √∫teis:${NC}"
    echo -e "   ${YELLOW}‚Ä¢${NC} make help            # Ver todos os comandos"
    echo -e "   ${YELLOW}‚Ä¢${NC} make dev             # Modo desenvolvimento"
    echo -e "   ${YELLOW}‚Ä¢${NC} make build-cross     # Build multiplataforma"
    echo -e "   ${YELLOW}‚Ä¢${NC} make clean           # Limpar builds"
    echo
    echo -e "${CYAN}üìö Configura√ß√£o de APIs:${NC}"
    echo -e "   ${YELLOW}‚Ä¢${NC} export CLAUDE_API_KEY=your_key"
    echo -e "   ${YELLOW}‚Ä¢${NC} export OLLAMA_ENDPOINT=http://localhost:11434"
    echo
    echo -e "${CYAN}üêô Para subir no GitHub:${NC}"
    echo -e "   ${YELLOW}1.${NC} Crie um novo repo no GitHub"
    echo -e "   ${YELLOW}2.${NC} git remote add origin https://github.com/SEU_USUARIO/grompt.git"
    echo -e "   ${YELLOW}3.${NC} git branch -M main"
    echo -e "   ${YELLOW}4.${NC} git push -u origin main"
    echo
    print_success "Estrutura completa gerada! Bom desenvolvimento! üöÄ"
}

# Main execution
main() {
    print_banner
    
    # Check if project already exists
    if [ -d "$PROJECT_NAME" ]; then
        print_error "Diret√≥rio '$PROJECT_NAME' j√° existe! Remova-o ou escolha outro nome."
    fi
    
    check_dependencies
    create_structure
    create_go_files
    create_react_files
    create_config_files
    create_app_jsx
    create_readme
    create_github_actions
    init_git
    test_build
    show_final_instructions
}

# Script execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi

/// bkp/windows_setup_script.txt ///
@echo off
chcp 65001 >nul
setlocal enabledelayedexpansion

REM ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
REM ‚ïë                    üöÄ Grompt Setup                  ‚ïë
REM ‚ïë                                                              ‚ïë
REM ‚ïë              Script autom√°tico para Windows                 ‚ïë
REM ‚ïë                     Powered by Batch + Go                   ‚ïë
REM ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

set PROJECT_NAME=grompt
set PROJECT_VERSION=1.0.0
set AUTHOR_NAME=Grompt Team

echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                    üöÄ Grompt Setup                  ‚ïë
echo ‚ïë                                                              ‚ïë
echo ‚ïë              Gerando estrutura completa do projeto          ‚ïë
echo ‚ïë                     Powered by Batch + Go                   ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

REM Check if Go is installed
echo üì¶ Verificando depend√™ncias...
where go >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Go n√£o encontrado! Por favor, instale Go 1.21+ antes de continuar.
    echo üí° Baixe em: https://golang.org/dl/
    pause
    exit /b 1
)

REM Check if Node.js is installed
where node >nul 2>&1
if errorlevel 1 (
    echo ‚ö†Ô∏è  Node.js n√£o encontrado. Recomendamos instalar Node.js 16+
    echo üí° Baixe em: https://nodejs.org/
    echo üîÑ Continuando sem Node.js - voc√™ pode instalar depois...
    set NODE_AVAILABLE=false
) else (
    echo ‚úÖ Node.js encontrado
    set NODE_AVAILABLE=true
)

echo ‚úÖ Verifica√ß√£o de depend√™ncias conclu√≠da
echo.

REM Check if project directory already exists
if exist "%PROJECT_NAME%" (
    echo ‚ùå Diret√≥rio '%PROJECT_NAME%' j√° existe!
    echo üßπ Remova-o ou escolha outro nome.
    pause
    exit /b 1
)

echo üìÅ Criando estrutura do projeto...
mkdir "%PROJECT_NAME%"
cd "%PROJECT_NAME%"

REM Create frontend structure
mkdir frontend\src
mkdir frontend\public
mkdir .github\workflows

echo ‚úÖ Estrutura de diret√≥rios criada

echo üêπ Gerando arquivos Go...

REM Create main.go
(
echo package main
echo.
echo import ^(
echo 	"fmt"
echo 	"log"
echo 	"os"
echo 	"os/signal"
echo 	"syscall"
echo 	"time"
echo ^)
echo.
echo const ^(
echo 	AppName     = "Grompt"
echo 	AppVersion  = "1.0.0"
echo 	DefaultPort = "8080"
echo ^)
echo.
echo func main^(^) {
echo 	printBanner^(^)
echo.
echo 	// Configura√ß√£o
echo 	cfg := ^&Config{
echo 		Port:           getEnvOr^("PORT", DefaultPort^),
echo 		ClaudeAPIKey:   os.Getenv^("CLAUDE_API_KEY"^),
echo 		OllamaEndpoint: getEnvOr^("OLLAMA_ENDPOINT", "http://localhost:11434"^),
echo 	}
echo.
echo 	// Inicializar servidor
echo 	server := NewServer^(cfg^)
echo.
echo 	// Graceful shutdown
echo 	go func^(^) {
echo 		c := make^(chan os.Signal, 1^)
echo 		signal.Notify^(c, os.Interrupt, syscall.SIGTERM^)
echo 		^<-c
echo 		fmt.Println^("\nüõë Encerrando servidor..."^)
echo 		server.Shutdown^(^)
echo 		os.Exit^(0^)
echo 	}^(^)
echo.
echo 	// Iniciar servidor
echo 	if err := server.Start^(^); err != nil {
echo 		log.Fatal^("‚ùå Erro ao iniciar servidor:", err^)
echo 	}
echo }
echo.
echo func printBanner^(^) {
echo 	fmt.Printf^(`
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                    üöÄ %%s v%%s                    ‚ïë
echo ‚ïë                                                              ‚ïë
echo ‚ïë              Transforme ideias em prompts estruturados      ‚ïë
echo ‚ïë                     Powered by Go + React                   ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.
echo `, AppName, AppVersion^)
echo }
echo.
echo func getEnvOr^(key, defaultValue string^) string {
echo 	if value := os.Getenv^(key^); value != "" {
echo 		return value
echo 	}
echo 	return defaultValue
echo }
) > main.go

REM Create go.mod
(
echo module grompt
echo.
echo go 1.21
echo.
echo require ^(^)
) > go.mod

REM Create basic config.go
(
echo package main
echo.
echo type Config struct {
echo 	Port           string
echo 	ClaudeAPIKey   string
echo 	OllamaEndpoint string
echo 	Debug          bool
echo }
echo.
echo type APIConfig struct {
echo 	ClaudeAvailable bool   `json:"claude_available"`
echo 	OllamaAvailable bool   `json:"ollama_available"`
echo 	DemoMode        bool   `json:"demo_mode"`
echo 	Version         string `json:"version"`
echo }
echo.
echo func ^(c *Config^) GetAPIConfig^(^) *APIConfig {
echo 	return ^&APIConfig{
echo 		ClaudeAvailable: c.ClaudeAPIKey != "",
echo 		OllamaAvailable: false, // Simplified for Windows
echo 		DemoMode:        true,
echo 		Version:         AppVersion,
echo 	}
echo }
) > config.go

echo ‚úÖ Arquivos Go b√°sicos criados

if "%NODE_AVAILABLE%"=="true" (
    echo ‚öõÔ∏è  Criando arquivos React...
    
    REM Create package.json
    (
    echo {
    echo   "name": "grompt-frontend",
    echo   "version": "1.0.0",
    echo   "description": "Interface React para o Grompt",
    echo   "private": true,
    echo   "homepage": "./",
    echo   "dependencies": {
    echo     "lucide-react": "^0.263.1",
    echo     "react": "^18.2.0",
    echo     "react-dom": "^18.2.0",
    echo     "react-scripts": "5.0.1"
    echo   },
    echo   "scripts": {
    echo     "start": "react-scripts start",
    echo     "build": "react-scripts build",
    echo     "test": "react-scripts test",
    echo     "eject": "react-scripts eject"
    echo   },
    echo   "eslintConfig": {
    echo     "extends": ["react-app"]
    echo   },
    echo   "browserslist": {
    echo     "production": [">0.2%%", "not dead", "not op_mini all"],
    echo     "development": ["last 1 chrome version", "last 1 firefox version", "last 1 safari version"]
    echo   }
    echo }
    ) > frontend\package.json
    
    REM Create basic HTML
    (
    echo ^<!DOCTYPE html^>
    echo ^<html lang="pt-BR"^>
    echo ^<head^>
    echo   ^<meta charset="utf-8" /^>
    echo   ^<meta name="viewport" content="width=device-width, initial-scale=1" /^>
    echo   ^<title^>Grompt^</title^>
    echo   ^<script src="https://cdn.tailwindcss.com"^>^</script^>
    echo ^</head^>
    echo ^<body^>
    echo   ^<div id="root"^>^</div^>
    echo ^</body^>
    echo ^</html^>
    ) > frontend\public\index.html
    
    echo ‚úÖ Arquivos React criados
) else (
    echo ‚ö†Ô∏è  Pulando cria√ß√£o de arquivos React - Node.js n√£o dispon√≠vel
)

REM Create .gitignore
(
echo # Bin√°rios
echo grompt*
echo !grompt/
echo.
echo # Build outputs
echo build/
echo dist/
echo.
echo # Go
echo *.exe
echo *.dll
echo *.so
echo *.dylib
echo *.test
echo *.out
echo.
echo # Node.js
echo node_modules/
echo npm-debug.log*
echo.
echo # React
echo frontend/build/
echo.
echo # IDEs
echo .vscode/
echo .idea/
echo.
echo # OS
echo .DS_Store
echo Thumbs.db
echo.
echo # Logs
echo *.log
echo.
echo # Environment
echo .env
) > .gitignore

REM Create README.md
(
echo # üöÄ Grompt
echo.
echo ^> Transforme suas ideias brutas em prompts estruturados e profissionais
echo.
echo ## ‚ú® Caracter√≠sticas
echo.
echo - üß† **Engenharia de Prompts Real** - Aplica t√©cnicas genu√≠nas de prompt engineering
echo - ‚öõÔ∏è **Interface React Moderna** - UI responsiva e intuitiva
echo - üêπ **Backend Go Robusto** - Servidor HTTP eficiente e leve
echo - üì¶ **Bin√°rio √önico** - Zero depend√™ncias no deploy
echo - üåç **Multiplataforma** - Windows, Linux, macOS
echo.
echo ## üöÄ In√≠cio R√°pido
echo.
echo ### Windows
echo ```cmd
echo # 1. Instalar depend√™ncias ^(se npm dispon√≠vel^)
echo cd frontend
echo npm install
echo cd ..
echo.
echo # 2. Build Go
echo go mod tidy
echo go build -o grompt.exe .
echo.
echo # 3. Executar
echo grompt.exe
echo ```
echo.
echo ### Linux/macOS
echo ```bash
echo # 1. Instalar depend√™ncias
echo make install-deps
echo.
echo # 2. Build completo
echo make build-all
echo.
echo # 3. Executar
echo ./grompt
echo ```
echo.
echo ## ‚öôÔ∏è Configura√ß√£o
echo.
echo ### Vari√°veis de Ambiente
echo.
echo ```cmd
echo # Windows
echo set CLAUDE_API_KEY=your_claude_api_key
echo set OLLAMA_ENDPOINT=http://localhost:11434
echo grompt.exe
echo ```
echo.
echo ```bash
echo # Linux/macOS
echo export CLAUDE_API_KEY=your_claude_api_key
echo export OLLAMA_ENDPOINT=http://localhost:11434
echo ./grompt
echo ```
echo.
echo ## üìÑ Licen√ßa
echo.
echo Este projeto est√° sob a licen√ßa MIT.
echo.
echo ---
echo.
echo Feito com ‚ù§Ô∏è em Go + React
) > README.md

echo ‚úÖ Documenta√ß√£o criada

echo üîß Inicializando m√≥dulos Go...
go mod tidy

if "%NODE_AVAILABLE%"=="true" (
    echo üì¶ Instalando depend√™ncias do frontend...
    cd frontend
    call npm install
    cd ..
    echo ‚úÖ Depend√™ncias instaladas
)

echo üêπ Testando build Go...
go build -o grompt-test.exe .

if exist "grompt-test.exe" (
    echo ‚úÖ Build teste bem-sucedido!
    del grompt-test.exe
) else (
    echo ‚ö†Ô∏è  Build teste falhou, mas estrutura foi criada.
)

echo.
echo üéâ Projeto Grompt criado com sucesso!
echo.
echo üìÅ Estrutura criada em: .\%PROJECT_NAME%\
echo.
echo üöÄ Pr√≥ximos passos:
echo    1. cd %PROJECT_NAME%
echo    2. go build -o grompt.exe .
echo    3. grompt.exe
echo.
echo üîß Para desenvolvimento completo:
echo    1. Instale Node.js 16+ (se ainda n√£o tiver)
echo    2. cd frontend ^&^& npm install ^&^& npm run build
echo    3. copy frontend\build\* .\
echo    4. go build -o grompt.exe .
echo.
echo üìö Configura√ß√£o de APIs:
echo    ‚Ä¢ set CLAUDE_API_KEY=your_key
echo    ‚Ä¢ set OLLAMA_ENDPOINT=http://localhost:11434
echo.
echo ‚úÖ Estrutura completa gerada! Bom desenvolvimento! üöÄ
echo.
pause

/// cmd/cli/common.go ///
// Package cli provides common functionality for command-line interface applications.
package cli

import (
	"math/rand"
	"os"
	"strings"
)

var banners = []string{
	`
  ______                                            __     
 /      \                                          |  \    
|  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\ ______   ______  ______ ____   ______  _| ‚ñì‚ñì_   
| ‚ñì‚ñì __\‚ñì‚ñì/      \ /      \|      \    \ /      \|   ‚ñì‚ñì \  
| ‚ñì‚ñì|    \  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\ ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\‚ñì‚ñì‚ñì‚ñì\  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\\‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì  
| ‚ñì‚ñì \‚ñì‚ñì‚ñì‚ñì ‚ñì‚ñì   \‚ñì‚ñì ‚ñì‚ñì  | ‚ñì‚ñì ‚ñì‚ñì | ‚ñì‚ñì | ‚ñì‚ñì ‚ñì‚ñì  | ‚ñì‚ñì | ‚ñì‚ñì __ 
| ‚ñì‚ñì__| ‚ñì‚ñì ‚ñì‚ñì     | ‚ñì‚ñì__/ ‚ñì‚ñì ‚ñì‚ñì | ‚ñì‚ñì | ‚ñì‚ñì ‚ñì‚ñì__/ ‚ñì‚ñì | ‚ñì‚ñì|  \
 \‚ñì‚ñì    ‚ñì‚ñì ‚ñì‚ñì      \‚ñì‚ñì    ‚ñì‚ñì ‚ñì‚ñì | ‚ñì‚ñì | ‚ñì‚ñì ‚ñì‚ñì    ‚ñì‚ñì  \‚ñì‚ñì  ‚ñì‚ñì
  \‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì \‚ñì‚ñì       \‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì \‚ñì‚ñì  \‚ñì‚ñì  \‚ñì‚ñì ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì    \‚ñì‚ñì‚ñì‚ñì 
                                        | ‚ñì‚ñì               
                                        | ‚ñì‚ñì               
                                         \‚ñì‚ñì               
`,
}

func GetDescriptions(descriptionArg []string, _ bool) map[string]string {
	var description, banner string

	if descriptionArg != nil {
		if strings.Contains(strings.Join(os.Args[0:], ""), "-h") {
			description = descriptionArg[0]
		} else {
			description = descriptionArg[1]
		}
	} else {
		description = ""
	}

	bannerRandLen := len(banners)
	bannerRandIndex := rand.Intn(bannerRandLen)
	banner = banners[bannerRandIndex]

	return map[string]string{"banner": banner, "description": description}
}

/// cmd/cli/service.go ///
package cli

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	gl "github.com/rafa-mori/grompt/logger"
	"github.com/rafa-mori/grompt/utils"

	s "github.com/rafa-mori/grompt/internal/services/server"
	t "github.com/rafa-mori/grompt/internal/types"

	"github.com/spf13/cobra"
)

func ServerCmdList() []*cobra.Command {
	return []*cobra.Command{
		startServer(),
	}
}

func startServer() *cobra.Command {
	var debug bool

	var startCmd = &cobra.Command{
		Use: "start",
		Annotations: GetDescriptions([]string{
			"This command starts the Grompt server.",
			"This command initializes the Grompt server and starts waiting for help to build prompts.",
		}, false),
		Run: func(cmd *cobra.Command, args []string) {
			if debug {
				gl.SetDebug(true)
				gl.Log("debug", "Debug mode enabled")
			}

			cfg := &t.Config{
				Port:           utils.GetEnvOr("PORT", t.DefaultPort),
				ClaudeAPIKey:   utils.GetEnvOr("CLAUDE_API_KEY", ""),
				OllamaEndpoint: utils.GetEnvOr("OLLAMA_ENDPOINT", "http://localhost:11434"),
			}

			// Inicializar servidor
			server := s.NewServer(cfg)

			// Graceful shutdown
			go func() {
				c := make(chan os.Signal, 1)
				signal.Notify(c, os.Interrupt, syscall.SIGTERM)
				<-c
				fmt.Println("\nüõë Encerrando servidor...")
				server.Shutdown()
				os.Exit(0)
			}()

			// Iniciar servidor
			if err := server.Start(); err != nil {
				log.Fatal("‚ùå Erro ao iniciar servidor:", err)
			}

			gl.Log("success", "Grompt server started successfully")
		},
	}

	startCmd.Flags().BoolVarP(&debug, "debug", "d", false, "Enable debug mode")

	return startCmd
}

/// cmd/cli/squad.go ///
package cli

import (
	"fmt"

	"github.com/spf13/cobra"

	"github.com/rafa-mori/grompt/internal/services/squad"
)

func SquadCmdList() []*cobra.Command {
	return []*cobra.Command{
		generateSquad(),
	}
}

func generateSquad() *cobra.Command {
	var outPath string
	cmd := &cobra.Command{
		Use:   "squad [requirements]",
		Short: "Generate AGENTS.md from free text requirements",
		Args:  cobra.MinimumNArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			req := args[0]
			if outPath == "" {
				outPath = "AGENTS.md"
			}
			md, err := squad.BuildAndSave(req, outPath)
			if err != nil {
				return err
			}
			fmt.Println(md)
			return nil
		},
	}

	cmd.Flags().StringVarP(&outPath, "output", "o", "AGENTS.md", "Output file path")

	return cmd
}

/// cmd/main.go ///
package main

import (
	gl "github.com/rafa-mori/grompt/logger"
)

// This file is the entry point for the Grompt CLI application.
// It initializes the logger and starts the application by executing the main command.
// It allows the application to be run as a standalone CLI tool.

// main initializes the logger and creates a new GoBE instance.
func main() {
	if err := RegX().Command().Execute(); err != nil {
		gl.Log("fatal", err.Error())
	}
}

/// cmd/usage.go ///
package main

import (
	"github.com/fatih/color"
	"github.com/spf13/cobra"
)

// colorYellow, colorGreen, colorBlue, colorRed, and colorHelp are utility functions
// that return a string formatted with the specified color using the fatih/color package.
// These functions are used to colorize output in the CLI usage template.
// They are registered as template functions in the CLI usage template to allow
// coloring specific parts of the command usage output.
func colorYellow(s string) string {
	return color.New(color.FgYellow).SprintFunc()(s)
}

func colorGreen(s string) string {
	return color.New(color.FgGreen).SprintFunc()(s)
}

func colorBlue(s string) string {
	return color.New(color.FgBlue).SprintFunc()(s)
}

func colorRed(s string) string {
	return color.New(color.FgRed).SprintFunc()(s)
}

func colorHelp(s string) string {
	return color.New(color.FgCyan).SprintFunc()(s)
}

func hasServiceCommands(cmds []*cobra.Command) bool {
	for _, cmd := range cmds {
		if cmd.Annotations["service"] == "true" {
			return true
		}
	}
	return false
}

func hasModuleCommands(cmds []*cobra.Command) bool {
	for _, cmd := range cmds {
		if cmd.Annotations["service"] != "true" {
			return true
		}
	}
	return false
}

func setUsageDefinition(cmd *cobra.Command) {
	cobra.AddTemplateFunc("colorYellow", colorYellow)
	cobra.AddTemplateFunc("colorGreen", colorGreen)
	cobra.AddTemplateFunc("colorRed", colorRed)
	cobra.AddTemplateFunc("colorBlue", colorBlue)
	cobra.AddTemplateFunc("colorHelp", colorHelp)
	cobra.AddTemplateFunc("hasServiceCommands", hasServiceCommands)
	cobra.AddTemplateFunc("hasModuleCommands", hasModuleCommands)

	// Altera o template de uso do cobra
	cmd.SetUsageTemplate(cliUsageTemplate)
}

var cliUsageTemplate = `{{- if index .Annotations "banner" }}{{colorBlue (index .Annotations "banner")}}{{end}}{{- if (index .Annotations "description") }}
{{index .Annotations "description"}}
{{- end }}

{{colorYellow "Usage:"}}{{if .Runnable}}
  {{.UseLine}}{{end}}{{if .HasAvailableSubCommands}}
  {{.CommandPath}} [command] [args]{{end}}{{if gt (len .Aliases) 0}}

{{colorYellow "Aliases:"}}
  {{.NameAndAliases}}{{end}}{{if .HasExample}}

{{colorYellow "Example:"}}
  {{.Example}}{{end}}{{if .HasAvailableSubCommands}}
{{colorYellow "Available Commands:"}}{{range .Commands}}{{if (or .IsAvailableCommand (eq .Name "help"))}}
  {{colorGreen (rpad .Name .NamePadding) }} {{.Short}}{{end}}{{end}}{{end}}{{if .HasAvailableLocalFlags}}

{{colorYellow "Flags:"}}
{{.LocalFlags.FlagUsages | trimTrailingWhitespaces | colorHelp}}{{end}}{{if .HasAvailableInheritedFlags}}

{{colorYellow "Global Options:"}}
  {{.InheritedFlags.FlagUsages | trimTrailingWhitespaces | colorHelp}}{{end}}{{if .HasHelpSubCommands}}

{{colorYellow "Additional help topics:"}}
{{range .Commands}}{{if .IsHelpCommand}}
  {{colorGreen (rpad .CommandPath .CommandPathPadding) }} {{.Short}}{{end}}{{end}}{{end}}{{if .HasSubCommands}}

{{colorYellow (printf "Use \"%s [command] --help\" for more information about a command." .CommandPath)}}{{end}}
`

/// cmd/wrpr.go ///
package main

import (
	cc "github.com/rafa-mori/grompt/cmd/cli"
	gl "github.com/rafa-mori/grompt/logger"
	vs "github.com/rafa-mori/grompt/version"
	"github.com/spf13/cobra"

	"os"
	"strings"
)

type Grompt struct {
	parentCmdName string
	printBanner   bool
}

func (m *Grompt) Alias() string {
	return ""
}
func (m *Grompt) ShortDescription() string {
	return "Grompt a tool for building prompts with AI assistance."
}
func (m *Grompt) LongDescription() string {
	return `Grompt: A tool for building prompts with AI assistance using real engineering practices. Better prompts, better results.., Awesome prompts, AMAZING results !!!`
}
func (m *Grompt) Usage() string {
	return "grompt [command] [args]"
}
func (m *Grompt) Examples() []string {
	return []string{
		"grompt start",
		"grompt stop",
		"grompt status",
	}
}
func (m *Grompt) Active() bool {
	return true
}
func (m *Grompt) Module() string {
	return "grompt"
}
func (m *Grompt) Execute() error {
	return m.Command().Execute()
}
func (m *Grompt) Command() *cobra.Command {
	gl.Log("debug", "Starting Grompt CLI...")

	var rtCmd = &cobra.Command{
		Use:     m.Module(),
		Aliases: []string{m.Alias()},
		Example: m.concatenateExamples(),
		Version: vs.GetVersion(),
		Annotations: cc.GetDescriptions([]string{
			m.LongDescription(),
			m.ShortDescription(),
		}, m.printBanner),
	}

	rtCmd.AddCommand(cc.ServerCmdList()...)
	rtCmd.AddCommand(cc.SquadCmdList()...)
	rtCmd.AddCommand(vs.CliCommand())

	// Set usage definitions for the command and its subcommands
	setUsageDefinition(rtCmd)
	for _, c := range rtCmd.Commands() {
		setUsageDefinition(c)
		if !strings.Contains(strings.Join(os.Args, " "), c.Use) {
			if c.Short == "" {
				c.Short = c.Annotations["description"]
			}
		}
	}

	return rtCmd
}
func (m *Grompt) SetParentCmdName(rtCmd string) {
	m.parentCmdName = rtCmd
}
func (m *Grompt) concatenateExamples() string {
	examples := ""
	rtCmd := m.parentCmdName
	if rtCmd != "" {
		rtCmd = rtCmd + " "
	}
	for _, example := range m.Examples() {
		examples += rtCmd + example + "\n  "
	}
	return examples
}
func RegX() *Grompt {
	var printBannerV = os.Getenv("GROMPT_PRINT_BANNER")
	if printBannerV == "" {
		printBannerV = "true"
	}

	return &Grompt{
		printBanner: strings.ToLower(printBannerV) == "true",
	}
}

/// docs/CONTRIBUTING.md ///
# **Contributing to Grompt**

Thank you for your interest in contributing to **[Grompt](https://github.com/rafa-mori/grompt)**! We are excited to have you as part of our community. This guide will help you get started and contribute effectively to the project.

---

## **How to Contribute**

There are several ways to contribute to [Grompt](https://github.com/rafa-mori/grompt):

1. **Report Issues**
   - Found bugs or issues in the code? Open an issue detailing the problem.
   - Include as much information as possible: steps to reproduce the issue, logs, Go version used, etc.

2. **Suggest Improvements**
   - Have an idea to improve the project? Share your suggestion by opening an issue with the `enhancement` tag.

3. **Submit Pull Requests**
   - Want to fix a bug or implement something new? Submit a pull request with your changes.

4. **Test and Review Code**
   - Help review pull requests from other contributors.
   - Run existing tests and validate if the proposed changes keep the system functional.

---

## **Getting Started**

### 1. **Clone the Repository**

```bash
git clone https://github.com/rafa-mori/grompt.git
cd grompt
```

### 2. **Set Up the Environment**

Make sure you have Go installed:
You can install Go using one of the following methods:

- [A super easy way to install Go](https://github.com/rafa-mori/gosetup)

  ```shell
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/rafa-mori/gosetup/main/install.sh)"
  ```

- [Convencional way to download Go](https://go.dev/dl/)

### 3. **Install Dependencies**

```bash
# Download the necessary packages
go mod download
```

### 4. **Run Tests**+

Before making changes, run the existing tests:

```bash
go test ./...
```

---

## **Creating a Pull Request**

### **1. Fork the Repository**

Create a fork of the project to your own GitHub.

### **2. Create a New Branch**

```bash
git checkout -b your-feature
```

### **3. Make Changes**

```bash
# Edit the code in your favorite editor
```

Make sure to follow the project's code conventions and best practices.

### **4. Add Tests (if applicable)**

Include test cases to validate the added functionality.

### **5. Run Tests**

Ensure all changes and tests are working:

```bash
go test ./...
```

### **6. Commit and Push**

```bash
git add .
git commit -m "Brief description of the change"
git push origin your-feature
```

### **7. Open the Pull Request**

Go to the original repository on GitHub and open a pull request explaining your changes.

---

## **Code Standards**

### **Code Style**

This project follows Go's code conventions. Some recommendations:

- Use `gofmt` to format the code:

```bash
gofmt -w .
```

- Name variables and functions clearly and descriptively.
- Break down long functions into smaller parts whenever possible.

### **Commits**

Commits should be clear and descriptive. Examples:

- `fix: fix bug in notification logic`
- `feat: add support for Slack notifier`

---

## **Best Practices**

1. **Be Respectful and Welcoming**  
   This is an open-source project for everyone. Respect other contributors and collaborate constructively.

2. **Document Your Changes**  
   Update the `README.md` or documentation, if necessary, to include your changes.

3. **Add Tests When Possible**  
   Ensure any new functionality is accompanied by tests.

4. **Be Clear in Issue Reports**  
   When opening an issue, be detailed and provide as much context as possible.

---

## **Where to Get Help**

If you need assistance, feel free to:

- Open an issue with the `question` tag.
- Contact me via the email or LinkedIn listed in the `README.md`.

---

## **Our Commitment**

We commit to reviewing pull requests and issues as quickly as possible. We value your contribution and appreciate the time dedicated to the project!

/// docs/README.pt-BR.md ///
# ![Grompt Logo](assets/top_banner.png)

> **Transforme suas ideias brutas em prompts estruturados e profissionais com pr√°ticas reais de engenharia**

[![Vers√£o Go](https://img.shields.io/badge/Go-1.21+-blue.svg)](https://golang.org)
[![React](https://img.shields.io/badge/React-18+-blue.svg)](https://reactjs.org)
[![Licen√ßa](https://img.shields.io/badge/Licen√ßa-MIT-green.svg)](../LICENSE)
[![PRs Bem-vindos](https://img.shields.io/badge/PRs-bem--vindos-brightgreen.svg)](../CONTRIBUTING.md)

**Grompt** √© uma ferramenta moderna de engenharia de prompts que aplica pr√°ticas reais de engenharia para transformar pensamentos bagun√ßados e desestruturados em prompts limpos e eficazes para modelos de IA. Constru√≠do com Go e React, roda como um bin√°rio √∫nico com zero depend√™ncias.

---

## üéØ **Por que o Grompt?**

**Antes do Grompt:**
```
oi, pode me ajudar a fazer uma fun√ß√£o que pega uma lista e ordena mas tamb√©m 
remove duplicatas e talvez retorna a contagem tamb√©m? ah e deveria funcionar 
com strings e n√∫meros...
```

**Depois do Grompt:**
```
Crie uma fun√ß√£o TypeScript gen√©rica que:

**Objetivo Principal:** Processar arrays com funcionalidade dupla - ordena√ß√£o e deduplica√ß√£o

**Requisitos:**
- Aceitar arrays de tipos primitivos (strings, n√∫meros)
- Remover valores duplicados preservando os tipos de dados originais
- Ordenar resultados usando l√≥gica de compara√ß√£o apropriada
- Retornar tanto o array processado quanto metadados de contagem

**Sa√≠da Esperada:**
- Assinatura da fun√ß√£o com restri√ß√µes gen√©ricas adequadas
- Tipo de retorno: { sorted: T[], count: number }
- Tratar casos extremos (arrays vazios, elementos √∫nicos)
- Incluir documenta√ß√£o JSDoc com exemplos

**Contexto:** Construindo um utilit√°rio de processamento de dados para uma aplica√ß√£o React onde manipula√ß√£o consistente de arrays √© necess√°ria em m√∫ltiplos componentes.
```

---

## ‚ú® **Caracter√≠sticas Principais**

| Funcionalidade | Descri√ß√£o |
|----------------|-----------|
| üß† **Engenharia de Prompts Real** | Aplica t√©cnicas genu√≠nas de engenharia de prompts, n√£o apenas templates |
| ‚öõÔ∏è **Interface React Moderna** | Interface responsiva e intuitiva com temas dark/light |
| üêπ **Backend Go Robusto** | Servidor HTTP eficiente com zero depend√™ncias externas |
| üì¶ **Bin√°rio √önico** | Execut√°vel autocontido - apenas baixe e execute |
| üåç **Multiplataforma** | Suporte para Windows, Linux, macOS direto da caixa |
| üîå **M√∫ltiplos Provedores de IA** | OpenAI, Claude, DeepSeek, Ollama, al√©m do modo demo |
| üöÄ **Configura√ß√£o Instant√¢nea** | Sem instala√ß√£o, configura√ß√£o ou depend√™ncias de nuvem |

---

## üöÄ **In√≠cio R√°pido**

### Op√ß√£o 1: Baixar Bin√°rio Pr√©-constru√≠do

```bash
# Baixe a vers√£o mais recente para sua plataforma
curl -L https://github.com/rafa-mori/grompt/releases/latest/download/grompt-linux-amd64 -o grompt
chmod +x grompt
./grompt

# Abre automaticamente em http://localhost:8080
```

### Op√ß√£o 2: Construir do C√≥digo Fonte

```bash
git clone https://github.com/rafa-mori/grompt
cd grompt
make build-all
./grompt
```

**√â isso!** Sem Docker, sem configura√ß√£o complexa, sem contas de nuvem necess√°rias.

---

## üí° **Exemplos de Uso**

### Exemplo 1: Prompt de Gera√ß√£o de C√≥digo
**Ideias de Entrada:**
- "Fazer uma API REST"
- "Autentica√ß√£o de usu√°rio"
- "Banco de dados com PostgreSQL"
- "Limita√ß√£o de taxa"

**Prompt Gerado:**
```
Crie um servidor de API RESTful com as seguintes especifica√ß√µes:

**Requisitos Principais:**
- Sistema de autentica√ß√£o de usu√°rio com tokens JWT
- Integra√ß√£o com banco de dados PostgreSQL com design de schema adequado
- Middleware de limita√ß√£o de taxa para prevenir abuso
- Endpoints RESTful seguindo conven√ß√µes padr√£o

**Stack T√©cnica:**
- Framework backend de sua escolha (Node.js/Express, Go, Python/FastAPI)
- PostgreSQL para persist√™ncia de dados
- JWT para autentica√ß√£o stateless
- Redis ou limita√ß√£o de taxa em mem√≥ria

**Entreg√°veis:**
- Servidor API completo com endpoints documentados
- Scripts de migra√ß√£o de banco de dados
- Implementa√ß√£o de middleware de autentica√ß√£o
- Configura√ß√£o de limita√ß√£o de taxa
- Documenta√ß√£o b√°sica da API

**Considera√ß√µes de Seguran√ßa:**
- Hash de senhas (bcrypt ou similar)
- Valida√ß√£o e sanitiza√ß√£o de entrada
- Configura√ß√£o CORS
- Gerenciamento de vari√°veis de ambiente para segredos
```

---

## üé™ **Casos de Uso**

| Cen√°rio | Como o Grompt Ajuda |
|---------|-------------------|
| **Revis√µes de C√≥digo** | Transformar feedback vago em prompts espec√≠ficos e acion√°veis para melhorias |
| **Cria√ß√£o de Conte√∫do** | Converter briefings de conte√∫do em prompts detalhados de escrita criativa ou copywriting |
| **Aprendizado e Pesquisa** | Transformar t√≥picos de estudo em prompts de aprendizado estruturados com objetivos claros |
| **Documenta√ß√£o de API** | Converter notas t√©cnicas em solicita√ß√µes de documenta√ß√£o abrangente |
| **Sistemas de Design** | Transformar ideias de design em prompts de especifica√ß√£o de componentes detalhados |
| **An√°lise de Dados** | Converter quest√µes de neg√≥cio em prompts precisos de ci√™ncia de dados e an√°lise |

---

## ‚öôÔ∏è **Configura√ß√£o e Suporte a APIs**

### Vari√°veis de Ambiente

```bash
# Configura√ß√£o do Servidor
export PORT=8080                    # Porta do servidor (padr√£o: 8080)
export DEBUG=true                   # Habilitar modo debug

# APIs de Provedores de IA (todas opcionais)
export OPENAI_API_KEY=sk-...        # Modelos GPT da OpenAI
export CLAUDE_API_KEY=sk-ant-...    # Modelos Claude da Anthropic
export DEEPSEEK_API_KEY=...         # Modelos DeepSeek
export CHATGPT_API_KEY=...          # API do ChatGPT

# IA Local
export OLLAMA_ENDPOINT=http://localhost:11434  # Modelos locais Ollama
```

### Provedores de IA Suportados

| Provedor | Modelos | Configura√ß√£o Necess√°ria |
|----------|---------|------------------------|
| **Modo Demo** | Templates integrados | ‚úÖ Nenhuma - funciona direto da caixa |
| **OpenAI** | GPT-4, GPT-4o, GPT-3.5-turbo | Chave da API |
| **Claude** | Claude 3.5 Sonnet, Claude 3 Haiku | Chave da API |
| **DeepSeek** | DeepSeek Chat, DeepSeek Coder | Chave da API |
| **Ollama** | Llama, Mistral, CodeLlama, etc. | Instala√ß√£o local |

---

## üèóÔ∏è **Arquitetura e Desenvolvimento**

### Estrutura do Projeto
```
grompt/
‚îú‚îÄ‚îÄ üìÅ frontend/              # Aplica√ß√£o React
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.jsx          # Componente principal
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.js         # Ponto de entrada
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ üìÅ internal/
‚îÇ   ‚îú‚îÄ‚îÄ services/server/     # Servidor HTTP e handlers
‚îÇ   ‚îî‚îÄ‚îÄ types/               # Integra√ß√µes de API e tipos
‚îú‚îÄ‚îÄ üìÅ cmd/                  # Pontos de entrada CLI
‚îú‚îÄ‚îÄ üìÑ main.go              # Entrada da aplica√ß√£o
‚îú‚îÄ‚îÄ üìÑ Makefile             # Automa√ß√£o de build
‚îî‚îÄ‚îÄ üìÑ go.mod               # Depend√™ncias Go
```

### Configura√ß√£o de Desenvolvimento

```bash
# Instalar depend√™ncias
make install-deps

# Modo desenvolvimento (hot reload)
make dev

# Build para produ√ß√£o
make build-all

# Builds multiplataforma
make build-cross

# Executar testes
make test
```

---

## üõ£Ô∏è **Roadmap**

### üöß Desenvolvimento Atual
- [ ] **Biblioteca de Templates de Prompts** - Templates pr√©-constru√≠dos para casos de uso comuns
- [ ] **Hist√≥rico e Versionamento de Prompts** - Salvar e rastrear itera√ß√µes de prompts
- [ ] **Processamento em Lote** - Processar m√∫ltiplas ideias simultaneamente

### üîÆ Funcionalidades Futuras
- [ ] **Analytics de Prompts** - Rastrear efetividade e padr√µes de uso
- [ ] **Colabora√ß√£o em Equipe** - Compartilhar prompts e colaborar na engenharia de prompts
- [ ] **Sistema de Plugins** - Estender funcionalidade com processadores de prompt customizados
- [ ] **Limita√ß√£o de Taxa da API** - Limita√ß√£o de taxa integrada para provedores de API
- [ ] **Framework de Teste de Prompts** - Testar A/B diferentes varia√ß√µes de prompts
- [ ] **Webhooks de Integra√ß√£o** - Conectar com ferramentas e workflows externos

---

## ü§ù **Contribuindo**

Recebemos contribui√ß√µes! Veja como voc√™ pode ajudar:

### üêõ **Relat√≥rios de Bug e Solicita√ß√µes de Funcionalidades**
- Abra uma issue com descri√ß√£o detalhada
- Inclua passos para reproduzir para bugs
- Use templates de issue quando dispon√≠veis

### üíª **Contribui√ß√µes de C√≥digo**
```bash
# 1. Fork e clone
git clone https://github.com/rafa-mori/grompt
cd grompt

# 2. Criar branch de funcionalidade
git checkout -b feature/funcionalidade-incrivel

# 3. Fazer mudan√ßas e testar
make test
make build-all

# 4. Commit com mensagem clara
git commit -m "Adiciona funcionalidade incr√≠vel: breve descri√ß√£o"

# 5. Push e criar PR
git push origin feature/funcionalidade-incrivel
```

### üéØ **Boas Primeiras Issues**
Procure por issues marcadas com `good-first-issue` ou `help-wanted` para come√ßar!

---

## üìä **Performance e Especifica√ß√µes**

| M√©trica | Valor |
|---------|-------|
| **Tamanho do Bin√°rio** | ~15MB (inclui frontend React) |
| **Uso de Mem√≥ria** | ~20MB ocioso, ~50MB sob carga |
| **Tempo de Inicializa√ß√£o** | <1 segundo |
| **Tempo de Resposta** | <100ms (excluindo chamadas da API de IA) |
| **Usu√°rios Simult√¢neos** | 1000+ (depende dos limites do provedor de IA) |
| **Suporte de Plataforma** | Windows, Linux, macOS (x86_64, ARM64) |

---

## üôè **Agradecimentos**

Agradecimentos especiais para:
- **[Anthropic](https://anthropic.com)** pela API Claude e por avan√ßar a seguran√ßa da IA
- **[OpenAI](https://openai.com)** por pioneirar modelos de IA acess√≠veis
- **[Ollama](https://ollama.ai)** por tornar LLMs locais acess√≠veis para todos
- **[Equipe Go](https://golang.org)** por criar uma linguagem robusta e eficiente
- **[Equipe React](https://reactjs.org)** pelo excelente framework de UI
- **Todos os contribuidores** que ajudam a melhorar este projeto

---

## üìÑ **Licen√ßa**

Este projeto √© licenciado sob a Licen√ßa MIT - veja o arquivo [LICENSE](../LICENSE) para detalhes.

## üåé **Documenta√ß√£o**

- **[Documenta√ß√£o em Ingl√™s](../README.md)**
- **[Documenta√ß√£o em Portugu√™s](README.pt-BR.md)** (este arquivo)
- **[Diretrizes de Contribui√ß√£o](../CONTRIBUTING.md)**
- **[Documenta√ß√£o da API](API.md)**
- **[Guia do Desenvolvedor](DEVELOPMENT.md)**

---

<div align="center">

**Feito com ‚ù§Ô∏è usando Go + React**

[‚≠ê Star este projeto](https://github.com/rafa-mori/grompt/stargazers) ‚Ä¢ [üêõ Reportar Bug](https://github.com/rafa-mori/grompt/issues) ‚Ä¢ [‚ú® Solicitar Funcionalidade](https://github.com/rafa-mori/grompt/issues)

*Transforme suas ideias em prompts poderosos hoje!*

</div>

[üåê Leia em Ingl√™s](README.md)

## üöÄ Sobre o Grompt

Grompt √© uma ferramenta COMPLETA para constru√ß√£o de prompts com assist√™ncia de IA, utilizando pr√°ticas reais de engenharia. Com o Grompt, voc√™ pode criar prompts melhores e obter resultados incr√≠veis. Ele √© **100% gratuito e de c√≥digo aberto**! Totalmente aut√¥nomo, sem necessidade de instala√ß√£o de depend√™ncias, funciona em linha de comando e web com uma interface amig√°vel, intuitiva e f√°cil de usar para iniciantes e especialistas.

## üì¶ Instala√ß√£o

### Via Go

```bash
go install github.com/rafa-mori/grompt@latest
```

### Via Docker

```bash
docker run -it --rm ghcr.io/rafa-mori/grompt:latest
```

### Via Binaries

```bash
wget https://github.com/rafa-mori/grompt/releases/latest/download/grompt_linux_amd64.tar.gz
tar -xzf grompt_linux_amd64.tar.gz
chmod +x grompt
sudo mv grompt /usr/local/bin/
```

/// docs/pages/wrpr-wrapper.md ///
# Grompt CLI Wrapper Documentation

## Overview

The `cmd/wrpr.go` file implements a wrapper for the Grompt CLI, providing a structured interface for managing application commands and configurations.

## Main Structure

### `Grompt` Type

```go
type Grompt struct {
    parentCmdName string
    printBanner   bool
}
```

**Fields:**

- `parentCmdName`: Parent command name for example concatenation
- `printBanner`: Flag that controls whether the banner should be displayed

## Interface Methods

### Configuration Methods

- **`Alias()`**: Returns empty string (no alias defined)
- **`ShortDescription()`**: Short description of Grompt
- **`LongDescription()`**: Long description of Grompt  
- **`Usage()`**: Command usage pattern
- **`Examples()`**: List of usage examples
- **`Active()`**: Always returns `true` (active module)
- **`Module()`**: Returns "article" as module name

### Execution Methods

- **`Execute()`**: Executes the main command
- **`Command()`**: Builds and configures the main Cobra command

### Utility Methods

- **`SetParentCmdName()`**: Sets the parent command name
- **`concatenateExamples()`**: Concatenates examples with parent command name

## Main Functionalities

### 1. Cobra Command Configuration

The `Command()` method configures:

- Root command with use, aliases, and version
- Adds subcommands through `cc.ServiceCmdList()`
- Adds version command
- Sets usage definitions for all commands

### 2. Argument Processing

The code processes command line arguments to:

- Check if specific commands are being executed
- Configure short descriptions for commands without them

### 3. Environment Configuration

The `RegX()` function configures the instance based on environment variables:

- `ARTICLE_PRINT_BANNER`: Controls banner display (default: "true")

## Initialization Function

### `RegX()`

```go
func RegX() *Grompt
```

**Responsibilities:**

- Reads `GOFORGE_PRINT_BANNER` environment variable
- Creates and returns new `Grompt` instance
- Sets default configuration for banner display

## Dependencies

- **Cobra**: CLI framework for Go
- **Internal modules**:
  - `cc`: CLI commands
  - `gl`: Logging system
  - `vs`: Version management

## Design Patterns

- **Wrapper Pattern**: Encapsulates Cobra functionality
- **Factory Pattern**: `RegX()` function for instance creation
- **Interface Segregation**: Specific methods for different CLI aspects

## Notes

- Module name is hardcoded as "article"
- Support for configuration via environment variables
- Integration with logging system for debugging
- Automatic configuration of commands and subcommands

## Usage Example

```go
// Create Grompt instance
grompt := RegX()

// Execute CLI
if err := grompt.Execute(); err != nil {
    log.Fatal(err)
}
```

## Environment Variables

| Variable | Description | Default |
|----------|-------------|---------|
| `ARTICLE_PRINT_BANNER` | Controls banner display | `"true"` |

## Command Structure

```text
article
‚îú‚îÄ‚îÄ [service commands from cc.ServiceCmdList()]
‚îî‚îÄ‚îÄ version (from vs.CliCommand())
```

/// frontend/package.json ///
{
  "name": "krompt",
  "version": "1.0.0",
  "description": "Krompt: A React-based Prompt Engineering Tool for AI Models",
  "private": true,
  "homepage": "./",
  "dependencies": {
    "ajv": "^8.17.1",
    "codemirror": "^6.0.2",
    "i18next": "^25.3.1",
    "i18next-browser-languagedetector": "^8.2.0",
    "lucide-react": "^0.525.0",
    "react": "^19.1.0",
    "react-codemirror": "^1.0.0",
    "react-dom": "^19.1.0",
    "react-i18next": "^15.6.0",
    "react-router-dom": "^7.6.3",
    "react-scripts": "^5.0.1",
    "react-toastify": "^11.0.5",
    "react-tooltip": "^5.29.1"
  },
  "devDependencies": {
    "eslint": "^8.50.0",
    "eslint-config-prettier": "^8.9.0",
    "prettier": "^3.1.0",
    "typescript": "^5.8.3",
    "web-vitals": "^5.0.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "post-build": "bash ../support/pre.d/pre_build.sh",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "build:go": "npm run build && echo 'üì¶ Optimized build created successfully!'"
  },
  "keywords": [
    "prompt-engineering",
    "ai",
    "claude",
    "react",
    "golang",
    "embedded"
  ],
  "author": "Rafael Mori",
  "license": "MIT",
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

/// frontend/public/index.html ///
<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Krompt - Transforme ideias em prompts estruturados" />
    <script src="https://cdn.tailwindcss.com"></script>
    <title>Krompt</title>
  </head>
  <body>
    <noscript>Voc√™ precisa habilitar JavaScript para executar esta aplica√ß√£o.</noscript>
    <div id="root"></div>
  </body>
</html>

/// frontend/src/App.jsx ///
import React, { useState } from 'react';
import { Routes, Route, Link, useLocation } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { Sparkles, Users, Sun, Moon } from 'lucide-react';
import PromptCrafter from './PromptCrafter';
import AgentsDashboard from './components/AgentsDashboard';
import AgentForm from './components/AgentForm';
import AgentView from './components/AgentView';
import LanguageSelector from './components/LanguageSelector';

const App = () => {
  const { t } = useTranslation();
  const location = useLocation();
  const [darkMode, setDarkMode] = useState(true);

  // Temas
  const theme = {
    dark: {
      bg: 'bg-gray-900',
      cardBg: 'bg-gray-800',
      text: 'text-gray-100',
      textSecondary: 'text-gray-300',
      border: 'border-gray-700',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-700 hover:bg-gray-600 text-gray-200',
      accent: 'text-blue-400'
    },
    light: {
      bg: 'bg-gray-50',
      cardBg: 'bg-white',
      text: 'text-gray-900',
      textSecondary: 'text-gray-600',
      border: 'border-gray-300',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-200 hover:bg-gray-300 text-gray-700',
      accent: 'text-blue-600'
    }
  };

  const currentTheme = darkMode ? theme.dark : theme.light;

  const isActivePath = (path) => {
    if (path === '/') return location.pathname === '/';
    return location.pathname.startsWith(path);
  };

  const getNavLinkClass = (path) => {
    const baseClass = 'flex items-center gap-3 px-4 py-2 rounded-lg transition-all duration-200 font-medium';
    const activeClass = 'bg-blue-600 text-white shadow-lg';
    const inactiveClass = `${currentTheme.textSecondary} hover:bg-blue-50 dark:hover:bg-gray-700 hover:text-blue-600 dark:hover:text-blue-400`;
    
    return `${baseClass} ${isActivePath(path) ? activeClass : inactiveClass}`;
  };

  return (
    <div className={`min-h-screen ${currentTheme.bg} ${currentTheme.text}`}>
      {/* Navigation Header */}
      <nav className={`${currentTheme.cardBg} ${currentTheme.border} border-b sticky top-0 z-50`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            {/* Logo e Navigation Links */}
            <div className="flex items-center gap-8">
              <div className="flex items-center gap-3">
                <div className="bg-gradient-to-r from-blue-500 to-purple-600 p-2 rounded-lg">
                  <Sparkles className="h-6 w-6 text-white" />
                </div>
                <h1 className="text-xl font-bold bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">
                  Grompt
                </h1>
              </div>
              
              <div className="hidden md:flex items-center gap-2">
                <Link to="/" className={getNavLinkClass('/')}>
                  <Sparkles size={18} />
                  {t('nav.promptCrafter')}
                </Link>
                
                <Link to="/agents" className={getNavLinkClass('/agents')}>
                  <Users size={18} />
                  {t('nav.agents')}
                </Link>
              </div>
            </div>

            {/* Controls */}
            <div className="flex items-center gap-4">
              <LanguageSelector currentTheme={currentTheme} />
              
              <button
                onClick={() => setDarkMode(!darkMode)}
                className={`p-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
                title={darkMode ? t('theme.light') : t('theme.dark')}
              >
                {darkMode ? <Sun size={20} /> : <Moon size={20} />}
              </button>
            </div>
          </div>
          
          {/* Mobile Navigation */}
          <div className="md:hidden pb-4">
            <div className="flex flex-col gap-2">
              <Link to="/" className={getNavLinkClass('/')}>
                <Sparkles size={18} />
                {t('nav.promptCrafter')}
              </Link>
              
              <Link to="/agents" className={getNavLinkClass('/agents')}>
                <Users size={18} />
                {t('nav.agents')}
              </Link>
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main>
        <Routes>
          <Route path="/" element={<PromptCrafter />} />
          <Route path="/agents" element={<AgentsDashboard />} />
          <Route path="/agents/new" element={<AgentForm />} />
          <Route path="/agents/:id" element={<AgentView />} />
          <Route path="/agents/:id/edit" element={<AgentForm />} />
        </Routes>
      </main>
    </div>
  );
};

export default App;

/// frontend/src/PromptCrafter.jsx ///
import React, { useState, useEffect } from 'react';
import { Trash2, Edit3, Plus, Wand2, Sun, Moon, Copy, Check, AlertCircle, ChevronDown, ChevronUp, RefreshCw } from 'lucide-react';
import { useTranslation } from 'react-i18next';
import LanguageSelector from './components/LanguageSelector';

const PromptCrafter = () => {
  const { t } = useTranslation();
  const [darkMode, setDarkMode] = useState(true);
  const [currentInput, setCurrentInput] = useState('');
  const [ideas, setIdeas] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [editingText, setEditingText] = useState('');
  const [purpose, setPurpose] = useState('Outros');
  const [customPurpose, setCustomPurpose] = useState('');
  const [maxLength, setMaxLength] = useState(5000);
  const [generatedPrompt, setGeneratedPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [copied, setCopied] = useState(false);
  const [apiProvider, setApiProvider] = useState('demo');
  const [selectedModel, setSelectedModel] = useState('');
  const [availableAPIs, setAvailableAPIs] = useState({
    claude_available: false,
    openai_available: false,
    deepseek_available: false,
    ollama_available: false,
    demo_mode: true,
    available_models: {
      openai: [],
      deepseek: [],
      claude: [],
      ollama: []
    }
  });
  const [connectionStatus, setConnectionStatus] = useState('checking');
  const [serverInfo, setServerInfo] = useState(null);

  const [isOutputCollapsed, setIsOutputCollapsed] = useState(true);
  const [isInputCollapsed, setIsInputCollapsed] = useState(false);

  // Controlar collapse autom√°tico e reativo de input/output
  useEffect(() => {
    if (generatedPrompt) {
      // Quando h√° prompt gerado: minimizar input, expandir output
      setIsInputCollapsed(true);
      setIsOutputCollapsed(false);
    } else {
      // Quando n√£o h√° prompt: expandir input, minimizar output
      setIsInputCollapsed(false);
      setIsOutputCollapsed(true);
    }
  }, [generatedPrompt]);

  // =========================================
  // CONFIGURA√á√ÉO DE URL BASE
  // =========================================
  const getBaseURL = () => {
    // Se estamos em desenvolvimento (npm start), usar proxy ou porta espec√≠fica
    if (process.env.NODE_ENV === 'development') {
      return 'http://localhost:8080'; // Servidor Go
    }
    // Se estamos em produ√ß√£o (servido pelo Go), usar URL relativa
    return '';
  };

  const apiCall = async (endpoint, options = {}) => {
    const baseURL = getBaseURL();
    const url = `${baseURL}${endpoint}`;
    
    console.log(`üîó Fazendo requisi√ß√£o para: ${url}`);
    
    const defaultOptions = {
      headers: {
        'Content-Type': 'application/json',
      },
      ...options
    };

    try {
      const response = await fetch(url, defaultOptions);
      return response;
    } catch (error) {
      console.error(`‚ùå Erro na requisi√ß√£o para ${url}:`, error);
      throw error;
    }
  };

  useEffect(() => {
    document.documentElement.className = darkMode ? 'dark' : '';
  }, [darkMode]);

  // Verificar configura√ß√£o e APIs dispon√≠veis na inicializa√ß√£o
  useEffect(() => {
    checkAPIAvailability();
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const checkAPIAvailability = async () => {
    try {
      console.log('üîç Verificando disponibilidade das APIs...');
      
      // Primeiro, verificar se o servidor Go est√° rodando
      const healthResponse = await apiCall('/api/health');
      
      if (healthResponse.ok) {
        const healthData = await healthResponse.json();
        setServerInfo(healthData);
        console.log('‚úÖ Servidor Go conectado:', healthData);
      }

      // Verificar configura√ß√£o das APIs
      const configResponse = await apiCall('/api/config');
      
      if (configResponse.ok) {
        const config = await configResponse.json();
        setAvailableAPIs(config);
        setConnectionStatus('connected');
        
        console.log('üìã Configura√ß√£o recebida:', config);
        
        // Definir provider padr√£o baseado na disponibilidade
        if (config.claude_available) {
          setApiProvider('claude');
        } else if (config.openai_available) {
          setApiProvider('openai');
        } else if (config.deepseek_available) {
          setApiProvider('deepseek');
        } else if (config.ollama_available) {
          setApiProvider('ollama');
        } else {
          setApiProvider('demo');
        }
      } else {
        throw new Error(`Servidor retornou status ${configResponse.status}`);
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar APIs:', error);
      setConnectionStatus('offline');
      setAvailableAPIs({ demo_mode: true });
      setApiProvider('demo');
      
      // Se estivermos em desenvolvimento, mostrar dica
      if (process.env.NODE_ENV === 'development') {
        console.log('üí° Dica: Certifique-se de que o servidor Go est√° rodando na porta 8080');
        console.log('üîß Execute: go run . ou make run');
      }
    }
  };

  const addIdea = () => {
    if (currentInput.trim()) {
      const newIdea = {
        id: Date.now(),
        text: currentInput.trim()
      };
      setIdeas([...ideas, newIdea]);
      setCurrentInput('');
    }
  };

  const removeIdea = (id) => {
    setIdeas(ideas.filter(idea => idea.id !== id));
    if (editingId === id) {
      setEditingId(null);
      setEditingText('');
    }
    if (ideas.length === 0) {
      setIsInputCollapsed(false); // Expandir input se n√£o houver ideias
      setIsOutputCollapsed(true); // Colapsar output se n√£o houver ideias
    }
  };

  const startEditing = (id, text) => {
    setEditingId(id);
    setEditingText(text);
  };

  const saveEdit = () => {
    setIdeas(ideas.map(idea => 
      idea.id === editingId 
        ? { ...idea, text: editingText }
        : idea
    ));
    setEditingId(null);
    setEditingText('');

    setIsInputCollapsed(false); // Expandir input ao salvar edi√ß√£o (A ideia foi alterada)
    setIsOutputCollapsed(true); // Colapsar output ao salvar edi√ß√£o (O prompt gerado ser√° alterado)
  };

  const cancelEdit = () => {
    setEditingId(null);
    setEditingText('');
  };

  // Fun√ß√£o para limpar tudo e reiniciar
  const clearAll = () => {
    // Limpar todas as ideias
    setIdeas([]);
    // Limpar input atual
    setCurrentInput('');
    // Limpar prompt gerado
    setGeneratedPrompt('');
    // Cancelar qualquer edi√ß√£o em andamento
    setEditingId(null);
    setEditingText('');
    // Resetar estados de collapse para o inicial
    setIsInputCollapsed(false);
    setIsOutputCollapsed(true);
    // Resetar configura√ß√µes para padr√£o
    setPurpose('Outros');
    setCustomPurpose('');
    setMaxLength(5000);
    // Feedback visual
    console.log('üßπ Interface limpa - pronto para come√ßar!');
  };

  const generateDemoPrompt = () => {
    const purposeText = purpose === 'Outros' && customPurpose 
      ? customPurpose 
      : purpose;

    if (ideas.length === 0) {
      return `# ${t('output.title')} - ${purposeText}
        ## üéØ ${t('demo.context')}
        ${t('demo.contextDesc', { purpose: purposeText.toLowerCase() })}
      `;
    }

    return `# ${t('output.title')} - ${purposeText}

      ## üéØ ${t('demo.context')}

      ${t('demo.contextDesc', { purpose: purposeText.toLowerCase() })}

      ## üìù ${t('demo.ideasTitle')}

      ${ideas.map((idea, index) => `**${index + 1}.** ${idea.text}`).join('\n')}

      ## üîß ${t('demo.instructions')}

      ${t('demo.instructionsList', { returnObjects: true }).map(instruction => `- ${instruction}`).join('\n')}

      ## üìã ${t('demo.responseFormat')}

      ${t('demo.responseSteps', { returnObjects: true }).map((step, index) => `${index + 1}. ${step}`).join('\n')}

      ## ‚öôÔ∏è ${t('demo.technicalConfig')}

      - ${t('demo.maxChars')}: ${maxLength.toLocaleString()}
      - ${t('demo.purpose')}: ${purposeText}
      - ${t('demo.totalIdeas')}: ${ideas.length}
      - ${t('demo.mode')}: ${ connectionStatus === 'connected' ? t('demo.modeConnected') : t('demo.modeOffline')}

      ---

      *${t('demo.footer')}*
      *${connectionStatus === 'connected' ? t('demo.footerConnected') : t('demo.footerOffline')}*`
        .replaceAll('      ', '')
    };

  const generatePrompt = async () => {
    if (ideas.length === 0) return;
    
    setIsGenerating(true);
    
    const purposeText = purpose === 'Outros' && customPurpose 
      ? customPurpose 
      : purpose;
    
    const engineeringPrompt = `
Voc√™ √© um especialista em engenharia de prompts com conhecimento profundo em t√©cnicas de prompt engineering. Sua tarefa √© transformar ideias brutas e desorganizadas em um prompt estruturado, profissional e eficaz.

CONTEXTO: O usu√°rio inseriu as seguintes notas/ideias brutas:
${ideas.map((idea, index) => `${index + 1}. "${idea.text}"`).join('\n')}

PROP√ìSITO DO PROMPT: ${purposeText}
TAMANHO M√ÅXIMO: ${maxLength} caracteres

INSTRU√á√ïES PARA ESTRUTURA√á√ÉO:
1. Analise todas as ideias e identifique o objetivo principal
2. Organize as informa√ß√µes de forma l√≥gica e hier√°rquica
3. Aplique t√©cnicas de engenharia de prompt como:
   - Defini√ß√£o clara de contexto e papel
   - Instru√ß√µes espec√≠ficas e mensur√°veis
   - Exemplos quando apropriado
   - Formato de sa√≠da bem definido
   - Chain-of-thought se necess√°rio
4. Use markdown para estrutura√ß√£o clara
5. Seja preciso, objetivo e profissional
6. Mantenha o escopo dentro do limite de caracteres

IMPORTANTE: Responda APENAS com o prompt estruturado em markdown, sem explica√ß√µes adicionais ou texto introdut√≥rio. O prompt deve ser completo e pronto para uso.
`;

    try {
      let response;
      
      if (apiProvider === 'demo' || connectionStatus === 'offline') {
        // Simular delay para parecer real
        await new Promise(resolve => setTimeout(resolve, 2000));
        response = generateDemoPrompt();
      } else if (apiProvider === 'claude') {
        console.log('ü§ñ Enviando para Claude API...');
        const result = await apiCall('/api/claude', {
          method: 'POST',
          body: JSON.stringify({
            prompt: engineeringPrompt,
            max_tokens: maxLength
          })
        });
        
        if (!result.ok) {
          const errorText = await result.text();
          throw new Error(`Erro HTTP ${result.status}: ${errorText}`);
        }
        
        const data = await result.json();
        response = data.response || data.content || 'Resposta vazia do servidor';
        console.log('‚úÖ Resposta recebida do Claude');
        
      } else if (apiProvider === 'openai') {
        console.log('üß† Enviando para OpenAI API...');
        const result = await apiCall('/api/openai', {
          method: 'POST',
          body: JSON.stringify({
            prompt: engineeringPrompt,
            max_tokens: maxLength,
            model: selectedModel || 'gpt-3.5-turbo'
          })
        });
        
        if (!result.ok) {
          const errorText = await result.text();
          throw new Error(`Erro HTTP ${result.status}: ${errorText}`);
        }
        
        const data = await result.json();
        response = data.response || 'Resposta vazia do OpenAI';
        console.log('‚úÖ Resposta recebida do OpenAI');
        
      } else if (apiProvider === 'deepseek') {
        console.log('üîç Enviando para DeepSeek API...');
        const result = await apiCall('/api/deepseek', {
          method: 'POST',
          body: JSON.stringify({
            prompt: engineeringPrompt,
            max_tokens: maxLength,
            model: selectedModel || 'deepseek-chat'
          })
        });
        
        if (!result.ok) {
          const errorText = await result.text();
          throw new Error(`Erro HTTP ${result.status}: ${errorText}`);
        }
        
        const data = await result.json();
        response = data.response || 'Resposta vazia do DeepSeek';
        console.log('‚úÖ Resposta recebida do DeepSeek');
      } else if (apiProvider === 'ollama') {
        console.log('ü¶ô Enviando para Ollama...');
        const result = await apiCall('/api/ollama', {
          method: 'POST',
          body: JSON.stringify({
            model: selectedModel || 'llama2',
            prompt: engineeringPrompt,
            stream: false
          })
        });
        
        if (!result.ok) {
          const errorText = await result.text();
          throw new Error(`Erro HTTP ${result.status}: ${errorText}`);
        }
        
        const data = await result.json();
        response = data.response || 'Resposta vazia do Ollama';
        console.log('‚úÖ Resposta recebida do Ollama');
      }
      
      setGeneratedPrompt(response);
    } catch (error) {
      console.error('‚ùå Erro ao gerar prompt:', error);
      setGeneratedPrompt(`# Erro ao Gerar Prompt

**Erro:** ${error.message}

**Detalhes:** N√£o foi poss√≠vel conectar com a API selecionada.

## üîç Verifica√ß√µes:
- **Status do servidor:** ${connectionStatus}
- **Modo atual:** ${process.env.NODE_ENV || 'production'}
- **Provider selecionado:** ${apiProvider}
- **Base URL:** ${getBaseURL()}

## üí° Solu√ß√µes:
1. **Se em desenvolvimento:** Certifique-se de que o servidor Go est√° rodando na porta 8080
2. **Se em produ√ß√£o:** Verifique se as APIs est√£o configuradas corretamente
3. **Tente usar o modo demo** como alternativa

**Comando para iniciar servidor Go:**
\`\`\`
go run .
# ou
make run
\`\`\`
`);
    }
    
    setIsGenerating(false);
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generatedPrompt);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Erro ao copiar:', error);
      // Fallback para navegadores mais antigos
      const textArea = document.createElement('textarea');
      textArea.value = generatedPrompt;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  const theme = {
    dark: {
      bg: 'bg-gray-900',
      cardBg: 'bg-gray-800',
      text: 'text-gray-100',
      textSecondary: 'text-gray-300',
      border: 'border-gray-700',
      input: 'bg-gray-700 border-gray-600 text-gray-100',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-700 hover:bg-gray-600 text-gray-200',
      accent: 'text-blue-400'
    },
    light: {
      bg: 'bg-gray-50',
      cardBg: 'bg-white',
      text: 'text-gray-900',
      textSecondary: 'text-gray-600',
      border: 'border-gray-300',
      input: 'bg-white border-gray-300 text-gray-900',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-200 hover:bg-gray-300 text-gray-700',
      accent: 'text-blue-600'
    }
  };

  const currentTheme = darkMode ? theme.dark : theme.light;

  const getConnectionStatusColor = () => {
    switch (connectionStatus) {
      case 'connected': return 'text-green-500';
      case 'offline': return 'text-red-500';
      default: return 'text-yellow-500';
    }
  };

  const getConnectionStatusText = () => {
    switch (connectionStatus) {
      case 'connected': return t('connection.connected');
      case 'offline': return process.env.NODE_ENV === 'development' ? t('connection.offline') : t('connection.offlineProduction');
      default: return t('connection.checking');
    }
  };

  const inputDiv = (
    <div className={`${currentTheme.cardBg} rounded-xl border ${currentTheme.border} shadow-lg transition-all duration-500 ease-in-out hover:shadow-xl transform hover:scale-[1.02] will-change-transform ${
      isInputCollapsed ? 'h-20' : 'h-auto'
    }`}>

      <div className="items-center p-6 pb-0 gap-4">
        <div className="text-xl font-semibold mb-4 flex items-center">
          <h2>
            üìù {t('input.title')}
          </h2>
          <div className={`h-px flex-1 bg-gradient-to-r from-blue-500/20 to-transparent ml-4 transition-all duration-300 ${
            isInputCollapsed ? 'opacity-0' : 'opacity-100'
          }`}></div>
        </div>
      </div>

      {/* Conte√∫do colaps√°vel com anima√ß√£o super suave */}
      <div className={`overflow-hidden transition-all duration-700 ease-in-out transform origin-top p-6 ${
        isInputCollapsed 
          ? 'max-h-0 opacity-0 scale-y-0 -translate-y-4 pointer-events-none' 
          : 'max-h-[800px] opacity-100 scale-y-100 translate-y-0 pointer-events-auto'
      }`}>
        <div className={`transition-all duration-500 delay-100 ${
          isInputCollapsed ? 'opacity-0' : 'opacity-100'
        }`}>
        {/* Inputs edit√°veis */}
        <div className="space-y-4">
          <textarea
            value={currentInput}
            onChange={(e) => setCurrentInput(e.target.value)}
            placeholder={t('input.placeholder')}
            className={`w-full h-32 px-4 py-3 rounded-lg border ${currentTheme.input} focus:ring-2 focus:ring-blue-500 resize-none`}
            onKeyDown={(e) => {
              if (e.key === 'Enter' && e.ctrlKey) {
                addIdea();
              }
            }}
          />
          <button
            onClick={addIdea}
            disabled={!currentInput.trim()}
            className={`w-full flex items-center justify-center gap-2 px-4 py-3 rounded-lg ${currentTheme.button} disabled:opacity-50 disabled:cursor-not-allowed transition-all`}
          >
            <Plus size={20} />
            {t('input.addButton')}
          </button>
        </div>

        {/* Configuration */}
        <div className="mt-6 space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">{t('config.purpose')}</label>
            <div className="space-y-2">
              <div className="flex gap-2">
                {[
                  { key: 'purposeCode', value: 'C√≥digo' },
                  { key: 'purposeImage', value: 'Imagem' },
                  { key: 'purposeOthers', value: 'Outros' }
                ].map((option) => (
                  <button
                    key={option.value}
                    onClick={() => setPurpose(option.value)}
                    className={`px-3 py-2 rounded-lg text-sm border transition-colors ${
                      purpose === option.value 
                        ? 'bg-blue-600 text-white border-blue-600' 
                        : `${currentTheme.buttonSecondary} ${currentTheme.border}`
                    }`}
                  >
                    {t(`config.${option.key}`)}
                  </button>
                ))}
              </div>
              {purpose === 'Outros' && (
                <input
                  type="text"
                  value={customPurpose}
                  onChange={(e) => setCustomPurpose(e.target.value)}
                  placeholder={t('config.customPurpose')}
                  className={`w-full px-3 py-2 rounded-lg border ${currentTheme.input} focus:ring-2 focus:ring-blue-500`}
                />
              )}
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              {t('config.maxLength')}: {maxLength.toLocaleString()} {t('config.characters')}
            </label>
            <input
              type="range"
              min="500"
              max="130000"
              step="500"
              value={maxLength}
              onChange={(e) => setMaxLength(parseInt(e.target.value))}
              className="w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer slider"
            />
          </div>
        </div>
        </div>
      </div>
    </div>
  );

  const outputDiv = (
    <div className={`${currentTheme.cardBg} rounded-xl border ${currentTheme.border} shadow-lg transition-all duration-500 ease-in-out hover:shadow-xl transform hover:scale-[1.02] will-change-transform ${
      isOutputCollapsed ? 'h-20' : 'h-auto'
    }`}>
      
      {/* Header sempre vis√≠vel */}
      <div className="flex justify-between items-center p-6 pb-0">
        <div className="flex items-center gap-3">
          <h2 className="text-xl font-semibold">üöÄ {t('output.title')}</h2>
          {generatedPrompt && (
            <div className={`px-2 py-1 rounded-full text-xs ${currentTheme.textSecondary} bg-opacity-50 ${currentTheme.cardBg} transition-all duration-300 ${
              isOutputCollapsed ? 'opacity-0 scale-0' : 'opacity-100 scale-100'
            }`}>
              {generatedPrompt.length.toLocaleString()} chars
            </div>
          )}
        </div>
        
        <div className="flex items-center gap-2">
          {/* Bot√£o de copiar quando h√° conte√∫do - com anima√ß√£o suave */}
          {generatedPrompt && !isOutputCollapsed && (
            <button
              onClick={copyToClipboard}
              className={`flex items-center gap-2 px-3 py-2 rounded-lg ${currentTheme.buttonSecondary} hover:bg-opacity-80 transition-all duration-300 transform hover:scale-105 active:scale-95`}
            >
              <div className="transition-all duration-200">
                {copied ? <Check size={16} /> : <Copy size={16} />}
              </div>
              {copied ? t('output.copied') : t('output.copy')}
            </button>
          )}
        </div>
      </div>
      
      {/* Conte√∫do colaps√°vel com anima√ß√£o super suave */}
      <div className={`overflow-hidden transition-all duration-700 ease-in-out transform origin-top ${
        isOutputCollapsed 
          ? 'max-h-0 opacity-0 scale-y-0 -translate-y-4 pointer-events-none' 
          : 'max-h-[800px] opacity-100 scale-y-100 translate-y-0 pointer-events-auto'
      }`}>
        <div className={`p-6 pt-4 transition-all duration-500 delay-100 ${
          isOutputCollapsed ? 'opacity-0' : 'opacity-100'
        }`}>
          {generatedPrompt ? (
            <div className="space-y-4">
              <div className={`text-xs ${currentTheme.textSecondary} flex justify-between items-center`}>
                <span>{t('output.characters')}: {generatedPrompt.length.toLocaleString()}</span>
                <span>{t('output.limit')}: {maxLength.toLocaleString()}</span>
                <div className={`w-24 h-1 rounded-full ${currentTheme.border} overflow-hidden`}>
                  <div 
                    className="h-full bg-gradient-to-r from-blue-500 to-purple-500 transition-all duration-300"
                    style={{ width: `${Math.min((generatedPrompt.length / maxLength) * 100, 100)}%` }}
                  />
                </div>
              </div>
              <div className={`max-h-96 overflow-y-auto p-4 rounded-lg border ${currentTheme.border} bg-opacity-50 ${currentTheme.cardBg}`}>
                <pre className="whitespace-pre-wrap text-sm font-mono leading-relaxed">{generatedPrompt}</pre>
              </div>
            </div>
          ) : (
            <div className={`${currentTheme.textSecondary} text-center py-16`}>
              <div className="flex flex-col items-center space-y-4">
                <Wand2 size={64} className="opacity-30 animate-pulse" />
                <div>
                  <p className="text-lg font-medium">{t('output.emptyTitle')}</p>
                  <p className="text-sm mt-2 opacity-75">{t('output.emptySubtitle')}</p>
                </div>
                <div className="flex items-center gap-2 mt-4 text-xs opacity-50">
                  <ChevronUp size={16} />
                  <span>Clique no √≠cone acima para minimizar esta se√ß√£o</span>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Indicador visual quando colapsado */}
      {isOutputCollapsed && (
        <div className="px-6 pb-3">
          <div className={`text-center ${currentTheme.textSecondary}`}>
            <div className="flex items-center justify-center gap-2 text-sm opacity-60">
              {generatedPrompt ? (
                <>
                  <span>{t('output.ready')} ({generatedPrompt.length.toLocaleString()} chars)</span>
                  <ChevronDown size={16} className="animate-bounce" />
                </>
              ) : (
                <>
                  <span>{t('output.minimized')}</span>
                  <ChevronDown size={16} className="animate-bounce" />
                </>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );

  return (
    <div className={`min-h-screen ${currentTheme.bg} ${currentTheme.text} p-4 transition-colors duration-300`}>
      <div className="max-w-[90%] mx-auto">{/* Expandido de max-w-7xl para 90% */}
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-4xl font-bold mb-2">
              <span className={currentTheme.accent}>{t('header.title')}</span>
            </h1>
            <p className={currentTheme.textSecondary}>
              {t('header.subtitle')}
            </p>
            {/* Debug info em desenvolvimento */}
            {process.env.NODE_ENV === 'development' && (
              <p className="text-xs text-yellow-400 mt-1">
                üîß {t('header.debugMode')} | {t('header.baseUrl')}: {getBaseURL()} | {t('header.status')}: {connectionStatus}
              </p>
            )}
          </div>
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <div className={`h-2 w-2 rounded-full ${connectionStatus === 'connected' ? 'bg-green-500' : connectionStatus === 'offline' ? 'bg-red-500' : 'bg-yellow-500'}`}></div>
              <span className={`text-sm ${getConnectionStatusColor()}`}>
                {getConnectionStatusText()}
              </span>
            </div>
            <select 
              value={apiProvider}
              onChange={(e) => {
                setApiProvider(e.target.value);
                setSelectedModel(''); // Reset model when changing provider
              }}
              className={`px-3 py-2 rounded-lg ${currentTheme.input} border focus:ring-2 focus:ring-blue-500`}
            >
              {availableAPIs.claude_available && (
                <option value="claude">{t('providers.claude')}</option>
              )}
              {availableAPIs.openai_available && (
                <option value="openai">{t('providers.openai')}</option>
              )}
              {availableAPIs.deepseek_available && (
                <option value="deepseek">{t('providers.deepseek')}</option>
              )}
              {availableAPIs.ollama_available && (
                <option value="ollama">{t('providers.ollama')}</option>
              )}
              <option value="demo">{t('providers.demo')}</option>
            </select>
            
            {/* Model Selection */}
            {apiProvider !== 'demo' && availableAPIs.available_models && availableAPIs.available_models[apiProvider] && (
              <select
                value={selectedModel}
                onChange={(e) => setSelectedModel(e.target.value)}
                className={`px-3 py-2 rounded-lg ${currentTheme.input} border focus:ring-2 focus:ring-blue-500`}
              >
                <option value="">{t('providers.defaultModel')}</option>
                {availableAPIs.available_models[apiProvider].map((model) => (
                  <option key={model} value={model}>{model}</option>
                ))}
              </select>
            )}
            
            <LanguageSelector currentTheme={currentTheme} />
            
            <button
              onClick={() => setDarkMode(!darkMode)}
              className={`p-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
            >
              {darkMode ? <Sun size={20} /> : <Moon size={20} />}
            </button>
          </div>
        </div>

        {/* Status Alert */}
        {connectionStatus === 'offline' && (
          <div className="mb-6 p-4 bg-yellow-900 border border-yellow-600 rounded-lg flex items-center gap-3">
            <AlertCircle className="text-yellow-400" size={20} />
            <div className="text-yellow-100">
              <strong>{t('alerts.offlineTitle')}</strong> 
              {process.env.NODE_ENV === 'development' 
                ? t('alerts.offlineDev')
                : t('alerts.offlineProduction')
              }
            </div>
          </div>
        )}

        {/* Server Info (em desenvolvimento) */}
        {process.env.NODE_ENV === 'development' && serverInfo && (
          <div className="mb-6 p-4 bg-blue-900 border border-blue-600 rounded-lg">
            <p className="text-blue-100">
              <strong>üîß {t('alerts.serverInfo')}:</strong> v{serverInfo.version} | 
              APIs: {serverInfo.apis?.claude ? '‚úÖ' : '‚ùå'} Claude, {serverInfo.apis?.ollama ? '‚úÖ' : '‚ùå'} Ollama
            </p>
          </div>
        )}

        <div className={`grid gap-6 transition-all duration-700 ease-in-out ${
          // Grid que se adapta fluida e dinamicamente
          isInputCollapsed && isOutputCollapsed
            ? 'grid-cols-1' // Apenas Ideas quando ambos colapsados
            : isInputCollapsed && !isOutputCollapsed 
            ? 'grid-cols-1 lg:grid-cols-2' // Ideas + Output
            : !isInputCollapsed && isOutputCollapsed
            ? 'grid-cols-1 lg:grid-cols-2' // Input + Ideas
            : 'grid-cols-1 lg:grid-cols-3' // Todos expandidos: Input + Ideas + Output
        }`}>

          {/* Input Section - Sempre no DOM, mas com transi√ß√µes ultra-fluidas */}
          <div className={`transition-all duration-700 ease-out transform origin-center will-change-transform ${
            isInputCollapsed 
              ? 'opacity-0 scale-95 translate-y-4 pointer-events-none filter blur-sm' 
              : 'opacity-100 scale-100 translate-y-0 pointer-events-auto filter blur-0'
          } ${isInputCollapsed ? 'lg:hidden' : ''}`}>
            {inputDiv}
          </div>

          {/* Ideas List - Sempre vis√≠vel e responsivo */}
          <div className={`${currentTheme.cardBg} rounded-xl p-6 border ${currentTheme.border} shadow-lg hover:shadow-xl transition-all duration-500 ease-in-out transform hover:scale-[1.02] ${
            // Expande quando √© o √∫nico card vis√≠vel
            isInputCollapsed && isOutputCollapsed ? 'lg:col-span-1' : ''
          }`}>
            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
              üí° {t('ideas.title')} 
              <span className={`px-2 py-1 rounded-full text-sm ${currentTheme.textSecondary} bg-blue-500/10 border border-blue-500/20`}>
                {ideas.length}
              </span>
              <div className="h-px flex-1 bg-gradient-to-r from-purple-500/20 to-transparent ml-4"></div>
              
              {/* Bot√£o Limpar Tudo - aparece quando h√° conte√∫do */}
              {(ideas.length > 0 || generatedPrompt || currentInput.trim()) && (
                <button
                  onClick={() => {
                    if (window.confirm(t('ideas.clearConfirm'))) {
                      clearAll();
                    }
                  }}
                  className={`group flex items-center gap-2 px-3 py-2 rounded-lg ${currentTheme.buttonSecondary} hover:bg-opacity-80 transition-all duration-300 transform hover:scale-105 active:scale-95 hover:bg-red-600 hover:text-white`}
                  title={t('ideas.clearAll')}
                >
                  <RefreshCw size={16} className="transition-transform duration-300 group-hover:rotate-180" />
                  <span className="text-sm font-medium">{t('ideas.clearAll')}</span>
                </button>
              )}
            </h2>
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {ideas.length === 0 ? (
                <p className={`${currentTheme.textSecondary} text-center py-8`}>
                  {t('input.emptyState')}
                </p>
              ) : (
                ideas.map((idea, index) => (
                  <div 
                    key={idea.id} 
                    className={`p-3 rounded-lg border ${currentTheme.border} bg-opacity-50 transition-all duration-300 ease-out transform hover:scale-[1.02] hover:shadow-md animate-in slide-in-from-bottom-4 fade-in duration-500`}
                    style={{ animationDelay: `${index * 50}ms` }}
                  >
                    {editingId === idea.id ? (
                      <div className="space-y-2">
                        <textarea
                          value={editingText}
                          onChange={(e) => setEditingText(e.target.value)}
                          className={`w-full px-2 py-1 rounded border ${currentTheme.input} text-sm`}
                          rows="2"
                        />
                        <div className="flex gap-1">
                          <button
                            onClick={saveEdit}
                            className="px-2 py-1 bg-green-600 text-white rounded text-xs hover:bg-green-700 transition-all duration-200 transform hover:scale-105 active:scale-95"
                          >
                            {t('ideas.save')}
                          </button>
                          <button
                            onClick={cancelEdit}
                            className={`px-2 py-1 rounded text-xs ${currentTheme.buttonSecondary} transition-all duration-200 transform hover:scale-105 active:scale-95`}
                          >
                            {t('ideas.cancel')}
                          </button>
                        </div>
                      </div>
                    ) : (
                      <>
                        <p className="text-sm mb-2">{idea.text}</p>
                        <div className="flex justify-end gap-1">
                          <button
                            onClick={() => startEditing(idea.id, idea.text)}
                            className={`p-1 rounded ${currentTheme.buttonSecondary} hover:bg-opacity-80 transition-all duration-200 transform hover:scale-110 active:scale-90`}
                            title={t('ideas.edit')}
                          >
                            <Edit3 size={14} />
                          </button>
                          <button
                            onClick={() => removeIdea(idea.id)}
                            className="p-1 rounded bg-red-600 text-white hover:bg-red-700 transition-all duration-200 transform hover:scale-110 active:scale-90"
                            title={t('ideas.delete')}
                          >
                            <Trash2 size={14} />
                          </button>
                        </div>
                      </>
                    )}
                  </div>
                ))
              )}
            </div>
            
            {ideas.length > 0 && (
              <div className="items-bottom justify-between border-opacity-0 h-auto">
                <div className="mt-6 pt-4 border-t border-opacity-20 border-gradient-to-r from-purple-500 to-blue-500">
                  <button
                    onClick={generatePrompt}
                    disabled={isGenerating}
                    className={`
                      w-full 
                      flex 
                      items-center 
                      justify-center 
                      gap-3 
                      px-6 
                      py-4 
                      rounded-xl 
                      bg-gradient-to-r 
                      from-purple-600 
                      via-blue-600 
                      to-indigo-600 
                      text-white 
                      hover:from-purple-700 
                      hover:via-blue-700 
                      hover:to-indigo-700 
                      disabled:opacity-50 
                      disabled:cursor-not-allowed 
                      transition-all 
                      duration-500
                      transform 
                      hover:scale-105 
                      active:scale-95
                      hover:shadow-xl
                      hover:shadow-purple-500/25
                      font-medium 
                      text-lg 
                      relative 
                      overflow-hidden 
                      group
                      ${isGenerating ? 'animate-pulse' : ''}
                    `}
                  >
                    {/* Efeito de brilho no hover mais suave */}
                    <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 translate-x-[-200%] group-hover:translate-x-[200%] transition-transform duration-1500 ease-in-out"></div>
                    
                    <div className={`transition-transform duration-300 ${isGenerating ? 'animate-spin' : 'group-hover:animate-pulse'}`}>
                      <Wand2 size={24} />
                    </div>
                    <span className="relative z-10 transition-all duration-300">
                      {isGenerating ? t('ideas.generating') : t('ideas.generateButton')}
                    </span>
                    
                    {!isGenerating && (
                      <div className="absolute right-4 opacity-60 group-hover:opacity-100 transition-all duration-300 group-hover:animate-bounce">
                        ‚ú®
                      </div>
                    )}
                  </button>
                </div>
              </div>
            )}
          </div>

          {/* Generated Prompt - Sempre no DOM, mas com transi√ß√µes ultra-fluidas */}
          <div className={`transition-all duration-700 ease-out transform origin-center will-change-transform ${
            isOutputCollapsed 
              ? 'opacity-0 scale-95 translate-y-4 pointer-events-none filter blur-sm' 
              : 'opacity-100 scale-100 translate-y-0 pointer-events-auto filter blur-0'
          } ${isOutputCollapsed ? 'lg:hidden' : ''}`}>
            {outputDiv}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PromptCrafter;

/// frontend/src/components/AgentForm.jsx ///
import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { 
  Save, 
  ArrowLeft, 
  Plus, 
  X, 
  Sun, 
  Moon, 
  User, 
  Code,
  Shield,
  FileText
} from 'lucide-react';
import LanguageSelector from './LanguageSelector';

const AgentForm = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { id } = useParams();
  const isEdit = Boolean(id);

  // Estados
  const [darkMode, setDarkMode] = useState(true);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);
  
  // Form data
  const [formData, setFormData] = useState({
    Title: '',
    Role: '',
    Skills: [],
    Restrictions: [],
    PromptExample: ''
  });
  
  const [currentSkill, setCurrentSkill] = useState('');
  const [currentRestriction, setCurrentRestriction] = useState('');

  // Temas
  const theme = {
    dark: {
      bg: 'bg-gray-900',
      cardBg: 'bg-gray-800',
      text: 'text-gray-100',
      textSecondary: 'text-gray-300',
      border: 'border-gray-700',
      input: 'bg-gray-700 border-gray-600 text-gray-100',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-700 hover:bg-gray-600 text-gray-200',
      accent: 'text-blue-400'
    },
    light: {
      bg: 'bg-gray-50',
      cardBg: 'bg-white',
      text: 'text-gray-900',
      textSecondary: 'text-gray-600',
      border: 'border-gray-300',
      input: 'bg-white border-gray-300 text-gray-900',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-200 hover:bg-gray-300 text-gray-700',
      accent: 'text-blue-600'
    }
  };

  const currentTheme = darkMode ? theme.dark : theme.light;

  // Carregar agent existente se for edi√ß√£o
  useEffect(() => {
    const loadAgent = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/agents/${id}`);
        if (!response.ok) throw new Error('Failed to load agent');
        const agent = await response.json();
        setFormData({
          Title: agent.Title || '',
          Role: agent.Role || '',
          Skills: agent.Skills || [],
          Restrictions: agent.Restrictions || [],
          PromptExample: agent.PromptExample || ''
        });
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    if (isEdit) {
      loadAgent();
    }
  }, [id, isEdit]);

  // Manipular campos do formul√°rio
  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // Adicionar skill
  const addSkill = () => {
    if (currentSkill.trim() && !formData.Skills.includes(currentSkill.trim())) {
      setFormData(prev => ({
        ...prev,
        Skills: [...prev.Skills, currentSkill.trim()]
      }));
      setCurrentSkill('');
    }
  };

  // Remover skill
  const removeSkill = (skill) => {
    setFormData(prev => ({
      ...prev,
      Skills: prev.Skills.filter(s => s !== skill)
    }));
  };

  // Adicionar restriction
  const addRestriction = () => {
    if (currentRestriction.trim() && !formData.Restrictions.includes(currentRestriction.trim())) {
      setFormData(prev => ({
        ...prev,
        Restrictions: [...prev.Restrictions, currentRestriction.trim()]
      }));
      setCurrentRestriction('');
    }
  };

  // Remover restriction
  const removeRestriction = (restriction) => {
    setFormData(prev => ({
      ...prev,
      Restrictions: prev.Restrictions.filter(r => r !== restriction)
    }));
  };

  // Submeter formul√°rio
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.Title.trim()) {
      setError('Title is required');
      return;
    }

    try {
      setSaving(true);
      setError(null);
      
      const url = isEdit ? `/api/agents/${id}` : '/api/agents';
      const method = isEdit ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });
      
      if (!response.ok) throw new Error('Failed to save agent');
      
      navigate('/agents');
    } catch (err) {
      setError(err.message);
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className={`min-h-screen ${currentTheme.bg} ${currentTheme.text} flex items-center justify-center`}>
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p>{t('loading')}...</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen ${currentTheme.bg} ${currentTheme.text}`}>
      {/* Header */}
      <header className={`${currentTheme.cardBg} ${currentTheme.border} border-b sticky top-0 z-10`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center gap-4">
              <button
                onClick={() => navigate('/agents')}
                className={`p-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
              >
                <ArrowLeft className="h-5 w-5" />
              </button>
              <User className="h-8 w-8 text-blue-500" />
              <h1 className="text-2xl font-bold">
                {isEdit ? t('agents.edit') : t('agents.new')}
              </h1>
            </div>
            
            <div className="flex items-center gap-4">
              <LanguageSelector currentTheme={currentTheme} />
              
              <button
                onClick={() => setDarkMode(!darkMode)}
                className={`p-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
              >
                {darkMode ? <Sun size={20} /> : <Moon size={20} />}
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Informa√ß√µes B√°sicas */}
          <div className={`${currentTheme.cardBg} ${currentTheme.border} border rounded-lg p-6`}>
            <h2 className="text-xl font-semibold mb-6 flex items-center gap-2">
              <User size={20} className="text-blue-500" />
              {t('agents.form.basic')}
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium mb-2">
                  {t('agents.form.title')} *
                </label>
                <input
                  type="text"
                  value={formData.Title}
                  onChange={(e) => handleInputChange('Title', e.target.value)}
                  placeholder={t('agents.form.titlePlaceholder')}
                  className={`w-full px-4 py-3 rounded-lg ${currentTheme.input} ${currentTheme.border} border focus:ring-2 focus:ring-blue-500 focus:border-transparent`}
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-2">
                  {t('agents.form.role')}
                </label>
                <input
                  type="text"
                  value={formData.Role}
                  onChange={(e) => handleInputChange('Role', e.target.value)}
                  placeholder={t('agents.form.rolePlaceholder')}
                  className={`w-full px-4 py-3 rounded-lg ${currentTheme.input} ${currentTheme.border} border focus:ring-2 focus:ring-blue-500 focus:border-transparent`}
                />
              </div>
            </div>
          </div>

          {/* Skills */}
          <div className={`${currentTheme.cardBg} ${currentTheme.border} border rounded-lg p-6`}>
            <h2 className="text-xl font-semibold mb-6 flex items-center gap-2">
              <Code size={20} className="text-green-500" />
              {t('agents.form.skills')}
            </h2>
            
            <div className="space-y-4">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={currentSkill}
                  onChange={(e) => setCurrentSkill(e.target.value)}
                  placeholder={t('agents.form.skillPlaceholder')}
                  className={`flex-1 px-4 py-3 rounded-lg ${currentTheme.input} ${currentTheme.border} border focus:ring-2 focus:ring-blue-500 focus:border-transparent`}
                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addSkill())}
                />
                <button
                  type="button"
                  onClick={addSkill}
                  className={`px-4 py-3 rounded-lg ${currentTheme.button} transition-colors`}
                >
                  <Plus size={16} />
                </button>
              </div>
              
              {formData.Skills.length > 0 && (
                <div className="flex flex-wrap gap-2">
                  {formData.Skills.map((skill, index) => (
                    <span
                      key={index}
                      className="inline-flex items-center gap-2 px-3 py-1 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 rounded-full text-sm"
                    >
                      {skill}
                      <button
                        type="button"
                        onClick={() => removeSkill(skill)}
                        className="hover:bg-green-200 dark:hover:bg-green-800 rounded-full p-1"
                      >
                        <X size={12} />
                      </button>
                    </span>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Restrictions */}
          <div className={`${currentTheme.cardBg} ${currentTheme.border} border rounded-lg p-6`}>
            <h2 className="text-xl font-semibold mb-6 flex items-center gap-2">
              <Shield size={20} className="text-red-500" />
              {t('agents.form.restrictions')}
            </h2>
            
            <div className="space-y-4">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={currentRestriction}
                  onChange={(e) => setCurrentRestriction(e.target.value)}
                  placeholder={t('agents.form.restrictionPlaceholder')}
                  className={`flex-1 px-4 py-3 rounded-lg ${currentTheme.input} ${currentTheme.border} border focus:ring-2 focus:ring-blue-500 focus:border-transparent`}
                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addRestriction())}
                />
                <button
                  type="button"
                  onClick={addRestriction}
                  className={`px-4 py-3 rounded-lg ${currentTheme.button} transition-colors`}
                >
                  <Plus size={16} />
                </button>
              </div>
              
              {formData.Restrictions.length > 0 && (
                <div className="flex flex-wrap gap-2">
                  {formData.Restrictions.map((restriction, index) => (
                    <span
                      key={index}
                      className="inline-flex items-center gap-2 px-3 py-1 bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-full text-sm"
                    >
                      {restriction}
                      <button
                        type="button"
                        onClick={() => removeRestriction(restriction)}
                        className="hover:bg-red-200 dark:hover:bg-red-800 rounded-full p-1"
                      >
                        <X size={12} />
                      </button>
                    </span>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Prompt Example */}
          <div className={`${currentTheme.cardBg} ${currentTheme.border} border rounded-lg p-6`}>
            <h2 className="text-xl font-semibold mb-6 flex items-center gap-2">
              <FileText size={20} className="text-purple-500" />
              {t('agents.form.promptExample')}
            </h2>
            
            <textarea
              value={formData.PromptExample}
              onChange={(e) => handleInputChange('PromptExample', e.target.value)}
              placeholder={t('agents.form.promptExamplePlaceholder')}
              rows={6}
              className={`w-full px-4 py-3 rounded-lg ${currentTheme.input} ${currentTheme.border} border focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none`}
            />
          </div>

          {/* Actions */}
          <div className="flex justify-end gap-4">
            <button
              type="button"
              onClick={() => navigate('/agents')}
              className={`px-6 py-3 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
            >
              {t('cancel')}
            </button>
            <button
              type="submit"
              disabled={saving || !formData.Title.trim()}
              className={`flex items-center gap-2 px-6 py-3 rounded-lg ${currentTheme.button} transition-colors disabled:opacity-50`}
            >
              <Save size={16} />
              {saving ? t('saving') : (isEdit ? t('update') : t('create'))}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AgentForm;

/// frontend/src/components/AgentView.jsx ///
import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { 
  ArrowLeft, 
  Edit, 
  Trash2, 
  Sun, 
  Moon, 
  User, 
  Code,
  Shield,
  FileText,
  Copy,
  Download
} from 'lucide-react';
import LanguageSelector from './LanguageSelector';

const AgentView = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { id } = useParams();

  // Estados
  const [darkMode, setDarkMode] = useState(true);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [agent, setAgent] = useState(null);
  const [copied, setCopied] = useState(false);

  // Temas
  const theme = {
    dark: {
      bg: 'bg-gray-900',
      cardBg: 'bg-gray-800',
      text: 'text-gray-100',
      textSecondary: 'text-gray-300',
      border: 'border-gray-700',
      input: 'bg-gray-700 border-gray-600 text-gray-100',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-700 hover:bg-gray-600 text-gray-200',
      accent: 'text-blue-400'
    },
    light: {
      bg: 'bg-gray-50',
      cardBg: 'bg-white',
      text: 'text-gray-900',
      textSecondary: 'text-gray-600',
      border: 'border-gray-300',
      input: 'bg-white border-gray-300 text-gray-900',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-200 hover:bg-gray-300 text-gray-700',
      accent: 'text-blue-600'
    }
  };

  const currentTheme = darkMode ? theme.dark : theme.light;

  // Carregar agent
  useEffect(() => {
    const loadAgent = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/agents/${id}`);
        if (!response.ok) throw new Error('Failed to load agent');
        const data = await response.json();
        setAgent(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    loadAgent();
  }, [id]);

  // Deletar agent
  const deleteAgent = async () => {
    if (!window.confirm(t('agents.confirmDelete'))) return;
    
    try {
      const response = await fetch(`/api/agents/${id}`, { method: 'DELETE' });
      if (!response.ok) throw new Error('Failed to delete agent');
      navigate('/agents');
    } catch (err) {
      setError(err.message);
    }
  };

  // Copiar prompt example
  const copyPromptExample = async () => {
    try {
      await navigator.clipboard.writeText(agent.PromptExample);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      setError('Failed to copy to clipboard');
    }
  };

  // Exportar agent como markdown
  const exportAsMarkdown = () => {
    const markdown = `# ${agent.Title}

## Role
${agent.Role || 'No role specified'}

## Skills
${agent.Skills?.map(skill => `- ${skill}`).join('\n') || 'No skills specified'}

## Restrictions
${agent.Restrictions?.map(restriction => `- ${restriction}`).join('\n') || 'No restrictions specified'}

## Prompt Example
\`\`\`
${agent.PromptExample || 'No prompt example provided'}
\`\`\`
`;
    
    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${agent.Title.replace(/[^a-zA-Z0-9]/g, '_')}.md`;
    a.click();
    URL.revokeObjectURL(url);
  };

  if (loading) {
    return (
      <div className={`min-h-screen ${currentTheme.bg} ${currentTheme.text} flex items-center justify-center`}>
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p>{t('loading')}...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={`min-h-screen ${currentTheme.bg} ${currentTheme.text} flex items-center justify-center`}>
        <div className="text-center">
          <p className="text-red-500 mb-4">{error}</p>
          <button
            onClick={() => navigate('/agents')}
            className={`px-4 py-2 rounded-lg ${currentTheme.button} transition-colors`}
          >
            {t('agents.backToList')}
          </button>
        </div>
      </div>
    );
  }

  if (!agent) {
    return (
      <div className={`min-h-screen ${currentTheme.bg} ${currentTheme.text} flex items-center justify-center`}>
        <div className="text-center">
          <p className="mb-4">{t('agents.notFound')}</p>
          <button
            onClick={() => navigate('/agents')}
            className={`px-4 py-2 rounded-lg ${currentTheme.button} transition-colors`}
          >
            {t('agents.backToList')}
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen ${currentTheme.bg} ${currentTheme.text}`}>
      {/* Header */}
      <header className={`${currentTheme.cardBg} ${currentTheme.border} border-b sticky top-0 z-10`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center gap-4">
              <button
                onClick={() => navigate('/agents')}
                className={`p-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
              >
                <ArrowLeft className="h-5 w-5" />
              </button>
              <User className="h-8 w-8 text-blue-500" />
              <h1 className="text-2xl font-bold">{agent.Title}</h1>
            </div>
            
            <div className="flex items-center gap-4">
              <LanguageSelector currentTheme={currentTheme} />
              
              <button
                onClick={() => setDarkMode(!darkMode)}
                className={`p-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
              >
                {darkMode ? <Sun size={20} /> : <Moon size={20} />}
              </button>
              
              <button
                onClick={() => navigate(`/agents/${id}/edit`)}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg ${currentTheme.button} transition-colors`}
              >
                <Edit size={16} />
                {t('edit')}
              </button>
              
              <button
                onClick={deleteAgent}
                className="flex items-center gap-2 px-4 py-2 rounded-lg bg-red-600 hover:bg-red-700 text-white transition-colors"
              >
                <Trash2 size={16} />
                {t('delete')}
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Informa√ß√µes B√°sicas */}
        <div className={`${currentTheme.cardBg} ${currentTheme.border} border rounded-lg p-6 mb-8`}>
          <h2 className="text-xl font-semibold mb-6 flex items-center gap-2">
            <User size={20} className="text-blue-500" />
            {t('agents.form.basic')}
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium mb-2">
                {t('agents.form.title')}
              </label>
              <p className={`${currentTheme.textSecondary} text-lg`}>{agent.Title}</p>
            </div>
            
            {agent.Role && (
              <div>
                <label className="block text-sm font-medium mb-2">
                  {t('agents.form.role')}
                </label>
                <p className={`${currentTheme.textSecondary}`}>{agent.Role}</p>
              </div>
            )}
          </div>
        </div>

        {/* Skills */}
        {agent.Skills && agent.Skills.length > 0 && (
          <div className={`${currentTheme.cardBg} ${currentTheme.border} border rounded-lg p-6 mb-8`}>
            <h2 className="text-xl font-semibold mb-6 flex items-center gap-2">
              <Code size={20} className="text-green-500" />
              {t('agents.form.skills')}
            </h2>
            
            <div className="flex flex-wrap gap-2">
              {agent.Skills.map((skill, index) => (
                <span
                  key={index}
                  className="px-3 py-1 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 rounded-full text-sm"
                >
                  {skill}
                </span>
              ))}
            </div>
          </div>
        )}

        {/* Restrictions */}
        {agent.Restrictions && agent.Restrictions.length > 0 && (
          <div className={`${currentTheme.cardBg} ${currentTheme.border} border rounded-lg p-6 mb-8`}>
            <h2 className="text-xl font-semibold mb-6 flex items-center gap-2">
              <Shield size={20} className="text-red-500" />
              {t('agents.form.restrictions')}
            </h2>
            
            <div className="flex flex-wrap gap-2">
              {agent.Restrictions.map((restriction, index) => (
                <span
                  key={index}
                  className="px-3 py-1 bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-full text-sm"
                >
                  {restriction}
                </span>
              ))}
            </div>
          </div>
        )}

        {/* Prompt Example */}
        {agent.PromptExample && (
          <div className={`${currentTheme.cardBg} ${currentTheme.border} border rounded-lg p-6 mb-8`}>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-semibold flex items-center gap-2">
                <FileText size={20} className="text-purple-500" />
                {t('agents.form.promptExample')}
              </h2>
              
              <div className="flex gap-2">
                <button
                  onClick={copyPromptExample}
                  className={`flex items-center gap-2 px-3 py-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
                >
                  <Copy size={16} />
                  {copied ? t('copied') : t('copy')}
                </button>
                
                <button
                  onClick={exportAsMarkdown}
                  className={`flex items-center gap-2 px-3 py-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
                >
                  <Download size={16} />
                  {t('export')}
                </button>
              </div>
            </div>
            
            <pre className={`${currentTheme.input} ${currentTheme.border} border rounded-lg p-4 whitespace-pre-wrap text-sm overflow-auto max-h-96`}>
              {agent.PromptExample}
            </pre>
          </div>
        )}
      </div>
    </div>
  );
};

export default AgentView;

/// frontend/src/components/AgentsDashboard.jsx ///
import React, { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { 
  Users, 
  Plus, 
  Edit, 
  Trash2, 
  Download, 
  FileText,
  Search,
  Grid,
  List,
  Sun,
  Moon,
  Copy,
  Eye,
  Upload,
  CheckSquare
} from 'lucide-react';
import LanguageSelector from './LanguageSelector';
import ImportAgentsModal from './ImportAgentsModal';
import ExportAgentsModal from './ExportAgentsModal';
import ValidationAgentsModal from './ValidationAgentsModal';

const AgentsDashboard = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  
  // Estados
  const [agents, setAgents] = useState([]);
  const [darkMode, setDarkMode] = useState(true);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState('all');
  const [viewMode, setViewMode] = useState('grid'); // 'grid' or 'list'
  const [showGenerateModal, setShowGenerateModal] = useState(false);
  const [showImportModal, setShowImportModal] = useState(false);
  const [showExportModal, setShowExportModal] = useState(false);
  const [showValidationModal, setShowValidationModal] = useState(false);
  const [requirements, setRequirements] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedMarkdown, setGeneratedMarkdown] = useState('');
  
  // Temas
  const theme = {
    dark: {
      bg: 'bg-gray-900',
      cardBg: 'bg-gray-800',
      text: 'text-gray-100',
      textSecondary: 'text-gray-300',
      border: 'border-gray-700',
      input: 'bg-gray-700 border-gray-600 text-gray-100',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-700 hover:bg-gray-600 text-gray-200',
      accent: 'text-blue-400'
    },
    light: {
      bg: 'bg-gray-50',
      cardBg: 'bg-white',
      text: 'text-gray-900',
      textSecondary: 'text-gray-600',
      border: 'border-gray-300',
      input: 'bg-white border-gray-300 text-gray-900',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-200 hover:bg-gray-300 text-gray-700',
      accent: 'text-blue-600'
    }
  };

  const currentTheme = darkMode ? theme.dark : theme.light;

  // Carregar agents
  useEffect(() => {
    loadAgents();
  }, []);

  const loadAgents = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/agents');
      if (!response.ok) throw new Error('Failed to load agents');
      const data = await response.json();
      setAgents(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // Filtrar agents
  const filteredAgents = agents.filter(agent => {
    const matchesSearch = agent.Title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         agent.Role?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = filterCategory === 'all' || 
                         agent.Skills?.some(skill => skill.toLowerCase().includes(filterCategory.toLowerCase()));
    return matchesSearch && matchesFilter;
  });

  // Deletar agent
  const deleteAgent = async (id) => {
    try {
      const response = await fetch(`/api/agents/${id}`, { method: 'DELETE' });
      if (!response.ok) throw new Error('Failed to delete agent');
      setAgents(agents.filter(a => a.ID !== id));
    } catch (err) {
      setError(err.message);
    }
  };

  // Gerar AGENTS.md via LLM
  const generateAgentsFromRequirements = async () => {
    try {
      setIsGenerating(true);
      const response = await fetch('/api/agents/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ requirements })
      });
      
      if (!response.ok) throw new Error('Failed to generate agents');
      const data = await response.json();
      setGeneratedMarkdown(data.markdown);
    } catch (err) {
      setError(err.message);
    } finally {
      setIsGenerating(false);
    }
  };

  // Exportar AGENTS.md
  const exportAgentsMarkdown = async () => {
    try {
      const response = await fetch('/api/agents/markdown');
      if (!response.ok) throw new Error('Failed to export markdown');
      const markdown = await response.text();
      
      const blob = new Blob([markdown], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'AGENTS.md';
      a.click();
      URL.revokeObjectURL(url);
    } catch (err) {
      setError(err.message);
    }
  };

  // Handlers para os novos modais
  const handleImportSuccess = (result) => {
    // Recarregar a lista de agents ap√≥s importa√ß√£o bem-sucedida
    loadAgents();
  };

  const handleExportAgents = () => {
    setShowExportModal(true);
  };

  const handleImportAgents = () => {
    setShowImportModal(true);
  };

  const handleValidateAgents = () => {
    setShowValidationModal(true);
  };

  // Copiar markdown para clipboard
  const copyMarkdownToClipboard = async () => {
    try {
      const response = await fetch('/api/agents/markdown');
      if (!response.ok) throw new Error('Failed to get markdown');
      const markdown = await response.text();
      await navigator.clipboard.writeText(markdown);
    } catch (err) {
      setError(err.message);
    }
  };

  if (loading) {
    return (
      <div className={`min-h-screen ${currentTheme.bg} ${currentTheme.text} flex items-center justify-center`}>
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p>{t('loading')}...</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen ${currentTheme.bg} ${currentTheme.text}`}>
      {/* Header */}
      <header className={`${currentTheme.cardBg} ${currentTheme.border} border-b sticky top-0 z-10`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center gap-4">
              <Users className="h-8 w-8 text-blue-500" />
              <h1 className="text-2xl font-bold">{t('agents.title')}</h1>
            </div>
            
            <div className="flex items-center gap-4">
              <LanguageSelector currentTheme={currentTheme} />
              
              <button
                onClick={() => setDarkMode(!darkMode)}
                className={`p-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
              >
                {darkMode ? <Sun size={20} /> : <Moon size={20} />}
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Controles */}
        <div className={`${currentTheme.cardBg} ${currentTheme.border} border rounded-lg p-6 mb-8`}>
          <div className="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
            {/* Busca e Filtros */}
            <div className="flex flex-col sm:flex-row gap-4 flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder={t('agents.search')}
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className={`pl-10 pr-4 py-2 rounded-lg ${currentTheme.input} ${currentTheme.border} border focus:ring-2 focus:ring-blue-500 focus:border-transparent w-full sm:w-64`}
                />
              </div>
              
              <select
                value={filterCategory}
                onChange={(e) => setFilterCategory(e.target.value)}
                className={`px-4 py-2 rounded-lg ${currentTheme.input} ${currentTheme.border} border focus:ring-2 focus:ring-blue-500 focus:border-transparent`}
              >
                <option value="all">{t('agents.all')}</option>
                <option value="backend">Backend</option>
                <option value="frontend">Frontend</option>
                <option value="devops">DevOps</option>
                <option value="qa">QA</option>
              </select>
            </div>

            {/* A√ß√µes */}
            <div className="flex gap-2">
              <div className="flex gap-1 p-1 bg-gray-100 dark:bg-gray-700 rounded-lg">
                <button
                  onClick={() => setViewMode('grid')}
                  className={`p-2 rounded ${viewMode === 'grid' ? 'bg-blue-500 text-white' : currentTheme.buttonSecondary}`}
                >
                  <Grid size={16} />
                </button>
                <button
                  onClick={() => setViewMode('list')}
                  className={`p-2 rounded ${viewMode === 'list' ? 'bg-blue-500 text-white' : currentTheme.buttonSecondary}`}
                >
                  <List size={16} />
                </button>
              </div>

              <button
                onClick={() => setShowGenerateModal(true)}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg ${currentTheme.button} transition-colors`}
              >
                <FileText size={16} />
                {t('agents.generateSquad')}
              </button>

              <button
                onClick={() => navigate('/agents/new')}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg ${currentTheme.button} transition-colors`}
              >
                <Plus size={16} />
                {t('agents.new')}
              </button>

              <button
                onClick={handleImportAgents}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
              >
                <Upload size={16} />
                {t('agents.import.title')}
              </button>

              <button
                onClick={handleExportAgents}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
              >
                <Download size={16} />
                {t('agents.export.title')}
              </button>

              <button
                onClick={handleValidateAgents}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
              >
                <CheckSquare size={16} />
                {t('agents.validation.title')}
              </button>

              <button
                onClick={exportAgentsMarkdown}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
              >
                <Download size={16} />
                {t('agents.exportButton')}
              </button>

              <button
                onClick={copyMarkdownToClipboard}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
              >
                <Copy size={16} />
                {t('copy')}
              </button>
            </div>
          </div>
        </div>

        {/* Lista de Agents */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
            {error}
          </div>
        )}

        {filteredAgents.length === 0 ? (
          <div className={`${currentTheme.cardBg} ${currentTheme.border} border rounded-lg p-12 text-center`}>
            <Users className="h-24 w-24 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-semibold mb-2">{t('agents.empty.title')}</h3>
            <p className={`${currentTheme.textSecondary} mb-6`}>{t('agents.empty.description')}</p>
            <button
              onClick={() => navigate('/agents/new')}
              className={`flex items-center gap-2 px-6 py-3 rounded-lg ${currentTheme.button} transition-colors mx-auto`}
            >
              <Plus size={20} />
              {t('agents.createFirst')}
            </button>
          </div>
        ) : (
          <div className={viewMode === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' : 'space-y-4'}>
            {filteredAgents.map((agent) => (
              <div
                key={agent.ID}
                className={`${currentTheme.cardBg} ${currentTheme.border} border rounded-lg p-6 transition-all hover:shadow-lg ${
                  viewMode === 'list' ? 'flex items-center justify-between' : ''
                }`}
              >
                <div className={viewMode === 'list' ? 'flex-1' : ''}>
                  <h3 className="text-xl font-semibold mb-2">{agent.Title}</h3>
                  <p className={`${currentTheme.textSecondary} mb-3`}>{agent.Role}</p>
                  
                  {agent.Skills && agent.Skills.length > 0 && (
                    <div className="flex flex-wrap gap-2 mb-4">
                      {agent.Skills.map((skill, index) => (
                        <span
                          key={index}
                          className="px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs rounded-full"
                        >
                          {skill}
                        </span>
                      ))}
                    </div>
                  )}
                </div>

                <div className={`flex gap-2 ${viewMode === 'list' ? 'ml-4' : 'mt-4'}`}>
                  <button
                    onClick={() => navigate(`/agents/${agent.ID}`)}
                    className={`p-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
                    title={t('view')}
                  >
                    <Eye size={16} />
                  </button>
                  <button
                    onClick={() => navigate(`/agents/${agent.ID}/edit`)}
                    className={`p-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
                    title={t('edit')}
                  >
                    <Edit size={16} />
                  </button>
                  <button
                    onClick={() => deleteAgent(agent.ID)}
                    className="p-2 rounded-lg bg-red-600 hover:bg-red-700 text-white transition-colors"
                    title={t('delete')}
                  >
                    <Trash2 size={16} />
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modal de Gera√ß√£o */}
      {showGenerateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className={`${currentTheme.cardBg} rounded-lg p-6 w-full max-w-2xl max-h-[80vh] overflow-y-auto`}>
            <h2 className="text-2xl font-bold mb-4">{t('agents.generate.title')}</h2>
            
            <div className="mb-4">
              <label className="block text-sm font-medium mb-2">
                {t('agents.generate.requirements')}
              </label>
              <textarea
                value={requirements}
                onChange={(e) => setRequirements(e.target.value)}
                placeholder={t('agents.generate.placeholder')}
                className={`w-full h-32 px-4 py-2 rounded-lg ${currentTheme.input} ${currentTheme.border} border focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none`}
              />
            </div>

            {generatedMarkdown && (
              <div className="mb-4">
                <label className="block text-sm font-medium mb-2">
                  {t('agents.generate.result')}
                </label>
                <pre className={`w-full h-48 px-4 py-2 rounded-lg ${currentTheme.input} ${currentTheme.border} border overflow-auto text-sm whitespace-pre-wrap`}>
                  {generatedMarkdown}
                </pre>
              </div>
            )}

            <div className="flex gap-3 justify-end">
              <button
                onClick={() => {
                  setShowGenerateModal(false);
                  setRequirements('');
                  setGeneratedMarkdown('');
                }}
                className={`px-4 py-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
              >
                {t('cancel')}
              </button>
              <button
                onClick={generateAgentsFromRequirements}
                disabled={!requirements.trim() || isGenerating}
                className={`px-4 py-2 rounded-lg ${currentTheme.button} transition-colors disabled:opacity-50`}
              >
                {isGenerating ? t('generating') : t('generate')}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modais */}
      <ImportAgentsModal 
        isOpen={showImportModal}
        onClose={() => setShowImportModal(false)}
        onImport={handleImportSuccess}
        darkMode={darkMode}
      />
      
      <ExportAgentsModal 
        isOpen={showExportModal}
        onClose={() => setShowExportModal(false)}
        agents={agents}
        darkMode={darkMode}
      />
      
      <ValidationAgentsModal 
        isOpen={showValidationModal}
        onClose={() => setShowValidationModal(false)}
        darkMode={darkMode}
      />
    </div>
  );
};

export default AgentsDashboard;

/// frontend/src/components/ExportAgentsModal.jsx ///
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  X, 
  Download, 
  Loader,
  CheckSquare,
  Square
} from 'lucide-react';

const ExportAgentsModal = ({ isOpen, onClose, agents, darkMode }) => {
  const { t } = useTranslation();
  
  const [selectedAgents, setSelectedAgents] = useState(new Set());
  const [format, setFormat] = useState('markdown');
  const [filename, setFilename] = useState('agents');
  const [loading, setLoading] = useState(false);
  
  const theme = {
    dark: {
      bg: 'bg-gray-900',
      modal: 'bg-gray-800',
      text: 'text-gray-100',
      textSecondary: 'text-gray-300',
      border: 'border-gray-700',
      input: 'bg-gray-700 border-gray-600 text-gray-100',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-700 hover:bg-gray-600 text-gray-200',
      success: 'bg-green-900 border-green-700 text-green-100'
    },
    light: {
      bg: 'bg-gray-50',
      modal: 'bg-white',
      text: 'text-gray-900',
      textSecondary: 'text-gray-600',
      border: 'border-gray-300',
      input: 'bg-white border-gray-300 text-gray-900',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-200 hover:bg-gray-300 text-gray-700',
      success: 'bg-green-50 border-green-300 text-green-800'
    }
  };

  const currentTheme = darkMode ? theme.dark : theme.light;

  useEffect(() => {
    if (isOpen) {
      // Select all agents by default
      setSelectedAgents(new Set(agents.map(a => a.ID)));
    }
  }, [isOpen, agents]);

  const handleSelectAll = () => {
    setSelectedAgents(new Set(agents.map(a => a.ID)));
  };

  const handleDeselectAll = () => {
    setSelectedAgents(new Set());
  };

  const handleToggleAgent = (agentId) => {
    const newSelected = new Set(selectedAgents);
    if (newSelected.has(agentId)) {
      newSelected.delete(agentId);
    } else {
      newSelected.add(agentId);
    }
    setSelectedAgents(newSelected);
  };

  const getFileExtension = () => {
    switch (format) {
      case 'json':
        return '.json';
      case 'yaml':
        return '.yaml';
      default:
        return '.md';
    }
  };

  const handleExport = async () => {
    if (selectedAgents.size === 0) return;
    
    setLoading(true);
    
    try {
      const response = await fetch('/api/agents/export-advanced', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          format: format,
          agent_ids: Array.from(selectedAgents),
          filename: filename
        })
      });
      
      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = filename + getFileExtension();
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        // Close modal after successful export
        handleClose();
      } else {
        throw new Error('Export failed');
      }
    } catch (error) {
      console.error('Export error:', error);
      // Could show error message to user
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setSelectedAgents(new Set());
    setFormat('markdown');
    setFilename('agents');
    setLoading(false);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className={`${currentTheme.modal} rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] overflow-hidden`}>
        {/* Header */}
        <div className={`flex items-center justify-between p-6 ${currentTheme.border} border-b`}>
          <h2 className={`text-xl font-bold ${currentTheme.text}`}>
            {t('agents.export.title')}
          </h2>
          <button
            onClick={handleClose}
            className={`p-2 rounded-lg ${currentTheme.buttonSecondary}`}
          >
            <X size={20} />
          </button>
        </div>

        <div className="overflow-y-auto max-h-[calc(90vh-140px)]">
          <div className="p-6 space-y-6">
            {/* Agent Selection */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className={`text-lg font-semibold ${currentTheme.text}`}>
                  {t('agents.export.selectAgents')}
                </h3>
                <div className="flex space-x-2">
                  <button
                    onClick={handleSelectAll}
                    className={`px-3 py-1 text-sm rounded ${currentTheme.buttonSecondary}`}
                  >
                    {t('agents.export.selectAll')}
                  </button>
                  <button
                    onClick={handleDeselectAll}
                    className={`px-3 py-1 text-sm rounded ${currentTheme.buttonSecondary}`}
                  >
                    {t('agents.export.deselectAll')}
                  </button>
                </div>
              </div>

              <div className="space-y-2 max-h-64 overflow-y-auto">
                {agents.map((agent) => (
                  <div
                    key={agent.ID}
                    className={`flex items-center space-x-3 p-3 rounded border ${currentTheme.border} ${currentTheme.modal} cursor-pointer hover:bg-opacity-50`}
                    onClick={() => handleToggleAgent(agent.ID)}
                  >
                    {selectedAgents.has(agent.ID) ? (
                      <CheckSquare size={20} className="text-blue-600" />
                    ) : (
                      <Square size={20} className={currentTheme.textSecondary} />
                    )}
                    <div className="flex-1">
                      <h4 className={`font-medium ${currentTheme.text}`}>{agent.Title}</h4>
                      {agent.Role && (
                        <p className={`text-sm ${currentTheme.textSecondary}`}>{agent.Role}</p>
                      )}
                      {agent.Skills && agent.Skills.length > 0 && (
                        <div className="flex flex-wrap gap-1 mt-1">
                          {agent.Skills.slice(0, 3).map((skill, index) => (
                            <span key={index} className={`px-2 py-0.5 text-xs rounded ${currentTheme.buttonSecondary}`}>
                              {skill}
                            </span>
                          ))}
                          {agent.Skills.length > 3 && (
                            <span className={`px-2 py-0.5 text-xs ${currentTheme.textSecondary}`}>
                              +{agent.Skills.length - 3}
                            </span>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>

              <div className={`text-sm ${currentTheme.textSecondary}`}>
                {selectedAgents.size} / {agents.length} {t('agents.export.selectedAgents')}
              </div>
            </div>

            {/* Export Options */}
            <div className="space-y-4">
              <h3 className={`text-lg font-semibold ${currentTheme.text}`}>
                {t('agents.export.format')}
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                {Object.entries({
                  markdown: t('agents.export.formats.markdown'),
                  json: t('agents.export.formats.json'),
                  yaml: t('agents.export.formats.yaml')
                }).map(([formatKey, label]) => (
                  <label key={formatKey} className="flex items-center space-x-3 cursor-pointer">
                    <input
                      type="radio"
                      name="format"
                      value={formatKey}
                      checked={format === formatKey}
                      onChange={(e) => setFormat(e.target.value)}
                      className="w-4 h-4"
                    />
                    <span className={currentTheme.text}>{label}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Filename */}
            <div className="space-y-2">
              <label className={`block text-sm font-medium ${currentTheme.text}`}>
                {t('agents.export.filename')}
              </label>
              <div className="flex items-center space-x-2">
                <input
                  type="text"
                  value={filename}
                  onChange={(e) => setFilename(e.target.value)}
                  className={`flex-1 px-3 py-2 rounded-lg border ${currentTheme.input}`}
                  placeholder="agents"
                />
                <span className={`px-3 py-2 rounded-lg ${currentTheme.buttonSecondary} text-sm`}>
                  {getFileExtension()}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className={`flex justify-end space-x-3 p-6 ${currentTheme.border} border-t`}>
          <button
            onClick={handleClose}
            className={`px-4 py-2 rounded-lg ${currentTheme.buttonSecondary}`}
            disabled={loading}
          >
            {t('ideas.cancel')}
          </button>
          
          <button
            onClick={handleExport}
            disabled={selectedAgents.size === 0 || loading || !filename.trim()}
            className={`flex items-center space-x-2 px-4 py-2 rounded-lg ${currentTheme.button} disabled:opacity-50`}
          >
            {loading ? (
              <Loader size={16} className="animate-spin" />
            ) : (
              <Download size={16} />
            )}
            <span>{t('agents.export.download')}</span>
          </button>
        </div>
      </div>
    </div>
  );
};

export default ExportAgentsModal;

/// frontend/src/components/ImportAgentsModal.jsx ///
import React, { useState, useRef } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  X, 
  Upload, 
  FileText, 
  AlertCircle, 
  CheckCircle, 
  Loader,
  AlertTriangle
} from 'lucide-react';

const ImportAgentsModal = ({ isOpen, onClose, onImport, darkMode }) => {
  const { t } = useTranslation();
  const fileInputRef = useRef(null);
  
  const [content, setContent] = useState('');
  const [mode, setMode] = useState('upload'); // 'upload' or 'paste'
  const [options, setOptions] = useState({
    merge: false,
    validate: true
  });
  const [previewData, setPreviewData] = useState(null);
  const [errors, setErrors] = useState([]);
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState('input'); // 'input', 'preview', 'importing'
  
  const theme = {
    dark: {
      bg: 'bg-gray-900',
      modal: 'bg-gray-800',
      text: 'text-gray-100',
      textSecondary: 'text-gray-300',
      border: 'border-gray-700',
      input: 'bg-gray-700 border-gray-600 text-gray-100',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-700 hover:bg-gray-600 text-gray-200',
      success: 'bg-green-900 border-green-700 text-green-100',
      error: 'bg-red-900 border-red-700 text-red-100',
      warning: 'bg-yellow-900 border-yellow-700 text-yellow-100'
    },
    light: {
      bg: 'bg-gray-50',
      modal: 'bg-white',
      text: 'text-gray-900',
      textSecondary: 'text-gray-600',
      border: 'border-gray-300',
      input: 'bg-white border-gray-300 text-gray-900',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-200 hover:bg-gray-300 text-gray-700',
      success: 'bg-green-50 border-green-300 text-green-800',
      error: 'bg-red-50 border-red-300 text-red-800',
      warning: 'bg-yellow-50 border-yellow-300 text-yellow-800'
    }
  };

  const currentTheme = darkMode ? theme.dark : theme.light;

  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setContent(e.target.result);
      };
      reader.readAsText(file);
    }
  };

  const validateContent = async () => {
    if (!content.trim()) return;
    
    setLoading(true);
    setErrors([]);
    
    try {
      const response = await fetch('/api/agents/validate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ content: content.trim() })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        setPreviewData(data);
        setErrors(data.errors || []);
        setStep('preview');
      } else {
        setErrors([{ type: 'error', message: data.error || 'Validation failed' }]);
      }
    } catch (error) {
      setErrors([{ type: 'error', message: 'Failed to validate content' }]);
    } finally {
      setLoading(false);
    }
  };

  const handleImport = async () => {
    if (!content.trim()) return;
    
    // Confirm replacement if not merging
    if (!options.merge) {
      if (!window.confirm(t('agents.import.confirmReplace'))) {
        return;
      }
    }
    
    setLoading(true);
    setStep('importing');
    
    try {
      const response = await fetch('/api/agents/import', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          content: content.trim(),
          merge: options.merge,
          validate: options.validate
        })
      });
      
      const data = await response.json();
      
      if (response.ok && data.success) {
        // Success - close modal and refresh agents list
        onImport(data);
        handleClose();
      } else {
        // Show errors
        setErrors(data.errors || [{ type: 'error', message: data.message || 'Import failed' }]);
        setStep('preview');
      }
    } catch (error) {
      setErrors([{ type: 'error', message: 'Failed to import agents' }]);
      setStep('preview');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setContent('');
    setPreviewData(null);
    setErrors([]);
    setStep('input');
    setLoading(false);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className={`${currentTheme.modal} rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-hidden`}>
        {/* Header */}
        <div className={`flex items-center justify-between p-6 ${currentTheme.border} border-b`}>
          <h2 className={`text-xl font-bold ${currentTheme.text}`}>
            {t('agents.import.title')}
          </h2>
          <button
            onClick={handleClose}
            className={`p-2 rounded-lg ${currentTheme.buttonSecondary}`}
          >
            <X size={20} />
          </button>
        </div>

        <div className="overflow-y-auto max-h-[calc(90vh-140px)]">
          {step === 'input' && (
            <div className="p-6 space-y-6">
              {/* Mode Selection */}
              <div className="flex space-x-4">
                <button
                  onClick={() => setMode('upload')}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg ${
                    mode === 'upload' ? currentTheme.button : currentTheme.buttonSecondary
                  }`}
                >
                  <Upload size={20} />
                  <span>{t('agents.import.upload')}</span>
                </button>
                <button
                  onClick={() => setMode('paste')}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg ${
                    mode === 'paste' ? currentTheme.button : currentTheme.buttonSecondary
                  }`}
                >
                  <FileText size={20} />
                  <span>{t('agents.import.paste')}</span>
                </button>
              </div>

              {/* File Upload */}
              {mode === 'upload' && (
                <div className="space-y-4">
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept=".md,.markdown,.txt"
                    onChange={handleFileSelect}
                    className="hidden"
                  />
                  <button
                    onClick={() => fileInputRef.current?.click()}
                    className={`w-full p-8 border-2 border-dashed ${currentTheme.border} rounded-lg hover:bg-opacity-50 transition-colors`}
                  >
                    <Upload size={48} className={`mx-auto mb-4 ${currentTheme.textSecondary}`} />
                    <p className={currentTheme.text}>
                      {t('agents.import.upload')}
                    </p>
                    <p className={`text-sm ${currentTheme.textSecondary} mt-2`}>
                      {t('agents.import.supportedFormats')}
                    </p>
                  </button>
                </div>
              )}

              {/* Paste Content */}
              {mode === 'paste' && (
                <div className="space-y-4">
                  <label className={`block text-sm font-medium ${currentTheme.text}`}>
                    {t('agents.import.content')}
                  </label>
                  <textarea
                    value={content}
                    onChange={(e) => setContent(e.target.value)}
                    placeholder="# Agents\n\n## Agent 1: Title\n- Role: ...\n- Skills: ...\n"
                    className={`w-full h-64 px-3 py-2 rounded-lg border ${currentTheme.input} resize-none`}
                  />
                </div>
              )}

              {/* Content Preview */}
              {content && (
                <div className="space-y-4">
                  <label className={`block text-sm font-medium ${currentTheme.text}`}>
                    {t('agents.import.preview')}
                  </label>
                  <div className={`p-4 rounded-lg border ${currentTheme.border} ${currentTheme.input} max-h-32 overflow-y-auto`}>
                    <pre className={`text-sm ${currentTheme.textSecondary}`}>
                      {content.substring(0, 500)}
                      {content.length > 500 && '...'}
                    </pre>
                  </div>
                </div>
              )}

              {/* Options */}
              <div className="space-y-4">
                <h3 className={`text-lg font-semibold ${currentTheme.text}`}>
                  {t('agents.import.options')}
                </h3>
                <div className="space-y-3">
                  <label className="flex items-center space-x-3">
                    <input
                      type="radio"
                      name="importMode"
                      checked={options.merge}
                      onChange={() => setOptions(prev => ({ ...prev, merge: true }))}
                      className="w-4 h-4"
                    />
                    <span className={currentTheme.text}>{t('agents.import.merge')}</span>
                  </label>
                  <label className="flex items-center space-x-3">
                    <input
                      type="radio"
                      name="importMode"
                      checked={!options.merge}
                      onChange={() => setOptions(prev => ({ ...prev, merge: false }))}
                      className="w-4 h-4"
                    />
                    <span className={currentTheme.text}>{t('agents.import.replace')}</span>
                  </label>
                  <label className="flex items-center space-x-3">
                    <input
                      type="checkbox"
                      checked={options.validate}
                      onChange={(e) => setOptions(prev => ({ ...prev, validate: e.target.checked }))}
                      className="w-4 h-4"
                    />
                    <span className={currentTheme.text}>{t('agents.import.validate')}</span>
                  </label>
                </div>
              </div>
            </div>
          )}

          {step === 'preview' && previewData && (
            <div className="p-6 space-y-6">
              {/* Validation Results */}
              <div className="space-y-4">
                <div className={`flex items-center space-x-2 p-4 rounded-lg ${
                  previewData.valid ? currentTheme.success : currentTheme.error
                }`}>
                  {previewData.valid ? (
                    <CheckCircle size={20} />
                  ) : (
                    <AlertCircle size={20} />
                  )}
                  <span className="font-medium">
                    {previewData.valid ? t('agents.validation.valid') : t('agents.validation.invalid')}
                  </span>
                  <span>
                    {previewData.agents_found} {t('agents.import.agentsFound')}
                  </span>
                </div>

                {/* Errors */}
                {errors.length > 0 && (
                  <div className="space-y-2">
                    <h4 className={`font-semibold ${currentTheme.text}`}>
                      {t('agents.import.errors')} ({errors.length})
                    </h4>
                    <div className="space-y-2 max-h-40 overflow-y-auto">
                      {errors.map((error, index) => (
                        <div key={index} className={`flex items-start space-x-2 p-3 rounded ${currentTheme.error}`}>
                          <AlertTriangle size={16} className="mt-0.5 flex-shrink-0" />
                          <div>
                            <p className="font-medium">{error.section || 'General'}</p>
                            <p className="text-sm">{error.message}</p>
                            {error.line && (
                              <p className="text-xs opacity-75">Line {error.line}</p>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Agents Preview */}
                {previewData.agents && previewData.agents.length > 0 && (
                  <div className="space-y-2">
                    <h4 className={`font-semibold ${currentTheme.text}`}>
                      {t('agents.import.preview')} ({previewData.agents.length})
                    </h4>
                    <div className="space-y-2 max-h-60 overflow-y-auto">
                      {previewData.agents.map((agent, index) => (
                        <div key={index} className={`p-3 rounded border ${currentTheme.border} ${currentTheme.modal}`}>
                          <h5 className={`font-medium ${currentTheme.text}`}>{agent.Title}</h5>
                          {agent.Role && (
                            <p className={`text-sm ${currentTheme.textSecondary}`}>{agent.Role}</p>
                          )}
                          {agent.Skills && agent.Skills.length > 0 && (
                            <div className="flex flex-wrap gap-1 mt-2">
                              {agent.Skills.slice(0, 3).map((skill, skillIndex) => (
                                <span key={skillIndex} className={`px-2 py-1 text-xs rounded ${currentTheme.buttonSecondary}`}>
                                  {skill}
                                </span>
                              ))}
                              {agent.Skills.length > 3 && (
                                <span className={`px-2 py-1 text-xs rounded ${currentTheme.textSecondary}`}>
                                  +{agent.Skills.length - 3} more
                                </span>
                              )}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {step === 'importing' && (
            <div className="p-12 text-center">
              <Loader size={48} className={`mx-auto mb-4 animate-spin ${currentTheme.text}`} />
              <p className={`text-lg ${currentTheme.text}`}>
                {t('agents.import.importing')}
              </p>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className={`flex justify-end space-x-3 p-6 ${currentTheme.border} border-t`}>
          <button
            onClick={handleClose}
            className={`px-4 py-2 rounded-lg ${currentTheme.buttonSecondary}`}
            disabled={loading}
          >
            {t('ideas.cancel')}
          </button>
          
          {step === 'input' && (
            <button
              onClick={validateContent}
              disabled={!content.trim() || loading}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg ${currentTheme.button} disabled:opacity-50`}
            >
              {loading && <Loader size={16} className="animate-spin" />}
              <span>{t('agents.import.validate')}</span>
            </button>
          )}
          
          {step === 'preview' && (
            <button
              onClick={handleImport}
              disabled={loading || (options.validate && errors.length > 0)}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg ${currentTheme.button} disabled:opacity-50`}
            >
              {loading && <Loader size={16} className="animate-spin" />}
              <span>{t('agents.import.title')}</span>
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default ImportAgentsModal;

/// frontend/src/components/LanguageSelector.jsx ///
import React from 'react';
import { useTranslation } from 'react-i18next';
import { Globe } from 'lucide-react';

const LanguageSelector = ({ currentTheme }) => {
  const { i18n } = useTranslation();

  const languages = [
    { code: 'pt-BR', name: 'Portugu√™s', flag: 'üáßüá∑' },
    { code: 'en-US', name: 'English', flag: 'üá∫üá∏' }
  ];

  const handleLanguageChange = (langCode) => {
    i18n.changeLanguage(langCode);
  };

  return (
    <div className="relative group">
      <button
        className={`flex items-center gap-2 px-3 py-2 rounded-lg ${currentTheme.buttonSecondary} transition-colors`}
      >
        <Globe size={16} />
        <span className="text-sm">
          {languages.find(lang => lang.code === i18n.language)?.flag || 'üåç'}
        </span>
      </button>
      
      <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
        {languages.map((language) => (
          <button
            key={language.code}
            onClick={() => handleLanguageChange(language.code)}
            className={`w-full flex items-center gap-3 px-4 py-3 text-left hover:bg-gray-100 dark:hover:bg-gray-700 first:rounded-t-lg last:rounded-b-lg transition-colors ${
              i18n.language === language.code ? 'bg-blue-50 dark:bg-blue-900 text-blue-600 dark:text-blue-400' : 'text-gray-700 dark:text-gray-300'
            }`}
          >
            <span className="text-lg">{language.flag}</span>
            <span className="text-sm font-medium">{language.name}</span>
          </button>
        ))}
      </div>
    </div>
  );
};

export default LanguageSelector;

/// frontend/src/components/ValidationAgentsModal.jsx ///
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  X, 
  FileText, 
  AlertCircle, 
  CheckCircle, 
  Loader,
  AlertTriangle
} from 'lucide-react';

const ValidationAgentsModal = ({ isOpen, onClose, darkMode }) => {
  const { t } = useTranslation();
  
  const [content, setContent] = useState('');
  const [validationResult, setValidationResult] = useState(null);
  const [loading, setLoading] = useState(false);
  
  const theme = {
    dark: {
      bg: 'bg-gray-900',
      modal: 'bg-gray-800',
      text: 'text-gray-100',
      textSecondary: 'text-gray-300',
      border: 'border-gray-700',
      input: 'bg-gray-700 border-gray-600 text-gray-100',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-700 hover:bg-gray-600 text-gray-200',
      success: 'bg-green-900 border-green-700 text-green-100',
      error: 'bg-red-900 border-red-700 text-red-100',
      warning: 'bg-yellow-900 border-yellow-700 text-yellow-100'
    },
    light: {
      bg: 'bg-gray-50',
      modal: 'bg-white',
      text: 'text-gray-900',
      textSecondary: 'text-gray-600',
      border: 'border-gray-300',
      input: 'bg-white border-gray-300 text-gray-900',
      button: 'bg-blue-600 hover:bg-blue-700 text-white',
      buttonSecondary: 'bg-gray-200 hover:bg-gray-300 text-gray-700',
      success: 'bg-green-50 border-green-300 text-green-800',
      error: 'bg-red-50 border-red-300 text-red-800',
      warning: 'bg-yellow-50 border-yellow-300 text-yellow-800'
    }
  };

  const currentTheme = darkMode ? theme.dark : theme.light;

  const handleValidate = async () => {
    if (!content.trim()) return;
    
    setLoading(true);
    setValidationResult(null);
    
    try {
      const response = await fetch('/api/agents/validate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ content: content.trim() })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        setValidationResult(data);
      } else {
        setValidationResult({
          valid: false,
          agents_found: 0,
          errors: [{ type: 'error', message: data.error || 'Validation failed' }],
          error_count: 1
        });
      }
    } catch (error) {
      setValidationResult({
        valid: false,
        agents_found: 0,
        errors: [{ type: 'error', message: 'Failed to validate content' }],
        error_count: 1
      });
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setContent('');
    setValidationResult(null);
    setLoading(false);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className={`${currentTheme.modal} rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-hidden`}>
        {/* Header */}
        <div className={`flex items-center justify-between p-6 ${currentTheme.border} border-b`}>
          <h2 className={`text-xl font-bold ${currentTheme.text}`}>
            {t('agents.validation.title')}
          </h2>
          <button
            onClick={handleClose}
            className={`p-2 rounded-lg ${currentTheme.buttonSecondary}`}
          >
            <X size={20} />
          </button>
        </div>

        <div className="overflow-y-auto max-h-[calc(90vh-140px)]">
          <div className="p-6 space-y-6">
            {/* Content Input */}
            <div className="space-y-4">
              <label className={`block text-sm font-medium ${currentTheme.text}`}>
                {t('agents.validation.content')}
              </label>
              <textarea
                value={content}
                onChange={(e) => setContent(e.target.value)}
                placeholder="# Agents&#10;&#10;## Agent 1: Title&#10;- Role: ...&#10;- Skills: ...&#10;"
                className={`w-full h-64 px-3 py-2 rounded-lg border ${currentTheme.input} resize-none font-mono text-sm`}
              />
            </div>

            {/* Validation Results */}
            {loading && (
              <div className="text-center py-8">
                <Loader size={48} className={`mx-auto mb-4 animate-spin ${currentTheme.text}`} />
                <p className={`text-lg ${currentTheme.text}`}>
                  {t('agents.validation.validating')}
                </p>
              </div>
            )}

            {validationResult && !loading && (
              <div className="space-y-4">
                {/* Summary */}
                <div className={`flex items-center space-x-2 p-4 rounded-lg ${
                  validationResult.valid ? currentTheme.success : currentTheme.error
                }`}>
                  {validationResult.valid ? (
                    <CheckCircle size={20} />
                  ) : (
                    <AlertCircle size={20} />
                  )}
                  <div className="flex-1">
                    <span className="font-medium">
                      {validationResult.valid ? t('agents.validation.valid') : t('agents.validation.invalid')}
                    </span>
                    <div className="text-sm mt-1">
                      {t('agents.validation.summary')}: {validationResult.agents_found} {t('agents.import.agentsFound')}
                      {validationResult.error_count > 0 && (
                        <span>, {validationResult.error_count} {t('agents.validation.errors')}</span>
                      )}
                    </div>
                  </div>
                </div>

                {/* Errors */}
                {validationResult.errors && validationResult.errors.length > 0 && (
                  <div className="space-y-2">
                    <h4 className={`font-semibold ${currentTheme.text}`}>
                      {t('agents.validation.errors')} ({validationResult.errors.length})
                    </h4>
                    <div className="space-y-2 max-h-60 overflow-y-auto">
                      {validationResult.errors.map((error, index) => (
                        <div key={index} className={`flex items-start space-x-2 p-3 rounded ${currentTheme.error}`}>
                          <AlertTriangle size={16} className="mt-0.5 flex-shrink-0" />
                          <div>
                            <p className="font-medium">{error.section || 'General'}</p>
                            <p className="text-sm">{error.message}</p>
                            {error.line && (
                              <p className="text-xs opacity-75">Line {error.line}</p>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Valid Agents Preview */}
                {validationResult.agents && validationResult.agents.length > 0 && (
                  <div className="space-y-2">
                    <h4 className={`font-semibold ${currentTheme.text}`}>
                      Valid Agents ({validationResult.agents.length})
                    </h4>
                    <div className="space-y-2 max-h-60 overflow-y-auto">
                      {validationResult.agents.map((agent, index) => (
                        <div key={index} className={`p-3 rounded border ${currentTheme.border} ${currentTheme.modal}`}>
                          <h5 className={`font-medium ${currentTheme.text}`}>{agent.Title}</h5>
                          {agent.Role && (
                            <p className={`text-sm ${currentTheme.textSecondary}`}>{agent.Role}</p>
                          )}
                          {agent.Skills && agent.Skills.length > 0 && (
                            <div className="flex flex-wrap gap-1 mt-2">
                              {agent.Skills.slice(0, 5).map((skill, skillIndex) => (
                                <span key={skillIndex} className={`px-2 py-1 text-xs rounded ${currentTheme.buttonSecondary}`}>
                                  {skill}
                                </span>
                              ))}
                              {agent.Skills.length > 5 && (
                                <span className={`px-2 py-1 text-xs rounded ${currentTheme.textSecondary}`}>
                                  +{agent.Skills.length - 5} more
                                </span>
                              )}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Footer */}
        <div className={`flex justify-end space-x-3 p-6 ${currentTheme.border} border-t`}>
          <button
            onClick={handleClose}
            className={`px-4 py-2 rounded-lg ${currentTheme.buttonSecondary}`}
            disabled={loading}
          >
            {t('ideas.cancel')}
          </button>
          
          <button
            onClick={handleValidate}
            disabled={!content.trim() || loading}
            className={`flex items-center space-x-2 px-4 py-2 rounded-lg ${currentTheme.button} disabled:opacity-50`}
          >
            {loading ? (
              <Loader size={16} className="animate-spin" />
            ) : (
              <FileText size={16} />
            )}
            <span>{t('agents.validation.validate')}</span>
          </button>
        </div>
      </div>
    </div>
  );
};

export default ValidationAgentsModal;

/// frontend/src/i18n/index.js ///
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';

// Importar as tradu√ß√µes
import ptBR from './locales/pt-BR.json';
import enUS from './locales/en-US.json';

const resources = {
  'pt-BR': {
    translation: ptBR
  },
  'en-US': {
    translation: enUS
  }
};

i18n
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    lng: 'pt-BR', // idioma padr√£o
    fallbackLng: 'pt-BR',
    
    interpolation: {
      escapeValue: false, // React j√° faz escape
    },
    
    detection: {
      order: ['localStorage', 'navigator', 'htmlTag'],
      caches: ['localStorage'],
    }
  });

export default i18n;

/// frontend/src/i18n/locales/en-US-backup.json ///
{
  "header": {
    "title": "Prompt Crafter",
    "subtitle": "Transform your raw ideas into structured and professional prompts",
    "debugMode": "Development mode",
    "baseUrl": "Base URL",
    "status": "Status"
  },
  "nav": {
    "promptCrafter": "Prompt Crafter",
    "agents": "Agents"
  },
  "theme": {
    "light": "Light theme",
    "dark": "Dark theme"
  },
  "agents": {
    "title": "Agents",
    "new": "New Agent",
    "edit": "Edit Agent",
    "generateSquad": "Generate Squad",
    "search": "Search agents...",
    "all": "All",
    "export": "Export AGENTS.md",
    "empty": {
      "title": "No agents found",
      "description": "Start by creating your first agent or generating a complete squad."
    },
    "createFirst": "Create First Agent",
    "confirmDelete": "Are you sure you want to delete this agent?",
    "backToList": "Back to list",
    "notFound": "Agent not found",
    "form": {
      "basic": "Basic Information",
      "title": "Title",
      "titlePlaceholder": "Ex: Python Backend Developer",
      "role": "Role",
      "rolePlaceholder": "Ex: Implement scalable REST APIs",
      "skills": "Skills",
      "skillPlaceholder": "Ex: Python, FastAPI, PostgreSQL",
      "restrictions": "Restrictions",
      "restrictionPlaceholder": "Ex: Avoid Java, use only async code",
      "promptExample": "Prompt Example",
      "promptExamplePlaceholder": "Describe how this agent should be used in prompts..."
    },
    "generate": {
      "title": "Generate Agent Squad",
      "requirements": "Project Requirements",
      "placeholder": "Describe the project you want to develop. Ex: 'I want to create a REST API in Python with FastAPI, PostgreSQL database, automated tests and Docker deployment. Avoid Java.'",
      "result": "Generated Squad"
    }
  },
  "connection": {
    "connected": "Connected to Go Server",
    "offline": "Go Server Offline",
    "offlineProduction": "Offline Mode",
    "checking": "Checking connection..."
  },
  "alerts": {
    "offlineTitle": "Offline Mode:",
    "offlineDev": "Go server is not responding. Make sure to run \"go run .\" or \"make run\"",
    "offlineProduction": "Running in demo mode. Configure APIs for full functionality.",
    "serverInfo": "Server Info"
  },
  "input": {
    "title": "Add Ideas",
    "placeholder": "Paste your notes, raw ideas or unorganized thoughts here...",
    "addButton": "Add (Ctrl+Enter)",
    "emptyState": "Add your first ideas on the side ‚Üê",
    "expand": "Expand input",
    "collapse": "Minimize input",
    "minimized": "Input form minimized"
  },
  "ideas": {
    "title": "Your Ideas",
    "edit": "Edit",
    "delete": "Delete", 
    "save": "Save",
    "cancel": "Cancel",
    "generateButton": "Help me, engineer?!",
    "generating": "Generating...",
    "clearAll": "Clear All",
    "clearConfirm": "Are you sure? This will delete all your ideas and generated prompt.",
    "cleared": "Interface cleared! Ready to start."
  },
  "config": {
    "purpose": "Prompt Purpose",
    "purposeCode": "Code",
    "purposeImage": "Image",
    "purposeOthers": "Others", 
    "customPurpose": "Describe the prompt objective...",
    "maxLength": "Maximum Length",
    "characters": "characters"
  },
  "providers": {
    "claude": "Claude API",
    "openai": "OpenAI API",
    "deepseek": "DeepSeek API",
    "ollama": "Ollama Local",
    "demo": "Demo Mode",
    "defaultModel": "Default model"
  },
  "output": {
    "title": "Structured Prompt",
    "copy": "Copy",
    "copied": "Copied!",
    "characters": "Characters",
    "limit": "Limit",
    "emptyTitle": "Your structured prompt will appear here",
    "emptySubtitle": "Add ideas and click \"Help me, engineer?!\"",
    "expand": "Expand section",
    "collapse": "Minimize section",
    "ready": "Prompt ready",
    "minimized": "Output section minimized"
  },
  "demo": {
    "context": "Context",
    "contextDesc": "You are an assistant specialized in **{{purpose}}** with deep knowledge in the area.",
    "ideasTitle": "Organized User Ideas:",
    "instructions": "Specific Instructions",
    "instructionsList": [
      "Carefully analyze all ideas presented above",
      "Identify the main objective and secondary objectives",
      "Provide a structured and well-organized response",
      "Keep focus on the defined purpose: **{{purpose}}**",
      "Use practical examples when appropriate",
      "Be specific and actionable"
    ],
    "responseFormat": "Expected Response Format",
    "responseSteps": [
      "**Initial Analysis**: Summary of what was requested",
      "**Development**: Detailed response following the ideas",
      "**Conclusion**: Next steps or final considerations"
    ],
    "technicalConfig": "Technical Settings",
    "maxChars": "Maximum characters",
    "purpose": "Purpose",
    "totalIdeas": "Total ideas processed",
    "mode": "Mode",
    "modeConnected": "Demo (Go server connected)",
    "modeOffline": "Demo (offline mode)",
    "footer": "Prompt automatically generated by Prompt Crafter v1.0",
    "footerConnected": "Configure an API key for full functionality",
    "footerOffline": "Go server offline - using demo mode"
  },
  "errors": {
    "generateTitle": "Error Generating Prompt",
    "errorLabel": "Error:",
    "detailsLabel": "Details:",
    "connectionFailed": "Could not connect to the selected API.",
    "checksTitle": "Checks:",
    "serverStatus": "Server status:",
    "currentMode": "Current mode:",
    "selectedProvider": "Selected provider:",
    "baseUrl": "Base URL:",
    "solutionsTitle": "Solutions:",
    "solutionDev": "If in development: Make sure the Go server is running on port 8080",
    "solutionProd": "If in production: Check if APIs are configured correctly",
    "solutionDemo": "Try using demo mode as an alternative",
    "goCommand": "Command to start Go server:"
  },
  "api": {
    "sendingToClaude": "Sending to Claude API...",
    "sendingToOpenAI": "Sending to OpenAI API...",
    "sendingToDeepSeek": "Sending to DeepSeek API...",
    "sendingToOllama": "Sending to Ollama...",
    "responseReceived": "Response received",
    "emptyResponse": "Empty response from server",
    "httpError": "HTTP Error"
  },
  "loading": "Loading",
  "saving": "Saving",
  "generating": "Generating",
  "cancel": "Cancel",
  "create": "Create",
  "update": "Update",
  "save": "Save",
  "edit": "Edit",
  "delete": "Delete",
  "view": "View",
  "export": "Export",
  "copy": "Copy",
  "copied": "Copied",
  "generate": "Generate"
}
  "providers": {
    "claude": "Claude API",
    "openai": "OpenAI API", 
    "deepseek": "DeepSeek API",
    "ollama": "Ollama Local",
    "demo": "Demo Mode",
    "defaultModel": "Default model"
  },
  "output": {
    "title": "Structured Prompt",
    "copy": "Copy",
    "copied": "Copied!",
    "characters": "Characters",
    "limit": "Limit",
    "emptyTitle": "Your structured prompt will appear here",
    "emptySubtitle": "Add ideas and click \"Help me, engineer?!\"",
    "expand": "Expand section",
    "collapse": "Minimize section",
    "ready": "Prompt ready",
    "minimized": "Output section minimized"
  },
  "demo": {
    "context": "Context",
    "contextDesc": "You are an assistant specialized in **{{purpose}}** with deep knowledge in the area.",
    "ideasTitle": "Organized User Ideas:",
    "instructions": "Specific Instructions",
    "instructionsList": [
      "Carefully analyze all ideas presented above",
      "Identify the main objective and secondary objectives",
      "Provide a structured and well-organized response",
      "Keep focus on the defined purpose: **{{purpose}}**",
      "Use practical examples when appropriate",
      "Be specific and actionable"
    ],
    "responseFormat": "Expected Response Format",
    "responseSteps": [
      "**Initial Analysis**: Summary of what was requested",
      "**Development**: Detailed response following the ideas",
      "**Conclusion**: Next steps or final considerations"
    ],
    "technicalConfig": "Technical Settings",
    "maxChars": "Maximum characters",
    "purpose": "Purpose",
    "totalIdeas": "Total ideas processed",
    "mode": "Mode",
    "modeConnected": "Demo (Go server connected)",
    "modeOffline": "Demo (offline mode)",
    "footer": "Prompt automatically generated by Prompt Crafter v1.0",
    "footerConnected": "Configure an API key for full functionality",
    "footerOffline": "Go server offline - using demo mode"
  },
  "errors": {
    "generateTitle": "Error Generating Prompt",
    "errorLabel": "Error:",
    "detailsLabel": "Details:",
    "connectionFailed": "Could not connect to the selected API.",
    "checksTitle": "Checks:",
    "serverStatus": "Server status:",
    "currentMode": "Current mode:",
    "selectedProvider": "Selected provider:",
    "baseUrl": "Base URL:",
    "solutionsTitle": "Solutions:",
    "solutionDev": "If in development: Make sure the Go server is running on port 8080",
    "solutionProd": "If in production: Check if APIs are configured correctly",
    "solutionDemo": "Try using demo mode as an alternative",
    "goCommand": "Command to start Go server:"
  },
  "api": {
    "sendingToClaude": "Sending to Claude API...",
    "sendingToOpenAI": "Sending to OpenAI API...",
    "sendingToDeepSeek": "Sending to DeepSeek API...",
    "sendingToOllama": "Sending to Ollama...",
    "responseReceived": "Response received",
    "emptyResponse": "Empty response from server",
    "httpError": "HTTP Error"
  }
}

/// frontend/src/i18n/locales/en-US.json ///
{
  "header": {
    "title": "Prompt Crafter",
    "subtitle": "Transform your raw ideas into structured and professional prompts",
    "debugMode": "Development mode",
    "baseUrl": "Base URL",
    "status": "Status"
  },
  "nav": {
    "promptCrafter": "Prompt Crafter",
    "agents": "Agents"
  },
  "theme": {
    "light": "Light theme",
    "dark": "Dark theme"
  },
  "agents": {
    "title": "Agents",
    "new": "New Agent",
    "edit": "Edit Agent",
    "generateSquad": "Generate Squad",
    "search": "Search agents...",
    "all": "All",
    "exportButton": "Export AGENTS.md",
    "import": {
      "title": "Import AGENTS.md",
      "upload": "Upload File",
      "paste": "Paste Content",
      "content": "File Content",
      "preview": "Preview",
      "options": "Options",
      "merge": "Merge with existing agents",
      "replace": "Replace all agents",
      "validate": "Validate before importing",
      "parsing": "Parsing file...",
      "validating": "Validating agents...",
      "importing": "Importing agents...",
      "success": "Import completed successfully!",
      "errors": "Errors found:",
      "warnings": "Warnings:",
      "agentsFound": "agents found",
      "confirmReplace": "This will replace all existing agents. Continue?",
      "supportedFormats": "Supported formats: .md, .markdown, .txt"
    },
    "export": {
      "title": "Export Agents",
      "selectAgents": "Select Agents",
      "selectAll": "Select All",
      "deselectAll": "Deselect All",
      "format": "Format",
      "filename": "File Name",
      "download": "Download",
      "allAgents": "All Agents",
      "selectedAgents": "Selected Agents",
      "formats": {
        "markdown": "Markdown (.md)",
        "json": "JSON (.json)",
        "yaml": "YAML (.yaml)"
      }
    },
    "validation": {
      "title": "Validate AGENTS.md",
      "content": "Content to Validate",
      "validate": "Validate",
      "validating": "Validating...",
      "valid": "Valid file!",
      "invalid": "Invalid file",
      "errors": "Errors",
      "warnings": "Warnings",
      "summary": "Validation Summary"
    },
    "generate": {
      "title": "Generate Agent Squad",
      "requirements": "Project Requirements",
      "placeholder": "Describe the project you want to develop. Ex: 'I want to create a REST API in Python with FastAPI, PostgreSQL database, automated tests and Docker deployment. Avoid Java.'",
      "result": "Generated Squad"
    },
    "empty": {
      "title": "No agents found",
      "description": "Start by creating your first agent or generating a complete squad."
    },
    "createFirst": "Create First Agent",
    "confirmDelete": "Are you sure you want to delete this agent?",
    "backToList": "Back to list",
    "notFound": "Agent not found",
    "form": {
      "basic": "Basic Information",
      "title": "Title",
      "titlePlaceholder": "Ex: Python Backend Developer",
      "role": "Role",
      "rolePlaceholder": "Ex: Implement scalable REST APIs",
      "skills": "Skills",
      "skillPlaceholder": "Ex: Python, FastAPI, PostgreSQL",
      "restrictions": "Restrictions",
      "restrictionPlaceholder": "Ex: Avoid Java, use only async code",
      "promptExample": "Prompt Example",
      "promptExamplePlaceholder": "Describe how this agent should be used in prompts..."
    }
  },
  "connection": {
    "connected": "Connected to Go Server",
    "offline": "Go Server Offline",
    "offlineProduction": "Offline Mode",
    "checking": "Checking connection..."
  },
  "alerts": {
    "offlineTitle": "Offline Mode:",
    "offlineDev": "Go server is not responding. Make sure to run \"go run .\" or \"make run\"",
    "offlineProduction": "Running in demo mode. Configure APIs for full functionality.",
    "serverInfo": "Server Info"
  },
  "input": {
    "title": "Add Ideas",
    "placeholder": "Paste your notes, raw ideas or unorganized thoughts here...",
    "addButton": "Add (Ctrl+Enter)",
    "emptyState": "Add your first ideas on the side ‚Üê",
    "expand": "Expand input",
    "collapse": "Minimize input",
    "minimized": "Input form minimized"
  },
  "ideas": {
    "title": "Your Ideas",
    "edit": "Edit",
    "delete": "Delete", 
    "save": "Save",
    "cancel": "Cancel",
    "generateButton": "Help me, engineer?!",
    "generating": "Generating...",
    "clearAll": "Clear All",
    "clearConfirm": "Are you sure? This will delete all your ideas and generated prompt.",
    "cleared": "Interface cleared! Ready to start."
  },
  "config": {
    "purpose": "Prompt Purpose",
    "purposeCode": "Code",
    "purposeImage": "Image",
    "purposeOthers": "Others", 
    "customPurpose": "Describe the prompt objective...",
    "maxLength": "Maximum Length",
    "characters": "characters"
  },
  "providers": {
    "claude": "Claude API",
    "openai": "OpenAI API",
    "deepseek": "DeepSeek API",
    "ollama": "Ollama Local",
    "demo": "Demo Mode",
    "defaultModel": "Default model"
  },
  "output": {
    "title": "Structured Prompt",
    "copy": "Copy",
    "copied": "Copied!",
    "characters": "Characters",
    "limit": "Limit",
    "emptyTitle": "Your structured prompt will appear here",
    "emptySubtitle": "Add ideas and click \"Help me, engineer?!\"",
    "expand": "Expand section",
    "collapse": "Minimize section",
    "ready": "Prompt ready",
    "minimized": "Output section minimized"
  },
  "demo": {
    "context": "Context",
    "contextDesc": "You are an assistant specialized in **{{purpose}}** with deep knowledge in the area.",
    "ideasTitle": "Organized User Ideas:",
    "instructions": "Specific Instructions",
    "instructionsList": [
      "Carefully analyze all ideas presented above",
      "Identify the main objective and secondary objectives",
      "Provide a structured and well-organized response",
      "Keep focus on the defined purpose: **{{purpose}}**",
      "Use practical examples when appropriate",
      "Be specific and actionable"
    ],
    "responseFormat": "Expected Response Format",
    "responseSteps": [
      "**Initial Analysis**: Summary of what was requested",
      "**Development**: Detailed response following the ideas",
      "**Conclusion**: Next steps or final considerations"
    ],
    "technicalConfig": "Technical Settings",
    "maxChars": "Maximum characters",
    "purpose": "Purpose",
    "totalIdeas": "Total ideas processed",
    "mode": "Mode",
    "modeConnected": "Demo (Go server connected)",
    "modeOffline": "Demo (offline mode)",
    "footer": "Prompt automatically generated by Prompt Crafter v1.0",
    "footerConnected": "Configure an API key for full functionality",
    "footerOffline": "Go server offline - using demo mode"
  },
  "errors": {
    "generateTitle": "Error Generating Prompt",
    "errorLabel": "Error:",
    "detailsLabel": "Details:",
    "connectionFailed": "Could not connect to the selected API.",
    "checksTitle": "Checks:",
    "serverStatus": "Server status:",
    "currentMode": "Current mode:",
    "selectedProvider": "Selected provider:",
    "baseUrl": "Base URL:",
    "solutionsTitle": "Solutions:",
    "solutionDev": "If in development: Make sure the Go server is running on port 8080",
    "solutionProd": "If in production: Check if APIs are configured correctly",
    "solutionDemo": "Try using demo mode as an alternative",
    "goCommand": "Command to start Go server:"
  },
  "api": {
    "sendingToClaude": "Sending to Claude API...",
    "sendingToOpenAI": "Sending to OpenAI API...",
    "sendingToDeepSeek": "Sending to DeepSeek API...",
    "sendingToOllama": "Sending to Ollama...",
    "responseReceived": "Response received",
    "emptyResponse": "Empty response from server",
    "httpError": "HTTP Error"
  },
  "loading": "Loading",
  "saving": "Saving",
  "generating": "Generating",
  "cancel": "Cancel",
  "create": "Create",
  "update": "Update",
  "save": "Save",
  "edit": "Edit",
  "delete": "Delete",
  "view": "View",
  "export": "Export",
  "copy": "Copy",
  "copied": "Copied",
  "generate": "Generate"
}

/// frontend/src/i18n/locales/pt-BR.json ///
{
  "header": {
    "title": "Prompt Crafter",
    "subtitle": "Transforme suas ideias brutas em prompts estruturados e profissionais",
    "debugMode": "Modo desenvolvimento",
    "baseUrl": "Base URL",
    "status": "Status"
  },
  "nav": {
    "promptCrafter": "Gerador de Prompts",
    "agents": "Agentes"
  },
  "theme": {
    "light": "Tema claro",
    "dark": "Tema escuro"
  },
  "agents": {
    "title": "Agentes",
    "new": "Novo Agente",
    "edit": "Editar Agente",
    "generateSquad": "Gerar Squad",
    "search": "Buscar agentes...",
    "all": "Todos",
    "exportButton": "Exportar AGENTS.md",
    "empty": {
      "title": "Nenhum agente encontrado",
      "description": "Comece criando seu primeiro agente ou gerando um squad completo."
    },
    "createFirst": "Criar Primeiro Agente",
    "confirmDelete": "Tem certeza que deseja excluir este agente?",
    "backToList": "Voltar para lista",
    "notFound": "Agente n√£o encontrado",
    "form": {
      "basic": "Informa√ß√µes B√°sicas",
      "title": "T√≠tulo",
      "titlePlaceholder": "Ex: Desenvolvedor Backend Python",
      "role": "Fun√ß√£o",
      "rolePlaceholder": "Ex: Implementar APIs REST escal√°veis",
      "skills": "Habilidades",
      "skillPlaceholder": "Ex: Python, FastAPI, PostgreSQL",
      "restrictions": "Restri√ß√µes",
      "restrictionPlaceholder": "Ex: Evitar Java, usar apenas c√≥digo ass√≠ncrono",
      "promptExample": "Exemplo de Prompt",
      "promptExamplePlaceholder": "Descreva como este agente deve ser usado em prompts..."
    },
    "import": {
      "title": "Importar AGENTS.md",
      "upload": "Carregar Arquivo",
      "paste": "Colar Conte√∫do",
      "content": "Conte√∫do do Arquivo",
      "preview": "Pr√©-visualiza√ß√£o",
      "options": "Op√ß√µes",
      "merge": "Mesclar com agentes existentes",
      "replace": "Substituir todos os agentes",
      "validate": "Validar antes de importar",
      "parsing": "Analisando arquivo...",
      "validating": "Validando agentes...",
      "importing": "Importando agentes...",
      "success": "Importa√ß√£o conclu√≠da com sucesso!",
      "errors": "Erros encontrados:",
      "warnings": "Avisos:",
      "agentsFound": "agentes encontrados",
      "confirmReplace": "Isso substituir√° todos os agentes existentes. Continuar?",
      "supportedFormats": "Formatos suportados: .md, .markdown, .txt"
    },
    "export": {
      "title": "Exportar Agentes",
      "selectAgents": "Selecionar Agentes",
      "selectAll": "Selecionar Todos",
      "deselectAll": "Desmarcar Todos",
      "format": "Formato",
      "filename": "Nome do Arquivo",
      "download": "Baixar",
      "allAgents": "Todos os Agentes",
      "selectedAgents": "Agentes Selecionados",
      "formats": {
        "markdown": "Markdown (.md)",
        "json": "JSON (.json)",
        "yaml": "YAML (.yaml)"
      }
    },
    "validation": {
      "title": "Validar AGENTS.md",
      "content": "Conte√∫do para Validar",
      "validate": "Validar",
      "validating": "Validando...",
      "valid": "Arquivo v√°lido!",
      "invalid": "Arquivo inv√°lido",
      "errors": "Erros",
      "warnings": "Avisos",
      "summary": "Resumo da Valida√ß√£o"
    },
    "generate": {
      "title": "Gerar Squad de Agentes",
      "requirements": "Requisitos do Projeto",
      "placeholder": "Descreva o projeto que voc√™ quer desenvolver. Ex: 'Quero criar uma API REST em Python com FastAPI, banco PostgreSQL, testes automatizados e deploy com Docker. Evitar Java.'",
      "result": "Squad Gerado"
    }
  },
  "connection": {
    "connected": "Conectado ao Go Server",
    "offline": "Servidor Go Offline",
    "offlineProduction": "Modo Offline",
    "checking": "Verificando conex√£o..."
  },
  "alerts": {
    "offlineTitle": "Modo Offline:",
    "offlineDev": "Servidor Go n√£o est√° respondendo. Certifique-se de executar \"go run .\" ou \"make run\"",
    "offlineProduction": "Executando em modo demo. Configure APIs para funcionalidade completa.",
    "serverInfo": "Info do Servidor"
  },
  "input": {
    "title": "Adicionar Ideias",
    "placeholder": "Cole suas notas, ideias brutas ou pensamentos desorganizados aqui...",
    "addButton": "Incluir (Ctrl+Enter)",
    "emptyState": "Adicione suas primeiras ideias ao lado ‚Üê",
    "expand": "Expandir entrada",
    "collapse": "Minimizar entrada", 
    "minimized": "Formul√°rio de entrada minimizado"
  },
  "ideas": {
    "title": "Suas Ideias",
    "edit": "Editar",
    "delete": "Excluir",
    "save": "Salvar",
    "cancel": "Cancelar",
    "generateButton": "Me ajude, engenheiro?!",
    "generating": "Gerando...",
    "clearAll": "Limpar Tudo",
    "clearConfirm": "Tem certeza? Isso apagar√° todas as suas ideias e prompt gerado.",
    "cleared": "Interface limpa! Pronto para come√ßar."
  },
  "config": {
    "purpose": "Prop√≥sito do Prompt",
    "purposeCode": "C√≥digo",
    "purposeImage": "Imagem", 
    "purposeOthers": "Outros",
    "customPurpose": "Descreva o objetivo do prompt...",
    "maxLength": "Tamanho M√°ximo",
    "characters": "caracteres"
  },
  "providers": {
    "claude": "Claude API",
    "openai": "OpenAI API",
    "deepseek": "DeepSeek API",
    "ollama": "Ollama Local",
    "demo": "Modo Demo",
    "defaultModel": "Modelo padr√£o"
  },
  "output": {
    "title": "Prompt Estruturado",
    "copy": "Copiar",
    "copied": "Copiado!",
    "characters": "Caracteres",
    "limit": "Limite",
    "emptyTitle": "Seu prompt estruturado aparecer√° aqui",
    "emptySubtitle": "Adicione ideias e clique em \"Me ajude, engenheiro?!\"",
    "expand": "Expandir se√ß√£o",
    "collapse": "Minimizar se√ß√£o",
    "ready": "Prompt pronto",
    "minimized": "Se√ß√£o de output minimizada"
  },
  "demo": {
    "context": "Contexto",
    "contextDesc": "Voc√™ √© um assistente especializado em **{{purpose}}** com conhecimento profundo na √°rea.",
    "ideasTitle": "Ideias do Usu√°rio Organizadas:",
    "instructions": "Instru√ß√µes Espec√≠ficas",
    "instructionsList": [
      "Analise cuidadosamente todas as ideias apresentadas acima",
      "Identifique o objetivo principal e objetivos secund√°rios", 
      "Forne√ßa uma resposta estruturada e bem organizada",
      "Mantenha o foco no prop√≥sito definido: **{{purpose}}**",
      "Use exemplos pr√°ticos quando apropriado",
      "Seja espec√≠fico e action√°vel"
    ],
    "responseFormat": "Formato de Resposta Esperado",
    "responseSteps": [
      "**An√°lise Inicial**: Resumo do que foi solicitado",
      "**Desenvolvimento**: Resposta detalhada seguindo as ideias", 
      "**Conclus√£o**: Pr√≥ximos passos ou considera√ß√µes finais"
    ],
    "technicalConfig": "Configura√ß√µes T√©cnicas",
    "maxChars": "M√°ximo de caracteres",
    "purpose": "Prop√≥sito",
    "totalIdeas": "Total de ideias processadas",
    "mode": "Modo",
    "modeConnected": "Demo (servidor Go conectado)",
    "modeOffline": "Demo (modo offline)",
    "footer": "Prompt gerado automaticamente pelo Prompt Crafter v1.0",
    "footerConnected": "Configure uma API key para funcionalidade completa",
    "footerOffline": "Servidor Go offline - usando modo demo"
  },
  "errors": {
    "generateTitle": "Erro ao Gerar Prompt",
    "errorLabel": "Erro:",
    "detailsLabel": "Detalhes:",
    "connectionFailed": "N√£o foi poss√≠vel conectar com a API selecionada.",
    "checksTitle": "Verifica√ß√µes:",
    "serverStatus": "Status do servidor:",
    "currentMode": "Modo atual:",
    "selectedProvider": "Provider selecionado:",
    "baseUrl": "Base URL:",
    "solutionsTitle": "Solu√ß√µes:",
    "solutionDev": "Se em desenvolvimento: Certifique-se de que o servidor Go est√° rodando na porta 8080",
    "solutionProd": "Se em produ√ß√£o: Verifique se as APIs est√£o configuradas corretamente",
    "solutionDemo": "Tente usar o modo demo como alternativa",
    "goCommand": "Comando para iniciar servidor Go:"
  },
  "api": {
    "sendingToClaude": "Enviando para Claude API...",
    "sendingToOpenAI": "Enviando para OpenAI API...",
    "sendingToDeepSeek": "Enviando para DeepSeek API...",
    "sendingToOllama": "Enviando para Ollama...",
    "responseReceived": "Resposta recebida",
    "emptyResponse": "Resposta vazia do servidor",
    "httpError": "Erro HTTP"
  },
  "loading": "Carregando",
  "saving": "Salvando",
  "generating": "Gerando",
  "cancel": "Cancelar",
  "create": "Criar",
  "update": "Atualizar",
  "save": "Salvar",
  "edit": "Editar",
  "delete": "Excluir",
  "view": "Visualizar",
  "export": "Exportar",
  "copy": "Copiar",
  "copied": "Copiado",
  "generate": "Gerar"
}

/// frontend/src/index.css ///
::-webkit-scrollbar {
  width: 4px;
  height: 4px;
  background: #f1f1f1;
  border-radius: 4px;
  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.1);
}
::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.1);
}
::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 4px;
  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
}
::-webkit-scrollbar-thumb:hover {
  background: #555;
  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.3);
}
::-webkit-scrollbar-thumb:active {
  background: #333;
  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.4);
}
::-webkit-scrollbar-corner {
  background: #f1f1f1;
  border-radius: 4px;
  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.1);
}
::-webkit-scrollbar-button {
  background: #f1f1f1;
  border-radius: 4px;
  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.1);
}
::-webkit-scrollbar-button:hover {
  background: #888;
  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.slider::-webkit-slider-thumb {
  appearance: none;
  height: 20px;
  width: 20px;
  border-radius: 50%;
  background: #3b82f6;
  cursor: pointer;
}

.slider::-moz-range-thumb {
  height: 20px;
  width: 20px;
  border-radius: 50%;
  background: #3b82f6;
  cursor: pointer;
}

/// frontend/src/index.js ///
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import './index.css';
import './i18n';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);

/// grompt.go ///
// Package grompt provides an interface for modules that can be used with the grompt command-line tool.
package grompt

import "github.com/spf13/cobra"

// This file/package allows the grompt module to be used as a library.
// It defines the Grompt interface which can be implemented by any module
// that wants to be part of the grompt ecosystem.

type Grompt interface {
	// Alias returns the alias for the command.
	Alias() string
	// ShortDescription returns a brief description of the command.
	ShortDescription() string
	// LongDescription returns a detailed description of the command.
	LongDescription() string
	// Usage returns the usage string for the command.
	Usage() string
	// Examples returns a list of example usages for the command.
	Examples() []string
	// Active returns true if the command is active and should be executed.
	Active() bool
	// Module returns the name of the module.
	Module() string
	// Execute runs the command and returns an error if it fails.
	Execute() error
	// Command returns the cobra.Command associated with this module.
	Command() *cobra.Command
}

/// internal/services/agents/store.go ///
// Package agents provides functionality to manage and persist agents.
// It allows adding, updating, deleting, and retrieving agents,
// as well as converting them to a markdown format for documentation.
package agents

import (
	"encoding/json"
	"os"
	"sync"

	"github.com/rafa-mori/grompt/internal/services/squad"
)

// StoredAgent wraps squad.Agent with an ID for persistence
// and JSON encoding.
type StoredAgent struct {
	ID int `json:"id"`
	squad.Agent
}

// Store manages a slice of StoredAgent and persists to a JSON file.
type Store struct {
	mu     sync.Mutex
	agents []StoredAgent
	path   string
	nextID int
}

// NewStore creates a new Store and loads data from the given file if it exists.
func NewStore(path string) *Store {
	s := &Store{path: path}
	s.load()
	return s
}

// load reads agents from the store's file.
func (s *Store) load() {
	data, err := os.ReadFile(s.path)
	if err != nil {
		return
	}
	json.Unmarshal(data, &s.agents)
	for _, a := range s.agents {
		if a.ID >= s.nextID {
			s.nextID = a.ID + 1
		}
	}
}

// save writes agents to the store's file.
func (s *Store) save() error {
	data, err := json.MarshalIndent(s.agents, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(s.path, data, 0o644)
}

// All returns all stored agents.
func (s *Store) All() []StoredAgent {
	s.mu.Lock()
	defer s.mu.Unlock()
	res := make([]StoredAgent, len(s.agents))
	copy(res, s.agents)
	return res
}

// Add inserts a new agent into the store.
func (s *Store) Add(a squad.Agent) (StoredAgent, error) {
	s.mu.Lock()
	defer s.mu.Unlock()
	sa := StoredAgent{ID: s.nextID, Agent: a}
	s.nextID++
	s.agents = append(s.agents, sa)
	return sa, s.save()
}

// Update replaces an existing agent by ID.
func (s *Store) Update(id int, a squad.Agent) (StoredAgent, error) {
	s.mu.Lock()
	defer s.mu.Unlock()
	for i, ag := range s.agents {
		if ag.ID == id {
			s.agents[i].Agent = a
			err := s.save()
			return s.agents[i], err
		}
	}
	return StoredAgent{}, os.ErrNotExist
}

// Delete removes an agent by ID.
func (s *Store) Delete(id int) error {
	s.mu.Lock()
	defer s.mu.Unlock()
	for i, ag := range s.agents {
		if ag.ID == id {
			s.agents = append(s.agents[:i], s.agents[i+1:]...)
			return s.save()
		}
	}
	return os.ErrNotExist
}

// ToMarkdown converts stored agents to AGENTS.md format.
func (s *Store) ToMarkdown() string {
	agents := make([]squad.Agent, len(s.agents))
	for i, ag := range s.agents {
		agents[i] = ag.Agent
	}
	return squad.GenerateMarkdown(agents)
}

/// internal/services/server/handlers.go ///
package server

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/rafa-mori/grompt/internal/services/agents"
	ii "github.com/rafa-mori/grompt/internal/types"
)

type Handlers struct {
	config      *ii.Config
	claudeAPI   *ii.ClaudeAPI
	openaiAPI   *ii.OpenAIAPI
	deepseekAPI *ii.DeepSeekAPI
	chatGPTAPI  *ii.ChatGPTAPI
	ollamaAPI   *ii.OllamaAPI
	agentStore  *agents.Store
}

// Unified request structure
type UnifiedRequest struct {
	Prompt    string `json:"prompt"`
	MaxTokens int    `json:"max_tokens"`
	Model     string `json:"model"`
	Provider  string `json:"provider"`
}

type UnifiedResponse struct {
	Response string     `json:"response"`
	Provider string     `json:"provider"`
	Model    string     `json:"model"`
	Usage    *UsageInfo `json:"usage,omitempty"`
}

type UsageInfo struct {
	PromptTokens     int     `json:"prompt_tokens,omitempty"`
	CompletionTokens int     `json:"completion_tokens,omitempty"`
	TotalTokens      int     `json:"total_tokens,omitempty"`
	EstimatedCost    float64 `json:"estimated_cost,omitempty"`
}

func NewHandlers(cfg *ii.Config) *Handlers {
	return &Handlers{
		config:      cfg,
		claudeAPI:   ii.NewClaudeAPI(cfg.ClaudeAPIKey),
		openaiAPI:   ii.NewOpenAIAPI(cfg.OpenAIAPIKey),
		chatGPTAPI:  ii.NewChatGPTAPI(cfg.ChatGPTAPIKey),
		deepseekAPI: ii.NewDeepSeekAPI(cfg.DeepSeekAPIKey),
		ollamaAPI:   ii.NewOllamaAPI(cfg.OllamaEndpoint),
		agentStore:  agents.NewStore("agents.json"),
	}
}

func (h *Handlers) HandleConfig(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	config := h.config.GetAPIConfig()

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(config)
}

func (h *Handlers) HandleClaude(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req UnifiedRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	if h.config.ClaudeAPIKey == "" {
		http.Error(w, "Claude API Key not configured", http.StatusServiceUnavailable)
		return
	}

	response, err := h.claudeAPI.Complete(req.Prompt, req.MaxTokens)
	if err != nil {
		http.Error(w, fmt.Sprintf("Error in Claude API: %v", err), http.StatusInternalServerError)
		return
	}

	result := UnifiedResponse{
		Response: response,
		Provider: "claude",
		Model:    "claude-3-5-sonnet-20241022",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(result)
}

func (h *Handlers) HandleOpenAI(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req UnifiedRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	if h.config.OpenAIAPIKey == "" {
		http.Error(w, "OpenAI API Key not configured", http.StatusServiceUnavailable)
		return
	}

	// Use default model if not specified
	model := req.Model
	if model == "" {
		model = "gpt-4o-mini"
	}

	response, err := h.openaiAPI.Complete(req.Prompt, req.MaxTokens, model)
	if err != nil {
		http.Error(w, fmt.Sprintf("Error in OpenAI API: %v", err), http.StatusInternalServerError)
		return
	}

	result := UnifiedResponse{
		Response: response,
		Provider: "openai",
		Model:    model,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(result)
}

func (h *Handlers) HandleDeepSeek(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req UnifiedRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	if h.config.DeepSeekAPIKey == "" {
		http.Error(w, "DeepSeek API Key not configured", http.StatusServiceUnavailable)
		return
	}

	// Use default model if not specified
	model := req.Model
	if model == "" {
		model = "deepseek-chat"
	}

	response, err := h.deepseekAPI.Complete(req.Prompt, req.MaxTokens, model)
	if err != nil {
		http.Error(w, fmt.Sprintf("Error in DeepSeek API: %v", err), http.StatusInternalServerError)
		return
	}

	result := UnifiedResponse{
		Response: response,
		Provider: "deepseek",
		Model:    model,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(result)
}

func (h *Handlers) HandleOllama(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req UnifiedRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	// Use default model if not specified
	model := req.Model
	if model == "" {
		model = "llama3.2"
	}

	response, err := h.ollamaAPI.Complete(model, req.Prompt)
	if err != nil {
		http.Error(w, fmt.Sprintf("Error in Ollama API: %v", err), http.StatusInternalServerError)
		return
	}

	result := UnifiedResponse{
		Response: response,
		Provider: "ollama",
		Model:    model,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(result)
}

// HandleUnified processes requests for multiple providers in a unified manner
func (h *Handlers) HandleUnified(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req UnifiedRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	// Validate provider
	if req.Provider == "" {
		http.Error(w, "Provider not specified", http.StatusBadRequest)
		return
	}

	var response string
	var err error
	var model string = req.Model

	switch req.Provider {
	case "claude":
		if h.config.ClaudeAPIKey == "" {
			http.Error(w, "Claude API Key not configured", http.StatusServiceUnavailable)
			return
		}
		response, err = h.claudeAPI.Complete(req.Prompt, req.MaxTokens)
		if model == "" {
			model = "claude-3-5-sonnet-20241022"
		}

	case "openai":
		if h.config.OpenAIAPIKey == "" {
			http.Error(w, "OpenAI API Key not configured", http.StatusServiceUnavailable)
			return
		}
		if model == "" {
			model = "gpt-4o-mini"
		}
		response, err = h.openaiAPI.Complete(req.Prompt, req.MaxTokens, model)

	case "deepseek":
		if h.config.DeepSeekAPIKey == "" {
			http.Error(w, "DeepSeek API Key not configured", http.StatusServiceUnavailable)
			return
		}
		if model == "" {
			model = "deepseek-chat"
		}
		response, err = h.deepseekAPI.Complete(req.Prompt, req.MaxTokens, model)

	case "ollama":
		if model == "" {
			model = "llama3.2"
		}
		response, err = h.ollamaAPI.Complete(model, req.Prompt)

	default:
		http.Error(w, "Unsupported provider: "+req.Provider, http.StatusBadRequest)
		return
	}

	if err != nil {
		http.Error(w, fmt.Sprintf("Error in %s API: %v", req.Provider, err), http.StatusInternalServerError)
		return
	}

	result := UnifiedResponse{
		Response: response,
		Provider: req.Provider,
		Model:    model,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(result)
}

func (h *Handlers) HandleHealth(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	healthStatus := map[string]interface{}{
		"status":    "ok",
		"timestamp": time.Now().Unix(),
		"version":   ii.AppVersion,
		"apis": map[string]interface{}{
			"claude": map[string]interface{}{
				"configured": h.config.ClaudeAPIKey != "",
				"available":  h.config.ClaudeAPIKey != "",
			},
			"openai": map[string]interface{}{
				"configured": h.config.OpenAIAPIKey != "",
				"available":  h.config.OpenAIAPIKey != "" && h.openaiAPI.IsAvailable(),
			},
			"deepseek": map[string]interface{}{
				"configured": h.config.DeepSeekAPIKey != "",
				"available":  h.config.DeepSeekAPIKey != "" && h.deepseekAPI.IsAvailable(),
			},
			"ollama": map[string]interface{}{
				"configured": h.config.OllamaEndpoint != "",
				"available":  h.ollamaAPI.IsAvailable(),
				"endpoint":   h.config.OllamaEndpoint,
			},
		},
		"features": map[string]bool{
			"unified_api":     true,
			"model_selection": true,
			"cost_estimation": true,
		},
	}

	json.NewEncoder(w).Encode(healthStatus)
}

// HandleModels retrieves available models for a specific provider or all providers
func (h *Handlers) HandleModels(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	provider := r.URL.Query().Get("provider")

	var models []string
	var err error

	switch provider {
	case "openai":
		if h.config.OpenAIAPIKey != "" {
			models, err = h.openaiAPI.ListModels()
			if err != nil {
				// Fallback to common models
				models = h.openaiAPI.GetCommonModels()
			}
		} else {
			models = h.openaiAPI.GetCommonModels()
		}

	case "deepseek":
		models = h.deepseekAPI.GetAvailableModels()

	case "claude":
		models = []string{
			"claude-3-5-sonnet-20241022",
			"claude-3-5-haiku-20241022",
			"claude-3-opus-20240229",
			"claude-3-sonnet-20240229",
			"claude-3-haiku-20240307",
		}

	case "ollama":
		models = []string{
			"llama3.2",
			"llama3.1",
			"codellama",
			"mistral",
			"neural-chat",
			"vicuna",
			"wizardcoder",
			"llama2",
		}

	default:
		// Return all models
		allModels := map[string][]string{
			"openai":   h.openaiAPI.GetCommonModels(),
			"deepseek": h.deepseekAPI.GetAvailableModels(),
			"claude": {
				"claude-3-5-sonnet-20241022",
				"claude-3-5-haiku-20241022",
				"claude-3-opus-20240229",
				"claude-3-sonnet-20240229",
				"claude-3-haiku-20240307",
			},
			"ollama": {
				"llama3.2", "llama3.1", "codellama", "mistral", "neural-chat",
				"vicuna", "wizardcoder", "llama2",
			},
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(allModels)
		return
	}

	result := map[string]interface{}{
		"provider": provider,
		"models":   models,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(result)
}

// HandleTest checks the availability of the specified provider
func (h *Handlers) HandleTest(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	provider := r.URL.Query().Get("provider")

	var available bool
	var message string

	switch provider {
	case "claude":
		available = h.config.ClaudeAPIKey != ""
		if available {
			message = "Claude API configured"
		} else {
			message = "Claude API Key not configured"
		}

	case "openai":
		available = h.config.OpenAIAPIKey != "" && h.openaiAPI.IsAvailable()
		if h.config.OpenAIAPIKey == "" {
			message = "OpenAI API Key not configured"
		} else if !h.openaiAPI.IsAvailable() {
			message = "OpenAI API is not responding"
		} else {
			message = "OpenAI API is working"
		}

	case "deepseek":
		available = h.config.DeepSeekAPIKey != "" && h.deepseekAPI.IsAvailable()
		if h.config.DeepSeekAPIKey == "" {
			message = "DeepSeek API Key not configured"
		} else if !h.deepseekAPI.IsAvailable() {
			message = "DeepSeek API is not responding"
		} else {
			message = "DeepSeek API is working"
		}

	case "ollama":
		available = h.ollamaAPI.IsAvailable()
		if available {
			message = "Ollama is working at " + h.config.OllamaEndpoint
		} else {
			message = "Ollama is not responding at " + h.config.OllamaEndpoint
		}

	default:
		http.Error(w, "Provider not specified or invalid", http.StatusBadRequest)
		return
	}

	result := map[string]interface{}{
		"provider":  provider,
		"available": available,
		"message":   message,
		"timestamp": time.Now().Unix(),
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(result)
}

func (h *Handlers) setCORSHeaders(w http.ResponseWriter) {
	// CORS headers
	// These headers allow cross-origin requests from any domain
	// Adjust as necessary for your security requirements.
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self' data:; font-src 'self'; connect-src 'self' https://api.openai.com https://api.deepseek.com https://api.ollama.com; frame-ancestors 'none'")
	w.Header().Set("Referrer-Policy", "no-referrer")
	w.Header().Set("X-Content-Security-Policy", "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self' data:; font-src 'self'; connect-src 'self' https://api.openai.com https://api.deepseek.com https://api.ollama.com; frame-ancestors 'none'")
	w.Header().Set("X-Content-Security-Policy-Report-Only", "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self' data:; font-src 'self'; connect-src 'self' https://api.openai.com https://api.deepseek.com https://api.ollama.com; frame-ancestors 'none'")
	w.Header().Set("X-XSS-Protection", "1; mode=block")
	w.Header().Set("X-Content-Type-Options", "nosniff")
	w.Header().Set("X-Frame-Options", "DENY")
}

func (h *Handlers) HandleVersion(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	appVersion := ii.CurrentVersion
	if appVersion == "" {
		appVersion = ii.AppVersion
	}

	versionInfo := map[string]string{
		"version": appVersion,
		"name":    ii.AppName,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(versionInfo)
}

func (h *Handlers) HandleDocs(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	docs := map[string]string{
		"docs": "https://github.com/rafa-mori/grompt/blob/main/README.md",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(docs)
}

func (h *Handlers) HandleSupport(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	supportInfo := map[string]string{
		"support": "https://github.com/rafa-mori/grompt/blob/main/README.md",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(supportInfo)
}

func (h *Handlers) HandleAbout(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	aboutInfo := map[string]string{
		"name":        "Grompt",
		"description": "A tool for building prompts with AI assistance using real engineering practices.",
		"version":     ii.AppVersion,
		"author":      "Rafa Mori",
		"license":     "MIT",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(aboutInfo)
}

func (h *Handlers) HandleStatus(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	status := map[string]string{
		"status":    "running",
		"timestamp": time.Now().Format(time.RFC3339),
		"version":   ii.AppVersion,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(status)
}

func (h *Handlers) HandleHelp(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	helpInfo := map[string]string{
		"help": "<HELP_URL>",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(helpInfo)
}

func (h *Handlers) HandleFeedback(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	feedbackInfo := map[string]string{
		"feedback": "<FEEDBACK_URL>",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(feedbackInfo)
}

func (h *Handlers) HandleContact(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	contactInfo := map[string]string{
		"contact": "<CONTACT_URL>",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(contactInfo)
}

func (h *Handlers) HandlePrivacy(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	privInfo := map[string]string{
		"privacy": "<PRIVACY_POLICY_URL>",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(privInfo)
}

func (h *Handlers) HandleTerms(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	termsInfo := map[string]string{
		"terms": "<TERMS_OF_SERVICE_URL>",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(termsInfo)
}

func (h *Handlers) HandleRateLimit(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	rateLimitInfo := map[string]string{
		"rate_limit": "<RATE_LIMIT_URL>",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(rateLimitInfo)
}

func (h *Handlers) HandleError(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	errorInfo := map[string]string{
		"error": "An unexpected error occurred. Please try again later.",
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusInternalServerError)
	json.NewEncoder(w).Encode(errorInfo)
}

func (h *Handlers) HandleNotFound(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	notFoundInfo := map[string]string{
		"error": "Resource not found. Check the URL and try again.",
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusNotFound)
	json.NewEncoder(w).Encode(notFoundInfo)
}

func (h *Handlers) HandleMethodNotAllowed(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	methodNotAllowedInfo := map[string]string{
		"error": "Method not allowed. Check the API documentation.",
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusMethodNotAllowed)
	json.NewEncoder(w).Encode(methodNotAllowedInfo)
}

func (h *Handlers) HandleInternalServerError(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	errorInfo := map[string]string{
		"error": "An unexpected error occurred. Please try again later.",
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusInternalServerError)
	json.NewEncoder(w).Encode(errorInfo)
}

func (h *Handlers) HandleBadRequest(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	badRequestInfo := map[string]string{
		"error": "Invalid request. Check the parameters and try again.",
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusBadRequest)
	json.NewEncoder(w).Encode(badRequestInfo)
}

func (h *Handlers) HandleUnauthorized(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	unauthorizedInfo := map[string]string{
		"error": "Unauthorized access. Check your credentials.",
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusUnauthorized)
	json.NewEncoder(w).Encode(unauthorizedInfo)
}

func (h *Handlers) HandleForbidden(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)

	if r.Method == "OPTIONS" {
		return
	}

	forbiddenInfo := map[string]string{
		"error": "Access forbidden. You don't have permission to access this resource.",
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusForbidden)
	json.NewEncoder(w).Encode(forbiddenInfo)
}

/// internal/services/server/handlers_agents.go ///
package server

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/rafa-mori/grompt/internal/services/squad"
)

// HandleAgents manages listing and creating agents.
func (h *Handlers) HandleAgents(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)
	if r.Method == "OPTIONS" {
		return
	}

	switch r.Method {
	case http.MethodGet:
		agents := h.agentStore.All()
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(agents)
	case http.MethodPost:
		var a squad.Agent
		if err := json.NewDecoder(r.Body).Decode(&a); err != nil {
			http.Error(w, "invalid json", http.StatusBadRequest)
			return
		}
		sa, err := h.agentStore.Add(a)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(sa)
	default:
		h.HandleMethodNotAllowed(w, r)
	}
}

// HandleAgent manages operations on a single agent by ID.
func (h *Handlers) HandleAgent(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)
	if r.Method == "OPTIONS" {
		return
	}
	idStr := strings.TrimPrefix(r.URL.Path, "/api/agents/")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "invalid id", http.StatusBadRequest)
		return
	}

	switch r.Method {
	case http.MethodGet:
		for _, a := range h.agentStore.All() {
			if a.ID == id {
				w.Header().Set("Content-Type", "application/json")
				json.NewEncoder(w).Encode(a)
				return
			}
		}
		http.NotFound(w, r)
	case http.MethodPut:
		var ag squad.Agent
		if err := json.NewDecoder(r.Body).Decode(&ag); err != nil {
			http.Error(w, "invalid json", http.StatusBadRequest)
			return
		}
		sa, err := h.agentStore.Update(id, ag)
		if err != nil {
			http.Error(w, err.Error(), http.StatusNotFound)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(sa)
	case http.MethodDelete:
		if err := h.agentStore.Delete(id); err != nil {
			http.Error(w, err.Error(), http.StatusNotFound)
			return
		}
		w.WriteHeader(http.StatusNoContent)
	default:
		h.HandleMethodNotAllowed(w, r)
	}
}

// HandleAgentsMarkdown returns current agents as AGENTS.md content.
func (h *Handlers) HandleAgentsMarkdown(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)
	if r.Method == "OPTIONS" {
		return
	}
	if r.Method != http.MethodGet {
		h.HandleMethodNotAllowed(w, r)
		return
	}
	md := h.agentStore.ToMarkdown()
	w.Header().Set("Content-Type", "text/markdown")
	w.Write([]byte(md))
}

// HandleAgentsGenerate generates a squad of agents based on requirements using LLM
func (h *Handlers) HandleAgentsGenerate(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)
	if r.Method == "OPTIONS" {
		return
	}

	if r.Method != http.MethodPost {
		h.HandleMethodNotAllowed(w, r)
		return
	}

	var req struct {
		Requirements string `json:"requirements"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "invalid json", http.StatusBadRequest)
		return
	}

	if req.Requirements == "" {
		http.Error(w, "requirements field is required", http.StatusBadRequest)
		return
	}

	// Create LLM function based on available APIs
	llmFunc := func(prompt string) (string, error) {
		// Try different providers in order of preference
		if h.config.ClaudeAPIKey != "" {
			return h.claudeAPI.Complete(prompt, 4000)
		}
		if h.config.OpenAIAPIKey != "" {
			return h.openaiAPI.Complete(prompt, 4000, "gpt-4")
		}
		if h.config.DeepSeekAPIKey != "" {
			return h.deepseekAPI.Complete(prompt, 4000, "deepseek-chat")
		}
		return "", fmt.Errorf("no LLM API available")
	}

	// Generate agents using LLM
	agents, err := squad.ParseRequirementsWithLLM(req.Requirements, llmFunc)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// Generate the markdown
	markdown := squad.GenerateMarkdown(agents)

	response := struct {
		Agents   []squad.Agent `json:"agents"`
		Markdown string        `json:"markdown"`
	}{
		Agents:   agents,
		Markdown: markdown,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// HandleAgentsImport handles importing AGENTS.md files with validation
func (h *Handlers) HandleAgentsImport(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)
	if r.Method == "OPTIONS" {
		return
	}

	if r.Method != http.MethodPost {
		h.HandleMethodNotAllowed(w, r)
		return
	}

	var req struct {
		Content  string `json:"content"`
		Merge    bool   `json:"merge"`    // Whether to merge with existing agents
		Validate bool   `json:"validate"` // Whether to validate before importing
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "invalid json", http.StatusBadRequest)
		return
	}

	if req.Content == "" {
		http.Error(w, "content field is required", http.StatusBadRequest)
		return
	}

	// Parse the markdown content
	parseResult := squad.ParseAgentsMarkdown(req.Content)

	// If validation is requested and there are errors, return them
	if req.Validate && len(parseResult.Errors) > 0 {
		response := struct {
			Success bool               `json:"success"`
			Message string             `json:"message"`
			Agents  []squad.Agent      `json:"agents"`
			Errors  []squad.ParseError `json:"errors"`
		}{
			Success: false,
			Message: "Validation errors found in the imported content",
			Agents:  parseResult.Agents,
			Errors:  parseResult.Errors,
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(response)
		return
	}

	// If not merging, clear existing agents first
	if !req.Merge {
		// Get all existing agents and delete them
		existingAgents := h.agentStore.All()
		for _, agent := range existingAgents {
			h.agentStore.Delete(agent.ID)
		}
	}

	// Import the new agents
	var importedAgents []interface{}
	for _, agent := range parseResult.Agents {
		storedAgent, err := h.agentStore.Add(agent)
		if err != nil {
			// Log error but continue with other agents
			continue
		}
		importedAgents = append(importedAgents, storedAgent)
	}

	response := struct {
		Success        bool               `json:"success"`
		Message        string             `json:"message"`
		ImportedAgents []interface{}      `json:"imported_agents"`
		ImportedCount  int                `json:"imported_count"`
		Errors         []squad.ParseError `json:"errors"`
		TotalErrors    int                `json:"total_errors"`
	}{
		Success:        true,
		Message:        fmt.Sprintf("Successfully imported %d agents", len(importedAgents)),
		ImportedAgents: importedAgents,
		ImportedCount:  len(importedAgents),
		Errors:         parseResult.Errors,
		TotalErrors:    len(parseResult.Errors),
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// HandleAgentsExportAdvanced handles advanced export with metadata options
func (h *Handlers) HandleAgentsExportAdvanced(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)
	if r.Method == "OPTIONS" {
		return
	}

	if r.Method != http.MethodPost {
		h.HandleMethodNotAllowed(w, r)
		return
	}

	var req struct {
		IncludeMetadata bool   `json:"include_metadata"`
		AgentIDs        []int  `json:"agent_ids"` // Specific agents to export (empty = all)
		Format          string `json:"format"`    // "markdown", "json", "yaml"
		Filename        string `json:"filename"`  // Suggested filename
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "invalid json", http.StatusBadRequest)
		return
	}

	// Default values
	if req.Format == "" {
		req.Format = "markdown"
	}
	if req.Filename == "" {
		req.Filename = "AGENTS"
	}

	// Get agents to export
	allAgents := h.agentStore.All()
	var agentsToExport []squad.Agent

	if len(req.AgentIDs) > 0 {
		// Export specific agents
		agentMap := make(map[int]squad.Agent)
		for _, stored := range allAgents {
			agentMap[stored.ID] = stored.Agent
		}

		for _, id := range req.AgentIDs {
			if agent, exists := agentMap[id]; exists {
				agentsToExport = append(agentsToExport, agent)
			}
		}
	} else {
		// Export all agents
		for _, stored := range allAgents {
			agentsToExport = append(agentsToExport, stored.Agent)
		}
	}

	var content string
	var contentType string
	var extension string

	switch req.Format {
	case "json":
		data, err := json.MarshalIndent(agentsToExport, "", "  ")
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		content = string(data)
		contentType = "application/json"
		extension = ".json"

	case "yaml":
		// Simple YAML-like format for agents
		var b strings.Builder
		b.WriteString("agents:\n")
		for _, agent := range agentsToExport {
			b.WriteString(fmt.Sprintf("  - title: %q\n", agent.Title))
			if agent.Role != "" {
				b.WriteString(fmt.Sprintf("    role: %q\n", agent.Role))
			}
			if len(agent.Skills) > 0 {
				b.WriteString("    skills:\n")
				for _, skill := range agent.Skills {
					b.WriteString(fmt.Sprintf("      - %q\n", skill))
				}
			}
			if len(agent.Restrictions) > 0 {
				b.WriteString("    restrictions:\n")
				for _, restriction := range agent.Restrictions {
					b.WriteString(fmt.Sprintf("      - %q\n", restriction))
				}
			}
			if agent.PromptExample != "" {
				b.WriteString(fmt.Sprintf("    prompt_example: %q\n", agent.PromptExample))
			}
			b.WriteString("\n")
		}
		content = b.String()
		contentType = "application/x-yaml"
		extension = ".yaml"

	default: // markdown
		content = squad.ExportAgentsToMarkdown(agentsToExport, req.IncludeMetadata)
		contentType = "text/markdown"
		extension = ".md"
	}

	// Set headers for file download
	filename := req.Filename + extension
	w.Header().Set("Content-Type", contentType)
	w.Header().Set("Content-Disposition", fmt.Sprintf("attachment; filename=%q", filename))
	w.Header().Set("Content-Length", fmt.Sprintf("%d", len(content)))

	// Write content
	w.Write([]byte(content))
}

// HandleAgentsValidate validates agents content without importing
func (h *Handlers) HandleAgentsValidate(w http.ResponseWriter, r *http.Request) {
	h.setCORSHeaders(w)
	if r.Method == "OPTIONS" {
		return
	}

	if r.Method != http.MethodPost {
		h.HandleMethodNotAllowed(w, r)
		return
	}

	var req struct {
		Content string `json:"content"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "invalid json", http.StatusBadRequest)
		return
	}

	if req.Content == "" {
		http.Error(w, "content field is required", http.StatusBadRequest)
		return
	}

	// Parse and validate the content
	parseResult := squad.ParseAgentsMarkdown(req.Content)

	// Additional validation for each parsed agent
	var allErrors []squad.ParseError
	allErrors = append(allErrors, parseResult.Errors...)

	for i, agent := range parseResult.Agents {
		validationErrors := squad.ValidateAgent(agent)
		for _, err := range validationErrors {
			err.Section = fmt.Sprintf("Agent %d (%s) - %s", i+1, agent.Title, err.Section)
			allErrors = append(allErrors, err)
		}
	}

	response := struct {
		Valid        bool               `json:"valid"`
		AgentsFound  int                `json:"agents_found"`
		Agents       []squad.Agent      `json:"agents"`
		Errors       []squad.ParseError `json:"errors"`
		ErrorCount   int                `json:"error_count"`
		WarningCount int                `json:"warning_count"`
	}{
		Valid:        len(allErrors) == 0,
		AgentsFound:  len(parseResult.Agents),
		Agents:       parseResult.Agents,
		Errors:       allErrors,
		ErrorCount:   len(allErrors),
		WarningCount: 0, // Could implement warnings separately
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

/// internal/services/server/server.go ///
// Package server implements the HTTP server for the Prompt Crafter application.
package server

import (
	"embed"
	"fmt"
	"io/fs"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"time"

	t "github.com/rafa-mori/grompt/internal/types"
)

//go:embed build/*
var reactApp embed.FS

type Server struct {
	config   *t.Config
	handlers *Handlers
}

func NewServer(cfg *t.Config) *Server {
	handlers := NewHandlers(cfg)
	return &Server{
		config:   cfg,
		handlers: handlers,
	}
}

func (s *Server) Start() error {
	// Configurar roteamento
	s.setupRoutes()

	url := fmt.Sprintf("http://localhost:%s", s.config.Port)

	fmt.Printf("üåê Servidor iniciado em: %s\n", url)
	fmt.Printf("üìÅ Servindo aplica√ß√£o React embarcada\n")
	fmt.Printf("üîß APIs dispon√≠veis:\n")
	fmt.Printf("   ‚Ä¢ /api/config - Configura√ß√£o\n")
	fmt.Printf("   ‚Ä¢ /api/models - Modelos dispon√≠veis\n")
	fmt.Printf("   ‚Ä¢ /api/test - Teste de API\n")
	fmt.Printf("   ‚Ä¢ /api/unified - Unified API\n")
	fmt.Printf("   ‚Ä¢ /api/openai - OpenAI API\n")
	fmt.Printf("   ‚Ä¢ /api/deepseek - DeepSeek API\n")
	fmt.Printf("   ‚Ä¢ /api/claude - Claude API\n")
	fmt.Printf("   ‚Ä¢ /api/ollama - Ollama Local\n")
	fmt.Printf("   ‚Ä¢ /api/health - Status do servidor\n")
	fmt.Printf("üí° Pressione Ctrl+C para parar\n\n")

	// Abrir navegador ap√≥s delay
	go func() {
		time.Sleep(1 * time.Second)
		openBrowser(url)
	}()

	return http.ListenAndServe(":"+s.config.Port, nil)
}

func (s *Server) setupRoutes() {
	// EMBED REACT FRONTEND

	// Make sure the React build directory exists
	buildFS, err := fs.Sub(reactApp, "build")
	if err != nil {
		log.Printf("‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel acessar arquivos React embarcados: %v", err)
		log.Printf("üí° Certifique-se de fazer 'npm run build' antes de compilar o Go")
		// Proceed with fallback routes
		// This will allow the server to run without the React frontend
		// and still serve the API endpoints.
		s.setupFallbackRoutes()
		return
	}

	// Handler that serve static files from the React build directory
	// This will serve files like index.html, main.js, styles.css, etc.
	staticHandler := http.FileServer(http.FS(buildFS))

	// Main route handler
	// This will handle all requests to the root path and serve the React app
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		path := strings.TrimPrefix(r.URL.Path, "/")

		// If the path starts with "api/", we return a 404 Not Found.
		// This prevents API routes from being handled by the React app
		// and ensures they are handled by the API handlers defined below.
		// This is important to avoid conflicts between API routes and React routing.
		if strings.HasPrefix(path, "api/") {
			http.NotFound(w, r)
			return
		}

		// Server static files directly if they exist
		// This allows serving files like /static/js/main.js, /static/css/styles.css, etc.
		// It checks if the path contains a dot (.) to identify files
		// and serves them directly from the build directory.
		if strings.Contains(path, ".") {
			// Check if the file exists in the embedded filesystem
			if _, err := fs.Stat(buildFS, path); err == nil {
				staticHandler.ServeHTTP(w, r)
				return
			}
		}

		// If the request is for the root path or any other path that doesn't match a file,
		// we serve the index.html file from the React build directory.
		// This allows the React app to handle routing internally.
		// It is important to serve index.html for all non-file requests
		// so that React Router can take over and handle the routing on the client side.
		indexFile, err := buildFS.Open("index.html")
		if err != nil {
			log.Printf("‚ùå Erro ao abrir index.html: %v", err)
			http.Error(w, "Frontend n√£o dispon√≠vel", http.StatusInternalServerError)
			return
		}
		defer indexFile.Close()

		// Set the Content-Type header to serve HTML
		// This is important to ensure the browser interprets the response as HTML
		// and renders the React app correctly.
		w.Header().Set("Content-Type", "text/html; charset=utf-8")

		// Check if the index.html file exists in the embedded filesystem
		// If it does, we read its content and write it to the response.
		// This is the main entry point for the React app and should be served for all
		// non-file requests to allow React Router to handle the routing.
		if _, err := fs.ReadFile(buildFS, "index.html"); err != nil {
			http.Error(w, "Erro ao ler frontend", http.StatusInternalServerError)
			return
		}

		// Read the content of index.html and write it to the response
		// This serves the React app for all non-file requests,
		// allowing React Router to handle the routing on the client side.
		content, err := fs.ReadFile(buildFS, "index.html")
		if err != nil {
			http.Error(w, "Erro ao carregar frontend", http.StatusInternalServerError)
			return
		}

		w.Write(content)
	})

	// API Routes
	// These routes handle API requests and are defined separately from the React app.
	// They are prefixed with "/api/" to distinguish them from the React app routes.
	// This allows the React app to handle client-side routing while the server handles API requests.
	// Each API route is handled by a specific handler function defined in the Handlers struct.
	http.HandleFunc("/api/claude", s.handlers.HandleClaude)
	http.HandleFunc("/api/openai", s.handlers.HandleOpenAI)
	http.HandleFunc("/api/deepseek", s.handlers.HandleDeepSeek)
	http.HandleFunc("/api/ollama", s.handlers.HandleOllama)
	http.HandleFunc("/api/unified", s.handlers.HandleUnified)
	http.HandleFunc("/api/models", s.handlers.HandleModels)
	http.HandleFunc("/api/agents", s.handlers.HandleAgents)
	http.HandleFunc("/api/agents/generate", s.handlers.HandleAgentsGenerate)
	http.HandleFunc("/api/agents/import", s.handlers.HandleAgentsImport)
	http.HandleFunc("/api/agents/export-advanced", s.handlers.HandleAgentsExportAdvanced)
	http.HandleFunc("/api/agents/validate", s.handlers.HandleAgentsValidate)
	http.HandleFunc("/api/agents/", s.handlers.HandleAgent)
	http.HandleFunc("/api/agents.md", s.handlers.HandleAgentsMarkdown)

	// This route handles the configuration API endpoint
	// It returns the server's configuration, such as API keys and endpoints.
	http.HandleFunc("/api/config", s.handlers.HandleConfig)

	// This route handles the test API endpoint
	// It is used to test the server's API functionality.
	http.HandleFunc("/api/test", s.handlers.HandleTest)

	// This route handles the health check for the server
	// It returns a simple JSON response indicating the server is healthy.
	http.HandleFunc("/api/health", s.handlers.HandleHealth)

	// Log the successful setup of routes
	// This log message indicates that the server has successfully set up the routes
	// and is ready to serve both the React app and the API endpoints.
	log.Println("‚úÖ Rotas configuradas: Frontend React + APIs")
}

func (s *Server) setupFallbackRoutes() {

	// Fallback route for when the React frontend is not found
	// This route serves a simple HTML page explaining that the React frontend is not available
	// It provides instructions on how to build the React app and recompile the Go server.
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if strings.HasPrefix(r.URL.Path, "/api/") {
			http.NotFound(w, r)
			return
		}

		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		html := `<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Prompt Crafter - Setup Necess√°rio</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            max-width: 800px; 
            margin: 50px auto; 
            padding: 20px;
            background: #1a1a1a;
            color: #ffffff;
        }
        .container { 
            background: #2d2d2d; 
            padding: 30px; 
            border-radius: 12px; 
            border: 1px solid #404040;
        }
        h1 { color: #60a5fa; margin-bottom: 20px; }
        h2 { color: #34d399; margin-top: 30px; }
        pre { 
            background: #1a1a1a; 
            padding: 15px; 
            border-radius: 8px; 
            overflow-x: auto;
            border: 1px solid #404040;
        }
        code { color: #fbbf24; }
        .warning { 
            background: #451a03; 
            border: 1px solid #f59e0b; 
            padding: 15px; 
            border-radius: 8px; 
            margin: 20px 0;
        }
        .step { 
            background: #1e3a8a; 
            border: 1px solid #3b82f6; 
            padding: 15px; 
            border-radius: 8px; 
            margin: 15px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Prompt Crafter</h1>
        
        <div class="warning">
            <strong>‚ö†Ô∏è Frontend React n√£o encontrado!</strong><br>
            O servidor Go est√° rodando, mas o frontend React n√£o foi embarcado no bin√°rio.
        </div>

        <h2>üîß Como corrigir:</h2>
        
        <div class="step">
            <strong>Passo 1:</strong> Build do Frontend React
            <pre><code>cd frontend
npm install
npm run build
cd ..</code></pre>
        </div>

        <div class="step">
            <strong>Passo 2:</strong> Recompilar Go com Frontend Embarcado
            <pre><code>go build -o prompt-crafter .</code></pre>
        </div>

        <div class="step">
            <strong>Passo 3:</strong> Executar Novamente
            <pre><code>./prompt-crafter</code></pre>
        </div>

        <h2>üìö Ou use o Makefile:</h2>
        <pre><code>make build-all</code></pre>

        <h2>üîó APIs Dispon√≠veis:</h2>
        <ul>
            <li><a href="/api/health" style="color: #60a5fa;">/api/health</a> - Status do servidor</li>
            <li><a href="/api/config" style="color: #60a5fa;">/api/config</a> - Configura√ß√£o das APIs</li>
        </ul>

        <p><strong>üí° Dica:</strong> Este servidor Go est√° funcionando corretamente. Voc√™ s√≥ precisa buildar e embarca o frontend React!</p>
    </div>
</body>
</html>`
		w.Write([]byte(html))
	})

	// Fallback API routes
	// These routes handle API requests when the React frontend is not available.
	// They provide basic functionality to ensure the server can still respond to API requests.
	http.HandleFunc("/api/models", s.handlers.HandleModels)
	http.HandleFunc("/api/claude", s.handlers.HandleClaude)
	http.HandleFunc("/api/ollama", s.handlers.HandleOllama)
	http.HandleFunc("/api/openai", s.handlers.HandleOpenAI)
	http.HandleFunc("/api/deepseek", s.handlers.HandleDeepSeek)
	http.HandleFunc("/api/unified", s.handlers.HandleUnified)
	http.HandleFunc("/api/agents", s.handlers.HandleAgents)
	http.HandleFunc("/api/agents/generate", s.handlers.HandleAgentsGenerate)
	http.HandleFunc("/api/agents/", s.handlers.HandleAgent)
	http.HandleFunc("/api/agents.md", s.handlers.HandleAgentsMarkdown)

	// Config route
	// This route returns the server's configuration, such as API keys and endpoints.
	// It is useful for clients to know how to interact with the server's APIs.
	http.HandleFunc("/api/config", s.handlers.HandleConfig)

	// Test route
	// This route is used to test the server's API functionality.
	// It can be used to verify that the server is running and responding correctly.
	http.HandleFunc("/api/test", s.handlers.HandleTest)

	// Health check route
	// This route checks the health of the server and returns a simple JSON response.
	// It is useful for monitoring and ensuring the server is running correctly.
	http.HandleFunc("/api/health", s.handlers.HandleHealth)

	// Log the fallback routes setup
	log.Println("‚ö†Ô∏è  Fallback routes: Unavailable React frontend, serving API endpoints only")
}

func (s *Server) Shutdown() {
	fmt.Println("üßπ Cleaning resourses...")
}

func openBrowser(url string) {
	var err error
	switch runtime.GOOS {
	case "linux":
		err = exec.Command("xdg-open", url).Start()
	case "windows":
		err = exec.Command("rundll32", "url.dll,FileProtocolHandler", url).Start()
	case "darwin":
		err = exec.Command("open", url).Start()
	default:
		fmt.Printf("üåê Open your browser at: %s\n", url)
		return
	}

	if err != nil {
		fmt.Printf("‚ö†Ô∏è  Error opening browser: %v\n", err)
		fmt.Printf("üåê Open your browser at: %s\n", url)
	}
}

// Fun√ß√£o para verificar se o build React existe
func (s *Server) checkReactBuild() bool {
	buildDir := "build"
	if _, err := os.Stat(buildDir); os.IsNotExist(err) {
		return false
	}

	indexPath := filepath.Join(buildDir, "index.html")
	if _, err := os.Stat(indexPath); os.IsNotExist(err) {
		return false
	}

	return true
}

/// internal/services/squad/squad.go ///
package squad

import (
	"encoding/json"
	"fmt"
	"os"
	"regexp"
	"strings"
	"time"
)

// Agent represents an AI agent specification for AGENTS.md
// Each agent has a title, role description, skills, restrictions and a prompt example.
type Agent struct {
	Title         string
	Role          string
	Skills        []string
	Restrictions  []string
	PromptExample string
}

// ParseRequirements parses a free text requirement string and returns a slice of Agent definitions.
// The parsing uses a simple heuristic based on keywords.
func ParseRequirements(req string) []Agent {
	lower := strings.ToLower(req)
	agents := []Agent{}

	langs := []string{}
	langPrefs := map[string]bool{}

	for _, lang := range []string{"go", "python", "javascript", "typescript", "java", "rust", "ruby"} {
		if strings.Contains(lower, lang) {
			langs = append(langs, strings.Title(lang))
			langPrefs[lang] = true
		}
	}

	restricts := []string{}
	rJava := regexp.MustCompile(`(?i)(sem|without|no)\s+java`)
	if rJava.MatchString(lower) {
		restricts = append(restricts, "No Java")
	}

	if strings.Contains(lower, "backend") || strings.Contains(lower, "microservi") || strings.Contains(lower, "api") {
		title := "Backend Developer"
		if len(langs) > 0 {
			title += " (" + strings.Join(langs, "/") + ")"
		}
		agents = append(agents, Agent{
			Title:         title,
			Role:          "Implement backend services",
			Skills:        append([]string{"REST"}, langs...),
			Restrictions:  restricts,
			PromptExample: "Design and implement backend APIs following the requirements.",
		})
	}

	if strings.Contains(lower, "docker") || strings.Contains(lower, "deploy") || strings.Contains(lower, "ci/cd") || strings.Contains(lower, "kubernetes") {
		agents = append(agents, Agent{
			Title:         "DevOps Engineer",
			Role:          "Setup Docker and CI/CD pipelines",
			Skills:        []string{"Docker", "CI/CD", "Cloud"},
			PromptExample: "Configure Docker containers and deployment pipeline.",
		})
	}

	if strings.Contains(lower, "test") || strings.Contains(lower, "qa") {
		skills := []string{"Automated Testing"}
		if langPrefs["go"] {
			skills = append(skills, "go test")
		}
		if langPrefs["python"] {
			skills = append(skills, "pytest")
		}
		agents = append(agents, Agent{
			Title:         "QA Engineer",
			Role:          "Write and execute automated tests",
			Skills:        skills,
			PromptExample: "Create test suites ensuring high coverage.",
		})
	}

	if len(agents) == 0 {
		agents = append(agents, Agent{
			Title:         "Software Engineer",
			Role:          "Implement requested features",
			Skills:        langs,
			Restrictions:  restricts,
			PromptExample: "Develop the project according to the requirements.",
		})
	}

	return agents
}

// GenerateMarkdown creates the AGENTS.md content based on agents slice.
func GenerateMarkdown(agents []Agent) string {
	b := &strings.Builder{}
	b.WriteString("# Agents\n\n")
	for _, a := range agents {
		b.WriteString("## " + a.Title + "\n")
		if a.Role != "" {
			b.WriteString("- Role: " + a.Role + "\n")
		}
		if len(a.Skills) > 0 {
			b.WriteString("- Skills: " + strings.Join(a.Skills, ", ") + "\n")
		}
		if len(a.Restrictions) > 0 {
			b.WriteString("- Restrictions: " + strings.Join(a.Restrictions, ", ") + "\n")
		}
		if a.PromptExample != "" {
			b.WriteString("- Prompt Example: " + a.PromptExample + "\n")
		}
		b.WriteString("\n")
	}
	return b.String()
}

// WriteFile writes the AGENTS.md content to the provided path.
func WriteFile(path, content string) error {
	return os.WriteFile(path, []byte(content), 0o644)
}

// BuildAndSave generates the agents from requirements and writes AGENTS.md at path.
func BuildAndSave(req, path string) (string, error) {
	agents := ParseRequirements(req)
	md := GenerateMarkdown(agents)
	if err := WriteFile(path, md); err != nil {
		return "", err
	}
	return md, nil
}

// ParseRequirementsWithLLM generates agents using LLM analysis of requirements
func ParseRequirementsWithLLM(req string, llmFunc func(string) (string, error)) ([]Agent, error) {
	prompt := `Analyze the following project requirements and generate a JSON array of AI agents needed for this project.

Requirements: ` + req + `

For each agent, provide:
- Title: A descriptive title for the agent role
- Role: A clear description of what this agent does
- Skills: Array of technical skills and technologies
- Restrictions: Array of things this agent should avoid or not do
- PromptExample: A detailed example of how to use this agent in a prompt

Return ONLY a valid JSON array with this structure:
[
  {
    "Title": "Backend Developer (Python/FastAPI)",
    "Role": "Implement scalable REST APIs and database integrations",
    "Skills": ["Python", "FastAPI", "PostgreSQL", "SQLAlchemy", "Pydantic"],
    "Restrictions": ["No Java", "Avoid synchronous database calls"],
    "PromptExample": "You are a Python backend developer specializing in FastAPI. Create a REST API endpoint for user authentication with JWT tokens, including proper error handling and async database operations."
  }
]

Generate 3-6 agents that would be needed for this project. Be specific about technologies mentioned in the requirements.`

	response, err := llmFunc(prompt)
	if err != nil {
		// Fallback to basic parsing if LLM fails
		return ParseRequirements(req), nil
	}

	// Try to parse the JSON response
	var agents []Agent
	err = json.Unmarshal([]byte(response), &agents)
	if err != nil {
		// If JSON parsing fails, fallback to basic parsing
		return ParseRequirements(req), nil
	}

	return agents, nil
}

// ParseError represents an error that occurred during parsing with location information
type ParseError struct {
	Line    int    `json:"line"`
	Section string `json:"section"`
	Message string `json:"message"`
	Content string `json:"content"`
}

// ParseResult contains the parsed agents and any errors that occurred
type ParseResult struct {
	Agents []Agent      `json:"agents"`
	Errors []ParseError `json:"errors"`
}

// ParseAgentsMarkdown parses an AGENTS.md file content and returns agents with detailed error reporting
func ParseAgentsMarkdown(content string) ParseResult {
	result := ParseResult{
		Agents: []Agent{},
		Errors: []ParseError{},
	}

	lines := strings.Split(content, "\n")
	var currentAgent *Agent
	var currentSection string
	var lineNum int

	for i, line := range lines {
		lineNum = i + 1
		trimmed := strings.TrimSpace(line)

		// Skip empty lines and main title
		if trimmed == "" || strings.HasPrefix(trimmed, "# Agents") {
			continue
		}

		// New agent section (## Title)
		if strings.HasPrefix(trimmed, "## ") {
			// Save previous agent if exists
			if currentAgent != nil {
				if currentAgent.Title == "" {
					result.Errors = append(result.Errors, ParseError{
						Line:    lineNum - 1,
						Section: "Agent Title",
						Message: "Agent title is required",
						Content: line,
					})
				} else {
					result.Agents = append(result.Agents, *currentAgent)
				}
			}

			// Start new agent
			title := strings.TrimSpace(strings.TrimPrefix(trimmed, "##"))
			if title == "" {
				result.Errors = append(result.Errors, ParseError{
					Line:    lineNum,
					Section: "Agent Title",
					Message: "Empty agent title found",
					Content: line,
				})
				currentAgent = &Agent{Title: "Untitled Agent"}
			} else {
				currentAgent = &Agent{Title: title}
			}
			currentSection = "title"
			continue
		}

		// Agent properties (- Property: Value)
		if strings.HasPrefix(trimmed, "- ") && currentAgent != nil {
			propertyLine := strings.TrimPrefix(trimmed, "- ")
			parts := strings.SplitN(propertyLine, ":", 2)

			if len(parts) != 2 {
				result.Errors = append(result.Errors, ParseError{
					Line:    lineNum,
					Section: currentSection,
					Message: "Invalid property format, expected '- Property: Value'",
					Content: line,
				})
				continue
			}

			property := strings.TrimSpace(parts[0])
			value := strings.TrimSpace(parts[1])

			switch strings.ToLower(property) {
			case "role":
				currentAgent.Role = value
				currentSection = "role"
			case "skills":
				skills := parseListValue(value)
				if len(skills) == 0 {
					result.Errors = append(result.Errors, ParseError{
						Line:    lineNum,
						Section: "skills",
						Message: "Empty skills list",
						Content: line,
					})
				}
				currentAgent.Skills = skills
				currentSection = "skills"
			case "restrictions":
				restrictions := parseListValue(value)
				currentAgent.Restrictions = restrictions
				currentSection = "restrictions"
			case "prompt example":
				currentAgent.PromptExample = value
				currentSection = "prompt_example"
			default:
				result.Errors = append(result.Errors, ParseError{
					Line:    lineNum,
					Section: currentSection,
					Message: fmt.Sprintf("Unknown property '%s'", property),
					Content: line,
				})
			}
		}
	}

	// Save last agent
	if currentAgent != nil {
		if currentAgent.Title == "" {
			result.Errors = append(result.Errors, ParseError{
				Line:    lineNum,
				Section: "Agent Title",
				Message: "Agent title is required",
				Content: "End of file",
			})
		} else {
			result.Agents = append(result.Agents, *currentAgent)
		}
	}

	return result
}

// parseListValue parses comma-separated values or already formatted list
func parseListValue(value string) []string {
	// If it looks like it's already a list format, try to parse it
	if strings.Contains(value, ",") {
		items := strings.Split(value, ",")
		var result []string
		for _, item := range items {
			trimmed := strings.TrimSpace(item)
			if trimmed != "" {
				result = append(result, trimmed)
			}
		}
		return result
	}

	// Single value
	if strings.TrimSpace(value) != "" {
		return []string{strings.TrimSpace(value)}
	}

	return []string{}
}

// ValidateAgent validates an agent structure and returns validation errors
func ValidateAgent(agent Agent) []ParseError {
	var errors []ParseError

	if agent.Title == "" {
		errors = append(errors, ParseError{
			Section: "title",
			Message: "Agent title is required",
		})
	}

	if agent.Role == "" {
		errors = append(errors, ParseError{
			Section: "role",
			Message: "Agent role is recommended",
		})
	}

	if len(agent.Skills) == 0 {
		errors = append(errors, ParseError{
			Section: "skills",
			Message: "At least one skill is recommended",
		})
	}

	return errors
}

// ExportAgentsToMarkdown creates a comprehensive AGENTS.md with metadata
func ExportAgentsToMarkdown(agents []Agent, includeMetadata bool) string {
	b := &strings.Builder{}

	if includeMetadata {
		b.WriteString("# Agents\n\n")
		b.WriteString("<!-- Generated by Grompt Agent Manager -->\n")
		b.WriteString(fmt.Sprintf("<!-- Generated on: %s -->\n", time.Now().Format("2006-01-02 15:04:05")))
		b.WriteString(fmt.Sprintf("<!-- Total agents: %d -->\n\n", len(agents)))
	} else {
		b.WriteString("# Agents\n\n")
	}

	for _, agent := range agents {
		b.WriteString("## " + agent.Title + "\n")

		if agent.Role != "" {
			b.WriteString("- Role: " + agent.Role + "\n")
		}

		if len(agent.Skills) > 0 {
			b.WriteString("- Skills: " + strings.Join(agent.Skills, ", ") + "\n")
		}

		if len(agent.Restrictions) > 0 {
			b.WriteString("- Restrictions: " + strings.Join(agent.Restrictions, ", ") + "\n")
		}

		if agent.PromptExample != "" {
			b.WriteString("- Prompt Example: " + agent.PromptExample + "\n")
		}

		b.WriteString("\n")
	}

	return b.String()
}

/// internal/types/chat_gpt.go ///
package types

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

type ChatGPTAPI struct {
	apiKey     string
	baseURL    string
	httpClient *http.Client
}

type ChatGPTRequest struct {
	Prompt    string `json:"prompt"`
	MaxTokens int    `json:"max_tokens"`
	Model     string `json:"model"`
}

type ChatGPTAPIRequest struct {
	Model       string           `json:"model"`
	Messages    []ChatGPTMessage `json:"messages"`
	MaxTokens   int              `json:"max_tokens"`
	Temperature float64          `json:"temperature"`
	Stream      bool             `json:"stream"`
}

type ChatGPTMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type ChatGPTAPIResponse struct {
	ID      string          `json:"id"`
	Object  string          `json:"object"`
	Created int64           `json:"created"`
	Model   string          `json:"model"`
	Choices []ChatGPTChoice `json:"choices"`
	Usage   ChatGPTUsage    `json:"usage"`
}

type ChatGPTChoice struct {
	Index        int            `json:"index"`
	Message      ChatGPTMessage `json:"message"`
	FinishReason string         `json:"finish_reason"`
}

type ChatGPTUsage struct {
	PromptTokens     int `json:"prompt_tokens"`
	CompletionTokens int `json:"completion_tokens"`
	TotalTokens      int `json:"total_tokens"`
}

type ChatGPTErrorResponse struct {
	Error struct {
		Message string `json:"message"`
		Type    string `json:"type"`
		Code    string `json:"code"`
	} `json:"error"`
}

func NewChatGPTAPI(apiKey string) *ChatGPTAPI {
	return &ChatGPTAPI{
		apiKey:  apiKey,
		baseURL: "https://api.chatgpt.com/v1/chat/completions",
		httpClient: &http.Client{
			Timeout: 60 * time.Second,
		},
	}
}

func (o *ChatGPTAPI) Complete(prompt string, maxTokens int, model string) (string, error) {
	if o.apiKey == "" {
		return "", fmt.Errorf("API key n√£o configurada")
	}

	// Definir modelo padr√£o se n√£o especificado
	if model == "" {
		model = "gpt-3.5-turbo"
	}

	requestBody := ChatGPTAPIRequest{
		Model: model,
		Messages: []ChatGPTMessage{
			{
				Role:    "user",
				Content: prompt,
			},
		},
		MaxTokens:   maxTokens,
		Temperature: 0.7,
		Stream:      false,
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", fmt.Errorf("erro ao serializar request: %v", err)
	}

	req, err := http.NewRequest("POST", o.baseURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("erro ao criar request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+o.apiKey)

	resp, err := o.httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("erro na requisi√ß√£o: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("erro ao ler resposta: %v", err)
	}

	if resp.StatusCode != http.StatusOK {
		// Tentar parsear erro da ChatGPT
		var errorResp ChatGPTErrorResponse
		if err := json.Unmarshal(body, &errorResp); err == nil {
			return "", fmt.Errorf("ChatGPT API erro: %s", errorResp.Error.Message)
		}
		return "", fmt.Errorf("API retornou status %d: %s", resp.StatusCode, string(body))
	}

	var response ChatGPTAPIResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return "", fmt.Errorf("erro ao decodificar resposta: %v", err)
	}

	if len(response.Choices) == 0 {
		return "", fmt.Errorf("resposta vazia da API")
	}

	return response.Choices[0].Message.Content, nil
}

func (o *ChatGPTAPI) IsAvailable() bool {
	if o.apiKey == "" {
		return false
	}

	// Fazer uma requisi√ß√£o simples para verificar se a API est√° funcionando
	testReq := ChatGPTAPIRequest{
		Model: "gpt-3.5-turbo",
		Messages: []ChatGPTMessage{
			{
				Role:    "user",
				Content: "test",
			},
		},
		MaxTokens: 1,
	}

	jsonData, err := json.Marshal(testReq)
	if err != nil {
		return false
	}

	req, err := http.NewRequest("POST", o.baseURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return false
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+o.apiKey)

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return false
	}
	defer resp.Body.Close()

	// Se retornou 200 ou 400 (bad request), significa que a API est√° respondendo
	// 401 significa unauthorized (API key inv√°lida)
	// 429 significa rate limit
	return resp.StatusCode == http.StatusOK || resp.StatusCode == http.StatusBadRequest
}

// Listar modelos dispon√≠veis
func (o *ChatGPTAPI) ListModels() ([]string, error) {
	if o.apiKey == "" {
		return nil, fmt.Errorf("API key n√£o configurada")
	}

	modelsURL := "https://api.chatgpt.com/v1/models"
	req, err := http.NewRequest("GET", modelsURL, nil)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", "Bearer "+o.apiKey)

	resp, err := o.httpClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("erro ao listar modelos: status %d", resp.StatusCode)
	}

	type ChatGPTModelsResponse struct {
		Data []struct {
			ID     string `json:"id"`
			Object string `json:"object"`
		} `json:"data"`
	}

	var modelsResp ChatGPTModelsResponse
	if err := json.NewDecoder(resp.Body).Decode(&modelsResp); err != nil {
		return nil, err
	}

	var models []string
	for _, model := range modelsResp.Data {
		// Filtrar apenas modelos de chat
		if model.Object == "model" {
			models = append(models, model.ID)
		}
	}

	return models, nil
}

// Modelos comuns da ChatGPT
func (o *ChatGPTAPI) GetCommonModels() []string {
	return []string{
		"gpt-4",
		"gpt-4-turbo",
		"gpt-4o",
		"gpt-4o-mini",
		"gpt-3.5-turbo",
		"gpt-3.5-turbo-16k",
	}
}

/// internal/types/claude.go ///
package types

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

type ClaudeAPI struct {
	apiKey     string
	baseURL    string
	httpClient *http.Client
}

type ClaudeRequest struct {
	Prompt    string `json:"prompt"`
	MaxTokens int    `json:"max_tokens"`
}

type ClaudeAPIRequest struct {
	Model     string `json:"model"`
	MaxTokens int    `json:"max_tokens"`
	Messages  []struct {
		Role    string `json:"role"`
		Content string `json:"content"`
	} `json:"messages"`
}

type ClaudeAPIResponse struct {
	Content []struct {
		Text string `json:"text"`
	} `json:"content"`
}

func NewClaudeAPI(apiKey string) *ClaudeAPI {
	return &ClaudeAPI{
		apiKey:  apiKey,
		baseURL: "https://api.anthropic.com/v1/messages",
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
	}
}

func (c *ClaudeAPI) Complete(prompt string, maxTokens int) (string, error) {
	if c.apiKey == "" {
		return "", fmt.Errorf("API key n√£o configurada")
	}

	requestBody := ClaudeAPIRequest{
		Model:     "claude-3-sonnet-20240229",
		MaxTokens: maxTokens,
		Messages: []struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		}{
			{
				Role:    "user",
				Content: prompt,
			},
		},
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", fmt.Errorf("erro ao serializar request: %v", err)
	}

	req, err := http.NewRequest("POST", c.baseURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("erro ao criar request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("x-api-key", c.apiKey)
	req.Header.Set("anthropic-version", "2023-06-01")

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("erro na requisi√ß√£o: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("erro ao ler resposta: %v", err)
	}

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API retornou status %d: %s", resp.StatusCode, string(body))
	}

	var response ClaudeAPIResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return "", fmt.Errorf("erro ao decodificar resposta: %v", err)
	}

	if len(response.Content) == 0 {
		return "", fmt.Errorf("resposta vazia da API")
	}

	return response.Content[0].Text, nil
}

/// internal/types/config.go ///
// Package types defines the configuration and versioning for the Grompt application.
package types

import (
	"context"
	"time"

	vs "github.com/rafa-mori/grompt/version"
)

var (
	CurrentVersion string    = vs.GetVersion()
	LatestVersion  string    = vs.GetLatestVersionFromGit()
	LastCheckTime  time.Time = time.Now()
)

func init() {
	// Initialize the CurrentVersion and LatestVersion
	// This will run in a goroutine to avoid blocking the main execution
	// and will check for the latest version from Git if needed.
	// If the CurrentVersion is not set, it will use the version from the version package
	// and will update the LatestVersion if the last check was more than 24 hours ago
	// or if it is the first run.
	ctx := context.Background()
	cancel, cancelFunc := context.WithCancel(ctx)
	defer cancelFunc()

	// Use a goroutine to avoid blocking the main execution
	go func(cancel context.Context) {
		select {
		case <-cancel.Done():
			return // Exit if the context is cancelled
		default:
			if CurrentVersion == "" {
				CurrentVersion = vs.GetVersion()
			}
			if LastCheckTime.IsZero() || LastCheckTime.Before(time.Now().Add(-24*time.Hour)) {
				// Check for the latest version from Git
				LatestVersion = vs.GetLatestVersionFromGit()
				if LatestVersion == "" {
					LatestVersion = CurrentVersion // Fallback to current version if check fails
				}
				LastCheckTime = time.Now()
			}
		}
	}(cancel)

	// // Ensure that the CurrentVersion is always set
	// if CurrentVersion == "" {
	// 	CurrentVersion = vs.GetVersion()
	// }
	// if LatestVersion == "" {
	// 	LatestVersion = vs.GetLatestVersionFromGit()
	// }
}

const (
	AppName     = "Grompt"
	AppVersion  = "1.0.0"
	DefaultPort = "8080"
)

type Config struct {
	Port           string
	OpenAIAPIKey   string
	DeepSeekAPIKey string
	ClaudeAPIKey   string
	OllamaEndpoint string
	ChatGPTAPIKey  string
	Debug          bool
}

type APIConfig struct {
	OpenAIAvailable   bool   `json:"openai_available"`
	DeepSeekAvailable bool   `json:"deepseek_available"`
	ClaudeAvailable   bool   `json:"claude_available"`
	OllamaAvailable   bool   `json:"ollama_available"`
	ChatGPTAvailable  bool   `json:"chatgpt_available"`
	DemoMode          bool   `json:"demo_mode"`
	Version           string `json:"version"`
}

func (c *Config) GetAPIConfig() *APIConfig {
	return &APIConfig{
		OpenAIAvailable:   c.OpenAIAPIKey != "",
		DeepSeekAvailable: c.DeepSeekAPIKey != "",
		ClaudeAvailable:   c.ClaudeAPIKey != "",
		OllamaAvailable:   c.checkOllamaConnection(),
		ChatGPTAvailable:  c.ChatGPTAPIKey != "",
		DemoMode:          false,
		Version:           AppVersion,
	}
}

func (c *Config) checkOllamaConnection() bool {
	// Implementar verifica√ß√£o de conex√£o com Ollama
	// Por simplicidade, retorna false por enquanto
	return false
}

/// internal/types/deepseek.go ///
package types

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

type DeepSeekAPI struct {
	apiKey     string
	baseURL    string
	httpClient *http.Client
}

type DeepSeekRequest struct {
	Prompt    string `json:"prompt"`
	MaxTokens int    `json:"max_tokens"`
	Model     string `json:"model"`
}

type DeepSeekAPIRequest struct {
	Model       string            `json:"model"`
	Messages    []DeepSeekMessage `json:"messages"`
	MaxTokens   int               `json:"max_tokens"`
	Temperature float64           `json:"temperature"`
	TopP        float64           `json:"top_p"`
	Stream      bool              `json:"stream"`
}

type DeepSeekMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type DeepSeekAPIResponse struct {
	ID      string           `json:"id"`
	Object  string           `json:"object"`
	Created int64            `json:"created"`
	Model   string           `json:"model"`
	Choices []DeepSeekChoice `json:"choices"`
	Usage   DeepSeekUsage    `json:"usage"`
}

type DeepSeekChoice struct {
	Index        int             `json:"index"`
	Message      DeepSeekMessage `json:"message"`
	FinishReason string          `json:"finish_reason"`
}

type DeepSeekUsage struct {
	PromptTokens     int `json:"prompt_tokens"`
	CompletionTokens int `json:"completion_tokens"`
	TotalTokens      int `json:"total_tokens"`
}

type DeepSeekErrorResponse struct {
	Error struct {
		Message string `json:"message"`
		Type    string `json:"type"`
		Code    string `json:"code"`
		Param   string `json:"param"`
	} `json:"error"`
}

func NewDeepSeekAPI(apiKey string) *DeepSeekAPI {
	return &DeepSeekAPI{
		apiKey:  apiKey,
		baseURL: "https://api.deepseek.com/chat/completions",
		httpClient: &http.Client{
			Timeout: 60 * time.Second,
		},
	}
}

func (d *DeepSeekAPI) Complete(prompt string, maxTokens int, model string) (string, error) {
	if d.apiKey == "" {
		return "", fmt.Errorf("API key n√£o configurada")
	}

	// Definir modelo padr√£o se n√£o especificado
	if model == "" {
		model = "deepseek-chat"
	}

	requestBody := DeepSeekAPIRequest{
		Model: model,
		Messages: []DeepSeekMessage{
			{
				Role:    "user",
				Content: prompt,
			},
		},
		MaxTokens:   maxTokens,
		Temperature: 0.7,
		TopP:        0.95,
		Stream:      false,
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", fmt.Errorf("erro ao serializar request: %v", err)
	}

	req, err := http.NewRequest("POST", d.baseURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("erro ao criar request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+d.apiKey)
	req.Header.Set("User-Agent", "PromptCrafter/1.0")

	resp, err := d.httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("erro na requisi√ß√£o: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("erro ao ler resposta: %v", err)
	}

	if resp.StatusCode != http.StatusOK {
		// Error handling for non-200 responses
		var errorResp DeepSeekErrorResponse
		if err := json.Unmarshal(body, &errorResp); err == nil {
			return "", fmt.Errorf("DeepSeek API erro: %s", errorResp.Error.Message)
		}
		return "", fmt.Errorf("API retornou status %d: %s", resp.StatusCode, string(body))
	}

	var response DeepSeekAPIResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return "", fmt.Errorf("erro ao decodificar resposta: %v", err)
	}

	if len(response.Choices) == 0 {
		return "", fmt.Errorf("resposta vazia da API")
	}

	return response.Choices[0].Message.Content, nil
}

func (d *DeepSeekAPI) IsAvailable() bool {
	if d.apiKey == "" {
		return false
	}

	// Make a simple request to check API availability
	testReq := DeepSeekAPIRequest{
		Model: "deepseek-chat",
		Messages: []DeepSeekMessage{
			{
				Role:    "user",
				Content: "test",
			},
		},
		MaxTokens: 1,
	}

	jsonData, err := json.Marshal(testReq)
	if err != nil {
		return false
	}

	req, err := http.NewRequest("POST", d.baseURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return false
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+d.apiKey)

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return false
	}
	defer resp.Body.Close()

	// If the status code is 200 OK or 400 Bad Request, we consider the API available
	return resp.StatusCode == http.StatusOK || resp.StatusCode == http.StatusBadRequest
}

// GetAvailableModels Available DeepSeek models
func (d *DeepSeekAPI) GetAvailableModels() []string {
	return []string{
		"deepseek-chat",
		"deepseek-coder",
		"deepseek-math",
		"deepseek-reasoner",
	}
}

// HealthCheck Lightweight health check to verify API key and basic connectivity
func (d *DeepSeekAPI) HealthCheck() error {
	if d.apiKey == "" {
		return fmt.Errorf("API key n√£o configurada")
	}

	// Make a simple request to check API key validity
	req, err := http.NewRequest("GET", "https://api.deepseek.com/models", nil)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", "Bearer "+d.apiKey)

	client := &http.Client{Timeout: 5 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode == http.StatusUnauthorized {
		return fmt.Errorf("API key inv√°lida")
	}

	if resp.StatusCode >= 500 {
		return fmt.Errorf("servidor DeepSeek indispon√≠vel")
	}

	return nil
}

// EstimateCost Estimates the cost of a request based on prompt and completion tokens
func (d *DeepSeekAPI) EstimateCost(promptTokens, completionTokens int, model string) float64 {
	var promptPrice, completionPrice float64

	switch model {
	case "deepseek-chat":
		promptPrice = 0.14 / 1000000     // $0.14 by 1M prompt tokens
		completionPrice = 0.28 / 1000000 // $0.28 by 1M completion tokens
	case "deepseek-coder":
		promptPrice = 0.14 / 1000000
		completionPrice = 0.28 / 1000000
	case "deepseek-math":
		promptPrice = 0.14 / 1000000
		completionPrice = 0.28 / 1000000
	default:
		promptPrice = 0.14 / 1000000
		completionPrice = 0.28 / 1000000
	}

	return float64(promptTokens)*promptPrice + float64(completionTokens)*completionPrice
}

/// internal/types/ollama.go ///
package types

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

type OllamaAPI struct {
	baseURL    string
	httpClient *http.Client
}

type OllamaRequest struct {
	Model  string `json:"model"`
	Prompt string `json:"prompt"`
	Stream bool   `json:"stream"`
}

type OllamaResponse struct {
	Response string `json:"response"`
	Done     bool   `json:"done"`
}

func NewOllamaAPI(baseURL string) *OllamaAPI {
	return &OllamaAPI{
		baseURL: baseURL,
		httpClient: &http.Client{
			Timeout: 60 * time.Second,
		},
	}
}

func (o *OllamaAPI) Complete(model, prompt string) (string, error) {
	endpoint := fmt.Sprintf("%s/api/generate", o.baseURL)

	requestBody := OllamaRequest{
		Model:  model,
		Prompt: prompt,
		Stream: false,
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", fmt.Errorf("erro ao serializar request: %v", err)
	}

	req, err := http.NewRequest("POST", endpoint, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("erro ao criar request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := o.httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("erro na requisi√ß√£o para Ollama: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("erro ao ler resposta: %v", err)
	}

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("Ollama retornou status %d: %s", resp.StatusCode, string(body))
	}

	var response OllamaResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return "", fmt.Errorf("erro ao decodificar resposta: %v", err)
	}

	return response.Response, nil
}

func (o *OllamaAPI) IsAvailable() bool {
	endpoint := fmt.Sprintf("%s/api/tags", o.baseURL)

	resp, err := o.httpClient.Get(endpoint)
	if err != nil {
		return false
	}
	defer resp.Body.Close()

	return resp.StatusCode == http.StatusOK
}

/// internal/types/openai.go ///
package types

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

type OpenAIAPI struct {
	apiKey     string
	baseURL    string
	httpClient *http.Client
}

type OpenAIRequest struct {
	Prompt    string `json:"prompt"`
	MaxTokens int    `json:"max_tokens"`
	Model     string `json:"model"`
}

type OpenAIAPIRequest struct {
	Model       string    `json:"model"`
	Messages    []Message `json:"messages"`
	MaxTokens   int       `json:"max_tokens"`
	Temperature float64   `json:"temperature"`
	Stream      bool      `json:"stream"`
}

type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type OpenAIAPIResponse struct {
	ID      string   `json:"id"`
	Object  string   `json:"object"`
	Created int64    `json:"created"`
	Model   string   `json:"model"`
	Choices []Choice `json:"choices"`
	Usage   Usage    `json:"usage"`
}

type Choice struct {
	Index        int     `json:"index"`
	Message      Message `json:"message"`
	FinishReason string  `json:"finish_reason"`
}

type Usage struct {
	PromptTokens     int `json:"prompt_tokens"`
	CompletionTokens int `json:"completion_tokens"`
	TotalTokens      int `json:"total_tokens"`
}

type OpenAIErrorResponse struct {
	Error struct {
		Message string `json:"message"`
		Type    string `json:"type"`
		Code    string `json:"code"`
	} `json:"error"`
}

func NewOpenAIAPI(apiKey string) *OpenAIAPI {
	return &OpenAIAPI{
		apiKey:  apiKey,
		baseURL: "https://api.openai.com/v1/chat/completions",
		httpClient: &http.Client{
			Timeout: 60 * time.Second,
		},
	}
}

func (o *OpenAIAPI) Complete(prompt string, maxTokens int, model string) (string, error) {
	if o.apiKey == "" {
		return "", fmt.Errorf("API key n√£o configurada")
	}

	// Definir modelo padr√£o se n√£o especificado
	if model == "" {
		model = "gpt-3.5-turbo"
	}

	requestBody := OpenAIAPIRequest{
		Model: model,
		Messages: []Message{
			{
				Role:    "user",
				Content: prompt,
			},
		},
		MaxTokens:   maxTokens,
		Temperature: 0.7,
		Stream:      false,
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", fmt.Errorf("erro ao serializar request: %v", err)
	}

	req, err := http.NewRequest("POST", o.baseURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("erro ao criar request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+o.apiKey)

	resp, err := o.httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("erro na requisi√ß√£o: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("erro ao ler resposta: %v", err)
	}

	if resp.StatusCode != http.StatusOK {
		// Tentar parsear erro da OpenAI
		var errorResp OpenAIErrorResponse
		if err := json.Unmarshal(body, &errorResp); err == nil {
			return "", fmt.Errorf("OpenAI API erro: %s", errorResp.Error.Message)
		}
		return "", fmt.Errorf("API retornou status %d: %s", resp.StatusCode, string(body))
	}

	var response OpenAIAPIResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return "", fmt.Errorf("erro ao decodificar resposta: %v", err)
	}

	if len(response.Choices) == 0 {
		return "", fmt.Errorf("resposta vazia da API")
	}

	return response.Choices[0].Message.Content, nil
}

func (o *OpenAIAPI) IsAvailable() bool {
	if o.apiKey == "" {
		return false
	}

	// Fazer uma requisi√ß√£o simples para verificar se a API est√° funcionando
	testReq := OpenAIAPIRequest{
		Model: "gpt-3.5-turbo",
		Messages: []Message{
			{
				Role:    "user",
				Content: "test",
			},
		},
		MaxTokens: 1,
	}

	jsonData, err := json.Marshal(testReq)
	if err != nil {
		return false
	}

	req, err := http.NewRequest("POST", o.baseURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return false
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+o.apiKey)

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return false
	}
	defer resp.Body.Close()

	// Se retornou 200 ou 400 (bad request), significa que a API est√° respondendo
	// 401 significa unauthorized (API key inv√°lida)
	// 429 significa rate limit
	return resp.StatusCode == http.StatusOK || resp.StatusCode == http.StatusBadRequest
}

// Listar modelos dispon√≠veis
func (o *OpenAIAPI) ListModels() ([]string, error) {
	if o.apiKey == "" {
		return nil, fmt.Errorf("API key n√£o configurada")
	}

	modelsURL := "https://api.openai.com/v1/models"
	req, err := http.NewRequest("GET", modelsURL, nil)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", "Bearer "+o.apiKey)

	resp, err := o.httpClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("erro ao listar modelos: status %d", resp.StatusCode)
	}

	type ModelsResponse struct {
		Data []struct {
			ID     string `json:"id"`
			Object string `json:"object"`
		} `json:"data"`
	}

	var modelsResp ModelsResponse
	if err := json.NewDecoder(resp.Body).Decode(&modelsResp); err != nil {
		return nil, err
	}

	var models []string
	for _, model := range modelsResp.Data {
		// Filtrar apenas modelos de chat
		if model.Object == "model" {
			models = append(models, model.ID)
		}
	}

	return models, nil
}

// Modelos comuns da OpenAI
func (o *OpenAIAPI) GetCommonModels() []string {
	return []string{
		"gpt-4",
		"gpt-4-turbo",
		"gpt-4o",
		"gpt-4o-mini",
		"gpt-3.5-turbo",
		"gpt-3.5-turbo-16k",
	}
}

/// logger/logger.go ///
// Package logger provides a simple logging interface for Go applications.
package logger

import (
	"fmt"
	"reflect"
	"runtime"
	"strings"

	l "github.com/rafa-mori/logz"
)

type gLog struct {
	l.Logger
	gLogLevel LogType
}

var (
	// debug is a boolean that indicates whether to log debug messages.
	debug bool
	// g is the global logger instance.
	g *gLog = &gLog{
		Logger:    l.GetLogger("GoBE - Test"),
		gLogLevel: LogTypeInfo,
	}
)

func init() {
	// Set the debug flag to true for testing purposes.
	debug = false
	// Initialize the global logger instance with a default logger.
	if g.Logger == nil {
		g = &gLog{
			Logger:    l.GetLogger("GoBE - Test"),
			gLogLevel: LogTypeInfo,
		}
	}
}

type LogType string

const (
	LogTypeNotice  LogType = "notice"
	LogTypeInfo    LogType = "info"
	LogTypeDebug   LogType = "debug"
	LogTypeError   LogType = "error"
	LogTypeWarn    LogType = "warn"
	LogTypeFatal   LogType = "fatal"
	LogTypePanic   LogType = "panic"
	LogTypeSuccess LogType = "success"
)

// SetDebug is a function that sets the debug flag for logging.
func SetDebug(d bool) { debug = d }

// LogObjLogger is a function that logs messages with the specified log type.
func LogObjLogger[T any](obj *T, logType string, messages ...string) {
	if obj == nil {
		g.ErrorCtx(fmt.Sprintf("log object (%s) is nil", reflect.TypeFor[T]()), map[string]any{
			"context":  "Log",
			"logType":  logType,
			"object":   obj,
			"msg":      messages,
			"showData": true,
		})
		return
	}
	var lgr l.Logger
	if objValueLogger := reflect.ValueOf(obj).Elem().MethodByName("GetLogger"); !objValueLogger.IsValid() {
		if objValueLogger = reflect.ValueOf(obj).Elem().FieldByName("Logger"); !objValueLogger.IsValid() {
			g.ErrorCtx(fmt.Sprintf("log object (%s) does not have a logger field", reflect.TypeFor[T]()), map[string]any{
				"context":  "Log",
				"logType":  logType,
				"object":   obj,
				"msg":      messages,
				"showData": true,
			})
			return
		} else {
			lgrC := objValueLogger.Convert(reflect.TypeFor[l.Logger]())
			if lgrC.IsNil() {
				lgrC = reflect.ValueOf(g.Logger)
			}
			if lgr = lgrC.Interface().(l.Logger); lgr == nil {
				lgr = g.Logger
			}
		}
	} else {
		//lgrC := objValueLogger.Call(nil)[0].Convert(reflect.TypeFor[l.Logger]())
		//if lgrC.IsNil() {
		//	lgrC = reflect.ValueOf(g.Logger)
		//}
		//if lgr = lgrC.Interface().(l.Logger); lgr == nil {
		lgr = g.Logger
		//}
	}
	pc, file, line, ok := runtime.Caller(1)
	if !ok {
		lgr.ErrorCtx("Log: unable to get caller information", nil)
		return
	}
	funcName := runtime.FuncForPC(pc).Name()
	ctxMessageMap := map[string]any{
		"context":  funcName,
		"file":     file,
		"line":     line,
		"showData": debug,
	}
	fullMessage := strings.Join(messages, " ")
	logType = strings.ToLower(logType)
	if logType != "" {
		if reflect.TypeOf(logType).ConvertibleTo(reflect.TypeFor[LogType]()) {
			lType := LogType(logType)
			ctxMessageMap["logType"] = logType
			logging(lgr, lType, fullMessage, ctxMessageMap)
		} else {
			lgr.ErrorCtx(fmt.Sprintf("logType (%s) is not valid", logType), ctxMessageMap)
		}
	} else {
		lgr.InfoCtx(fullMessage, ctxMessageMap)
	}
}

// Log is a function that logs messages with the specified log type and caller information.
func Log(logType string, messages ...any) {
	pc, file, line, ok := runtime.Caller(1)
	if !ok {
		g.ErrorCtx("Log: unable to get caller information", nil)
		return
	}
	funcName := runtime.FuncForPC(pc).Name()
	ctxMessageMap := map[string]any{
		"context":  funcName,
		"file":     file,
		"line":     line,
		"showData": debug,
	}
	fullMessage := ""
	if len(messages) > 0 {
		fullMessage = fmt.Sprintf("%v", messages[0:])
	}
	logType = strings.ToLower(logType)
	if logType != "" {
		if reflect.TypeOf(logType).ConvertibleTo(reflect.TypeFor[LogType]()) {
			lType := LogType(logType)
			ctxMessageMap["logType"] = logType
			logging(g.Logger, lType, fullMessage, ctxMessageMap)
		} else {
			g.ErrorCtx(fmt.Sprintf("logType (%s) is not valid", logType), ctxMessageMap)
		}
	} else {
		g.InfoCtx(fullMessage, ctxMessageMap)
	}
}

// logging is a helper function that logs messages with the specified log type.
func logging(lgr l.Logger, lType LogType, fullMessage string, ctxMessageMap map[string]interface{}) {
	debugCtx := debug
	if !debugCtx {
		if lType == "error" || lType == "fatal" || lType == "panic" || lType == "debug" {
			// If debug is false, set the debug value based on the logType
			debugCtx = true
		} else {
			debugCtx = false
		}
	}
	ctxMessageMap["showData"] = debugCtx
	switch lType {
	case LogTypeInfo:
		lgr.InfoCtx(fullMessage, ctxMessageMap)
	case LogTypeDebug:
		lgr.DebugCtx(fullMessage, ctxMessageMap)
	case LogTypeError:
		lgr.ErrorCtx(fullMessage, ctxMessageMap)
	case LogTypeWarn:
		lgr.WarnCtx(fullMessage, ctxMessageMap)
	case LogTypeNotice:
		lgr.NoticeCtx(fullMessage, ctxMessageMap)
	case LogTypeSuccess:
		lgr.SuccessCtx(fullMessage, ctxMessageMap)
	case LogTypeFatal:
		lgr.FatalCtx(fullMessage, ctxMessageMap)
	case LogTypePanic:
		lgr.FatalCtx(fullMessage, ctxMessageMap)
	default:
		lgr.InfoCtx(fullMessage, ctxMessageMap)
	}
	debugCtx = debug
}

/// support/config.sh ///
#!/usr/bin/env bash

set -euo pipefail
set -o errtrace
set -o functrace
set -o posix
IFS=$'\n\t'

# Define o diret√≥rio raiz (assumindo que este script est√° em lib/ no root)
_ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
_APP_NAME="${APP_NAME:-$(basename "${_ROOT_DIR}")}"
_PROJECT_NAME="$_APP_NAME"
_OWNER="${OWNER:-rafa-mori}"
# Tenta ler a vers√£o, ou define um fallback
_VERSION=$(cat "$_ROOT_DIR/version/CLI_VERSION" 2>/dev/null || echo "v0.0.0")
# Extrai a vers√£o do Go do go.mod (certifique-se de que este arquivo exista na raiz)
_VERSION_GO=$(grep '^go ' "$_ROOT_DIR/go.mod" | awk '{print $2}')

_LICENSE="MIT"

_ABOUT="################################################################################
  Este script instala o projeto ${_PROJECT_NAME}, vers√£o ${_VERSION}.
  OS suportados: Linux, MacOS, Windows
  Arquiteturas suportadas: amd64, arm64, 386
  Fonte: https://github.com/${_OWNER}/${_PROJECT_NAME}
  Binary Release: https://github.com/${_OWNER}/${_PROJECT_NAME}/releases/latest
  License: ${_LICENSE}
  Notas:
    - [version] √© opcional; se omitido, a √∫ltima vers√£o ser√° utilizada.
    - Se executado localmente, o script tentar√° resolver a vers√£o pelos tags do reposit√≥rio.
    - Instala em ~/.local/bin para usu√°rio n√£o-root ou em /usr/local/bin para root.
    - Adiciona o diret√≥rio de instala√ß√£o √† vari√°vel PATH.
    - Instala o UPX se necess√°rio, ou compila o bin√°rio (build) conforme o comando.
    - Faz download do bin√°rio via URL de release ou efetua limpeza de artefatos.
    - Verifica depend√™ncias e vers√£o do Go.
################################################################################"

_BANNER="################################################################################

               ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà     ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà     ‚ñà‚ñà
              ‚ñë‚ñà‚ñà  ‚ñà‚ñà ‚ñë‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñà‚ñà   ‚ñà‚ñà
              ‚ñë‚ñà‚ñà ‚ñà‚ñà  ‚ñë‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñë‚ñà   ‚ñë‚ñà‚ñà ‚ñë‚ñà‚ñà       ‚ñë‚ñë‚ñà‚ñà ‚ñà‚ñà
              ‚ñë‚ñà‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñë‚ñë‚ñà‚ñà‚ñà
              ‚ñë‚ñà‚ñà‚ñë‚ñà‚ñà  ‚ñë‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë ‚ñà‚ñà‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë     ‚ñà‚ñà‚ñë‚ñà‚ñà
              ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà ‚ñë‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñë‚ñà    ‚ñë‚ñà‚ñà‚ñë‚ñà‚ñà        ‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà
              ‚ñë‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñë‚ñë‚ñà‚ñà
              ‚ñë‚ñë   ‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë     ‚ñë‚ñë   "

# Caminhos para a compila√ß√£o
_CMD_PATH="$_ROOT_DIR/cmd"
_BUILD_PATH="$(dirname "$_CMD_PATH")"
_BINARY="$_BUILD_PATH/$_APP_NAME"

# Diret√≥rios de instala√ß√£o
_LOCAL_BIN="${HOME:-"~"}/.local/bin"
_GLOBAL_BIN="/usr/local/bin"

# Caso queira, defina o OWNER (use no get_release_url)
_OWNER="rafa-mori"

/// support/info.sh ///
#!/usr/bin/env bash
# lib/info.sh ‚Äì Fun√ß√µes para exibir banners e resumo de instala√ß√£o

show_about() {
    printf '%s\n\n' "${_ABOUT:-}"
}

show_banner() {
    printf '\n%s\n\n' "${_BANNER:-}"
}

show_headers() {
    show_banner || return 1
    show_about || return 1
}

summary() {
    local install_dir="$_BINARY"
    log success "Build e instala√ß√£o conclu√≠dos!"
    log success "Bin√°rio: $_BINARY"
    log success "Instalado em: ${install_dir}"
    check_path "$install_dir"
}

export -f show_about
export -f show_banner
export -f show_headers
export -f summary


/// support/install.sh ///
#!/usr/bin/env bash
# shellcheck disable=SC2065,SC2015

# Script Metadata
__secure_logic_version="1.0.0"
__secure_logic_date="$( date +%Y-%m-%d )"
__secure_logic_author="Rafael Mori"
__secure_logic_use_type="exec"
__secure_logic_init_timestamp="$(date +%s)"
__secure_logic_elapsed_time=0

# Check if verbose mode is enabled
if [[ "${MYNAME_VERBOSE:-false}" == "true" ]]; then
  set -x  # Enable debugging
fi

IFS=$'\n\t'

__secure_logic_sourced_name() {
  local _self="${BASH_SOURCE-}"
  _self="${_self//${_kbx_root:-$()}/}"
  _self="${_self//\.sh/}"
  _self="${_self//\-/_}"
  _self="${_self//\//_}"
  echo "_was_sourced_${_self//__/_}"
  return 0
}

__first(){
  if [ "$EUID" -eq 0 ] || [ "$UID" -eq 0 ]; then
    echo "Please do not run as root." 1>&2 > /dev/tty
    exit 1
  elif [ -n "${SUDO_USER:-}" ]; then
    echo "Please do not run as root, but with sudo privileges." 1>&2 > /dev/tty
    exit 1
  else
    # shellcheck disable=SC2155
    local _ws_name="$(__secure_logic_sourced_name)"

    if test "${BASH_SOURCE-}" != "${0}"; then
      if test $__secure_logic_use_type != "lib"; then
        echo "This script is not intended to be sourced." 1>&2 > /dev/tty
        echo "Please run it directly." 1>&2 > /dev/tty
        exit 1
      fi
      # If the script is sourced, we set the variable to true
      # and export it to the environment without changing
      # the shell options.
      export "${_ws_name}"="true"
    else
      if test $__secure_logic_use_type != "exec"; then
        echo "This script is not intended to be executed directly." 1>&2 > /dev/tty
        echo "Please source it instead." 1>&2 > /dev/tty
        exit 1
      fi
      # If the script is executed directly, we set the variable to false
      # and export it to the environment. We also set the shell options
      # to ensure a safe execution.
      export "${_ws_name}"="false"
      set -o errexit # Exit immediately if a command exits with a non-zero status
      set -o nounset # Treat unset variables as an error when substituting
      set -o pipefail # Return the exit status of the last command in the pipeline that failed
      set -o errtrace # If a command fails, the shell will exit immediately
      set -o functrace # If a function fails, the shell will exit immediately
      shopt -s inherit_errexit # Inherit the errexit option in functions
    fi
  fi
}

run_custom_scripts() {
  local _STAGE="${1:-post}"

  if test -d "${_SCRIPT_DIR}/${_STAGE}.d/"; then
    log info "Diret√≥rio de scripts personalizados encontrado: ${_SCRIPT_DIR}/${_STAGE}.d/"
    if ls -1A "${_SCRIPT_DIR}/${_STAGE}.d/" >/dev/null 2>&1; then
      log info "Executando scripts personalizados..."

      local _CUSTOM_SCRIPTS=()
      _CUSTOM_SCRIPTS=( "$(ls -1A "${_SCRIPT_DIR}/${_STAGE}.d/" || true)" )

      for _CUSTOM_SCRIPT in "${_CUSTOM_SCRIPTS[@]}"; do
        if [[ -f "${_SCRIPT_DIR}/${_STAGE}.d/${_CUSTOM_SCRIPT}" ]]; then
          log info "Executando script: ${_CUSTOM_SCRIPT}"

          chmod +x "${_SCRIPT_DIR}/${_STAGE}.d/${_CUSTOM_SCRIPT}" || log error "Erro ao definir permiss√£o de execu√ß√£o para o script: ${_CUSTOM_SCRIPT}"

          "${_SCRIPT_DIR}/${_STAGE}.d/${_CUSTOM_SCRIPT}" || log error "Erro ao executar o script: ${_CUSTOM_SCRIPT}"
        else
          log warn "Script n√£o encontrado: ${_CUSTOM_SCRIPT}"
        fi
      done  
    else
      log warn "Nenhum script personalizado encontrado no diret√≥rio: ${_SCRIPT_DIR}/${_STAGE}.d/"
      return 0
    fi
  else
    log warn "Diret√≥rio de scripts personalizados n√£o encontrado: ${_SCRIPT_DIR}/${_STAGE}.d/"
    return 0
  fi
}

_DEBUG=${DEBUG:-false}
_HIDE_ABOUT=${HIDE_ABOUT:-false}

__first "$@" >/dev/tty || exit 1

# Carrega os arquivos de biblioteca
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
#shellcheck source=/dev/null
test -z "${_BANNER:-}" && source "${_SCRIPT_DIR}/config.sh" || true
#shellcheck source=/dev/null
test -z "$(declare -f log)" >/dev/null && source "${_SCRIPT_DIR}/utils.sh" || true
#shellcheck source=/dev/null
test -z "$(declare -f what_platform)" >/dev/null && source "${_SCRIPT_DIR}/platform.sh" || true
#shellcheck source=/dev/null
test -z "$(declare -f check_dependencies)" >/dev/null && source "${_SCRIPT_DIR}/validate.sh" || true
#shellcheck source=/dev/null
test -z "$(declare -f detect_shell_rc)" >/dev/null && source "${_SCRIPT_DIR}/install_funcs.sh" || true
#shellcheck source=/dev/null
test -z "$(declare -f build_binary)" >/dev/null && source "${_SCRIPT_DIR}/build.sh" || true
#shellcheck source=/dev/null
test -z "$(declare -f show_banner)" >/dev/null && source "${_SCRIPT_DIR}/info.sh" || true

# Inicializa os traps
set_trap "$@"

clear_screen

__main() {
  if ! what_platform; then
    log error "Plataforma n√£o suportada: ${_PLATFORM}"
    exit 1
  fi

  if [[ "${_DEBUG}" != true ]]; then
    show_headers
    if [[ -z "${_HIDE_ABOUT}" ]]; then
      show_about
    fi
  else
    log info "Modo debug ativado; banner ser√° ignorado..."
    if [[ -z "${_HIDE_ABOUT}" ]]; then
      show_about
    fi
  fi

  _ARGS=( "$@" )
  local default_label='Auto detect'
  local arrArgs=( "${_ARGS[@]:0:$#}" )
  local PLATFORM_ARG
  PLATFORM_ARG=$(_get_os_from_args "${arrArgs[1]:-${_PLATFORM}}")
  local ARCH_ARG
  ARCH_ARG=$(_get_arch_arr_from_args "${arrArgs[2]:-${_ARCH}}")

  log info "Comando: ${arrArgs[0]:-}" true
  log info "Plataforma: ${PLATFORM_ARG:-$default_label}" true
  log info "Arquitetura: ${ARCH_ARG:-$default_label}" true
  log info "Args: ${_ARGS[*]:-}" true

  case "${arrArgs[0]:-}" in
    build|BUILD|-b|-B)
      # validate_versions
      log info "Executando comando de build..."
      build_binary "${PLATFORM_ARG}" "${ARCH_ARG}" || exit 1
      ;;
    install|INSTALL|-i|-I)
      log info "Executando comando de instala√ß√£o..."
      read -r -p "Deseja baixar o bin√°rio pr√©-compilado? [y/N] (Caso contr√°rio, far√° build local): " choice </dev/tty
      log info "Escolha do usu√°rio: ${choice}"
      if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
          log info "Baixando bin√°rio pr√©-compilado..."
          install_from_release
      else
          log info "Realizando build local..."
          validate_versions
          build_binary "${PLATFORM_ARG}" "${ARCH_ARG}" || exit 1
          install_binary
      fi
      summary
      ;;
    clear|clean|CLEAN|-c|-C)
      log info "Executando comando de limpeza..."
      clean_artifacts
      log success "Clean executado com sucesso."
      ;;
    *)
      log error "Comando inv√°lido: ${arrArgs[0]:-}"
      echo "Uso: $0 {build|install|clean}"
      ;;
  esac
}

# Fun√ß√£o para limpar artefatos de build
clean_artifacts() {
    log info "Limpando artefatos de build..."
    local platforms=("windows" "darwin" "linux")
    local archs=("amd64" "386" "arm64")
    for platform in "${platforms[@]}"; do
        for arch in "${archs[@]}"; do
            local output_name
            output_name=$(printf '%s_%s_%s' "${_BINARY}" "${platform}" "${arch}")
            if [[ "${platform}" != "windows" ]]; then
                local compress_name="${output_name}.tar.gz"
            else
                output_name="${output_name}.exe"
                local compress_name="${_BINARY}_${platform}_${arch}.zip"
            fi
            rm -f "${output_name}" || true
            rm -f "${compress_name}" || true
        done
    done
    log success "Artefatos de build removidos."
}

__secure_logic_main() {
  local _ws_name
  _ws_name="$(__secure_logic_sourced_name)"
  local _ws_name_val
  _ws_name_val=$(eval "echo \${$_ws_name}")
  if test "${_ws_name_val}" != "true"; then
    __main "$@"
    return $?
  else
    # If the script is sourced, we export the functions
    log error "This script is not intended to be sourced."
    log error "Please run it directly."
    return 1
  fi
}

run_custom_scripts "pre" "$@" || log error "Erro ao executar scripts pr√©-instala√ß√£o."

__secure_logic_init_timestamp="$(date +%s)"

# echo "MAKE ARGS: ${ARGS[*]:-}"
log info "Starting installation script..."
__secure_logic_main "$@"

__secure_logic_elapsed_time="$(($(date +%s) - __secure_logic_init_timestamp))"

if [[ "${MYNAME_VERBOSE:-false}" == "true" || "${_DEBUG:-false}" == "true" ]]; then
  log info "Script executed in ${__secure_logic_elapsed_time} seconds."
fi

run_custom_scripts "post" "$@" || log error "Erro ao executar scripts p√≥s-instala√ß√£o."

# End of script logic

/// support/install_funcs.sh ///
#!/usr/bin/env bash
# lib/install_funcs.sh ‚Äì Fun√ß√µes para instala√ß√£o e manipula√ß√£o de PATH

install_upx() {
    if ! command -v upx &> /dev/null; then
        if ! sudo -v &> /dev/null; then
            log error "Voc√™ n√£o tem permiss√µes de superusu√°rio para instalar o empacotador de bin√°rios."
            log warn "Se deseja o empacotamento de bin√°rios, instale o UPX manualmente."
            log warn "Veja: https://upx.github.io/"
            return 1
        fi
        if [[ "$(uname)" == "Darwin" ]]; then
            brew install upx >/dev/null
        elif command -v apt-get &> /dev/null; then
            sudo apt-get install -y upx >/dev/null
        elif command -v yum &> /dev/null; then
            sudo yum install -y upx >/dev/null
        elif command -v dnf &> /dev/null; then
            sudo dnf install -y upx >/dev/null
        elif command -v pacman &> /dev/null; then
            sudo pacman -S --noconfirm upx >/dev/null
        elif command -v zypper &> /dev/null; then
            sudo zypper install -y upx >/dev/null
        elif command -v apk &> /dev/null; then
            sudo apk add upx >/dev/null
        elif command -v port &> /dev/null; then
            sudo port install upx >/dev/null
        elif command -v snap &> /dev/null; then
            sudo snap install upx >/dev/null
        elif command -v flatpak &> /dev/null; then
            sudo flatpak install flathub org.uptane.upx -y >/dev/null
        else
            log warn "Se deseja o empacotamento de bin√°rios, instale o UPX manualmente."
            log warn "Veja: https://upx.github.io/"
            return 1
        fi
    fi

    return 0
}

detect_shell_rc() {
    local shell_rc_file
    local user_shell
    user_shell=$(basename "$SHELL")

    case "$user_shell" in
        bash) shell_rc_file="${HOME:-~}/.bashrc" ;;
        zsh) shell_rc_file="${HOME:-~}/.zshrc" ;;
        sh) shell_rc_file="${HOME:-~}/.profile" ;;
        fish) shell_rc_file="${HOME:-~}/.config/fish/config.fish" ;;
        *)
            log warn "Shell n√£o suportado; ajuste o PATH manualmente."
            return 1
            ;;
    esac
    
    if [ ! -f "$shell_rc_file" ]; then
        log error "Arquivo de configura√ß√£o n√£o encontrado: ${shell_rc_file}"
        return 1
    fi

    echo "$shell_rc_file"

    return 0
}

add_to_path() {
    local target_path="${1:-}"

    local shell_rc_file=""

    local path_expression=""

    path_expression="export PATH=\"${target_path}:\$PATH\""

    shell_rc_file="$(detect_shell_rc)"


    if [ -z "$shell_rc_file" ]; then
        log error "N√£o foi poss√≠vel identificar o arquivo de configura√ß√£o do shell."
        return 1
    fi
    if grep -q "${path_expression}" "$shell_rc_file" 2>/dev/null; then
        log success "$target_path j√° est√° no PATH do $shell_rc_file."
        return 0
    fi

    if [[ -z "${target_path}" ]]; then
        log error "Caminho de destino n√£o fornecido."
        return 1
    fi

    if [[ ! -d "${target_path}" ]]; then
        log error "Caminho de destino n√£o √© um diret√≥rio v√°lido: $target_path"
        return 1
    fi

    if [[ ! -f "${shell_rc_file}" ]]; then
        log error "Arquivo de configura√ß√£o n√£o encontrado: ${shell_rc_file}"
        return 1
    fi

    # echo "export PATH=${target_path}:\$PATH" >> "$shell_rc_file"
    printf '%s\n' "${path_expression}" | tee -a "$shell_rc_file" >/dev/null || {
        log error "Falha ao adicionar $target_path ao PATH em $shell_rc_file."
        return 1
    }

    log success "Adicionado $target_path ao PATH em $shell_rc_file."
    
    "$SHELL" -c "source ${shell_rc_file}" || {
        log warn "Falha ao recarregar o shell. Por favor, execute 'source ${shell_rc_file}' manualmente."
    }

    return 0
}

install_binary() {
    local SUFFIX="${_PLATFORM_WITH_ARCH}"
    local BINARY_TO_INSTALL="${_BINARY}${SUFFIX:+_${SUFFIX}}"
    log info "Instalando o bin√°rio: '${BINARY_TO_INSTALL}' como '$_APP_NAME'"

    if [ "$(id -u)" -ne 0 ]; then
        log info "Usu√°rio n√£o-root detectado. Instalando em ${_LOCAL_BIN}..."
        mkdir -p "$_LOCAL_BIN"
        cp "$BINARY_TO_INSTALL" "$_LOCAL_BIN/$_APP_NAME" || exit 1
        add_to_path "$_LOCAL_BIN"
    else
        log info "Usu√°rio root detectado. Instalando em ${_GLOBAL_BIN}..."
        cp "$BINARY_TO_INSTALL" "$_GLOBAL_BIN/$_APP_NAME" || exit 1
        add_to_path "$_GLOBAL_BIN"
    fi
}

download_binary() {
    if ! what_platform; then
        log error "Falha ao detectar a plataforma."
        return 1
    fi
    if [[ -z "${_PLATFORM}" ]]; then
        log error "Plataforma n√£o suportada: ${_PLATFORM}"
        return 1
    fi
    local version
    version=$(curl -s "https://api.github.com/repos/${_OWNER}/${_PROJECT_NAME}/releases/latest" | grep "tag_name" | cut -d '"' -f 4 || echo "latest")
    if [ -z "$version" ]; then
        log error "Falha ao determinar a √∫ltima vers√£o."
        return 1
    fi

    local release_url
    release_url=$(get_release_url)
    log info "Baixando o bin√°rio ${_APP_NAME} para OS=${_PLATFORM}, ARCH=${_ARCH}, Vers√£o=${version}..."
    log info "URL de Release: ${release_url}"

    local archive_path="${_TEMP_DIR}/${_APP_NAME}.tar.gz"
    if ! curl -L -o "${archive_path}" "${release_url}"; then
        log error "Falha ao baixar o bin√°rio de: ${release_url}"
        return 1
    fi
    log success "Bin√°rio baixado com sucesso."

    log info "Extraindo o bin√°rio para: $(dirname "${_BINARY}")"
    if ! tar -xzf "${archive_path}" -C "$(dirname "${_BINARY}")"; then
        log error "Falha ao extrair o bin√°rio de: ${archive_path}"
        rm -rf "${_TEMP_DIR}"
        exit 1
    fi

    rm -rf "${_TEMP_DIR}"
    log success "Bin√°rio extra√≠do com sucesso."

    if [ ! -f "$_BINARY" ]; then
        log error "Bin√°rio n√£o encontrado ap√≥s extra√ß√£o: ${_BINARY}"
        exit 1
    fi
    log success "Download e extra√ß√£o de ${_APP_NAME} conclu√≠dos!"
}

install_from_release() {
    download_binary
    install_binary
}

check_path() {
    log info "Verificando se o diret√≥rio de instala√ß√£o est√° no PATH..."
    if ! echo "$PATH" | grep -q "$1"; then
        log warn "$1 n√£o est√° no PATH."
        log warn "Adicione: export PATH=$1:\$PATH"
    else
        log success "$1 j√° est√° no PATH."
    fi
}

export -f install_upx
export -f detect_shell_rc
export -f add_to_path
export -f install_binary
export -f download_binary
export -f install_from_release
export -f check_path

/// support/platform.sh ///
#!/usr/bin/env bash

set -euo pipefail
set -o errtrace
set -o functrace
set -o posix
IFS=$'\n\t'

get_release_url() {
    local os="${_PLATFORM%%-*}"
    local format
    if [[ "$os" == "windows" ]]; then
      format="zip"
    else
      format="tar.gz"
    fi
    echo "'https://github.com/${_OWNER}/${_PROJECT_NAME}/releases/download/${_VERSION}/${_PROJECT_NAME}_.${format}'"
}

what_platform() {
  local _os
  _os="$(uname -s)"
  local _arch
  _arch="$(uname -m)"
  local platform=""

  case "${_os}" in
  *Linux*|*Nix*)
    _os="linux"
    case "${_arch}" in
      "x86_64") _arch="amd64" ;;
      "armv6") _arch="armv6l" ;;
      "armv8"|"aarch64") _arch="arm64" ;;
      *386*) _arch="386" ;;
    esac
    platform="linux-${_arch}"
    ;;
  *Darwin*)
    _os="darwin"
    case "${_arch}" in
      "x86_64") _arch="amd64" ;;
      "arm64") _arch="arm64" ;;
    esac
    platform="darwin-${_arch}"
    ;;
  MINGW*|MSYS*|CYGWIN*|Win*)
    _os="windows"
    case "${_arch}" in
      "x86_64") _arch="amd64" ;;
      "arm64") _arch="arm64" ;;
    esac
    platform="windows-${_arch}"
    ;;
  *)
    log error "Plataforma n√£o suportada: ${_os} ${_arch}"
    log error "Informe este problema aos mantenedores do projeto."
    return 1
    ;;
  esac

  export _PLATFORM_WITH_ARCH="${platform//-/_}"
  export _PLATFORM="${_os}"
  export _ARCH="${_arch}"

  return 0
}

_get_os_arr_from_args() {
  local _PLATFORM_ARG=$1
  if [[ "${_PLATFORM_ARG}" == "all" ]]; then
    echo "windows darwin linux"
  else
    echo "${_PLATFORM_ARG}"
  fi
}

_get_arch_arr_from_args() {
  local _ARCH_ARG=$1
  if [[ "${_ARCH_ARG}" == "all" ]]; then
    echo "amd64 386 arm64"
  else
    echo "${_ARCH_ARG}"
  fi
}

_get_os_from_args() {
  local arg=$1
  case "$arg" in
    all|ALL|a|A|-a|-A) echo "all" ;;
    win|WIN|windows|WINDOWS|w|W|-w|-W) echo "windows" ;;
    linux|LINUX|l|L|-l|-L) echo "linux" ;;
    darwin|DARWIN|macOS|MACOS|m|M|-m|-M) echo "darwin" ;;
    *)
      log error "Plataforma inv√°lida: '${arg}'. Op√ß√µes v√°lidas: windows, linux, darwin, all."
      exit 1
      ;;
  esac
}

_get_arch_from_args() {
  local arg=$1
  case "$arg" in
    all|ALL|a|A|-a|-A) echo "all" ;;
    amd64|AMD64|x86_64|X86_64|x64|X64) echo "amd64" ;;
    arm64|ARM64|aarch64|AARCH64) echo "arm64" ;;
    386|i386|I386) echo "386" ;;
    *)
      log error "Arquitetura inv√°lida: '${arg}'. Op√ß√µes v√°lidas: amd64, arm64, 386."
      exit 1
      ;;
  esac
}

export -f _get_os_arr_from_args
export -f _get_arch_arr_from_args
export -f _get_os_from_args
export -f _get_arch_from_args
export -f get_release_url
export -f what_platform

what_platform "${@}"

/// support/utils.sh ///
#!/usr/bin/env bash
# lib/utils.sh ‚Äì Fun√ß√µes utilit√°rias

set -euo pipefail
set -o errtrace
set -o functrace
set -o posix
IFS=$'\n\t'

# C√≥digos de cor para logs
_SUCCESS="\033[0;32m"
_WARN="\033[0;33m"
_ERROR="\033[0;31m"
_INFO="\033[0;36m"
_NC="\033[0m"

log() {
  local type=${1:-info}
  local message=${2:-}
  local debug=${3:-${DEBUG:-false}}

  case $type in
    info|_INFO|-i|-I)
      if [[ "$debug" == true ]]; then
        printf '%b[_INFO]%b ‚ÑπÔ∏è  %s\n' "$_INFO" "$_NC" "$message"
      fi
      ;;
    warn|_WARN|-w|-W)
      if [[ "$debug" == true ]]; then
        printf '%b[_WARN]%b ‚ö†Ô∏è  %s\n' "$_WARN" "$_NC" "$message"
      fi
      ;;
    error|_ERROR|-e|-E)
      printf '%b[_ERROR]%b ‚ùå  %s\n' "$_ERROR" "$_NC" "$message"
      ;;
    success|_SUCCESS|-s|-S)
      printf '%b[_SUCCESS]%b ‚úÖ  %s\n' "$_SUCCESS" "$_NC" "$message"
      ;;
    *)
      if [[ "$debug" == true ]]; then
        log "info" "$message" "$debug"
      fi
      ;;
  esac
}

clear_screen() {
  printf "\033[H\033[2J"
}

get_current_shell() {
  local shell_proc
  shell_proc=$(cat /proc/$$/comm)
  case "${0##*/}" in
    ${shell_proc}*)
      local shebang
      shebang=$(head -1 "$0")
      printf '%s\n' "${shebang##*/}"
      ;;
    *)
      printf '%s\n' "$shell_proc"
      ;;
  esac
}

# Cria um diret√≥rio tempor√°rio para cache
_TEMP_DIR="${_TEMP_DIR:-$(mktemp -d)}"
if [[ -d "${_TEMP_DIR}" ]]; then
    log info "Diret√≥rio tempor√°rio criado: ${_TEMP_DIR}"
else
    log error "Falha ao criar o diret√≥rio tempor√°rio."
fi

clear_script_cache() {
  trap - EXIT HUP INT QUIT ABRT ALRM TERM
  if [[ ! -d "${_TEMP_DIR}" ]]; then
    exit 0
  fi
  rm -rf "${_TEMP_DIR}" || true
  if [[ -d "${_TEMP_DIR}" ]] && sudo -v 2>/dev/null; then
    sudo rm -rf "${_TEMP_DIR}"
    if [[ -d "${_TEMP_DIR}" ]]; then
      printf '%b[_ERROR]%b ‚ùå  %s\n' "$_ERROR" "$_NC" "Falha ao remover o diret√≥rio tempor√°rio: ${_TEMP_DIR}"
    else
      printf '%b[_SUCCESS]%b ‚úÖ  %s\n' "$_SUCCESS" "$_NC" "Diret√≥rio tempor√°rio removido: ${_TEMP_DIR}"
    fi
  fi
  exit 0
}

set_trap() {
  local current_shell=""
  current_shell=$(get_current_shell)
  case "${current_shell}" in
    *ksh|*zsh|*bash)
      declare -a FULL_SCRIPT_ARGS=("$@")
      if [[ "${FULL_SCRIPT_ARGS[*]}" =~ -d ]]; then
          set -x
      fi
      if [[ "${current_shell}" == "bash" ]]; then
        set -o errexit
        set -o pipefail
        set -o errtrace
        set -o functrace
        shopt -s inherit_errexit
      fi
      trap 'clear_script_cache' EXIT HUP INT QUIT ABRT ALRM TERM
      ;;
  esac
}

/// support/validate.sh ///
#!/usr/bin/env bash
# lib/validate.sh ‚Äì Valida√ß√£o da vers√£o do Go e depend√™ncias

validate_versions() {
    local REQUIRED_GO_VERSION="${_VERSION_GO:-1.20.0}"
    local GO_VERSION
    GO_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
    if [[ "$(printf '%s\n' "$REQUIRED_GO_VERSION" "$GO_VERSION" | sort -V | head -n1)" != "$REQUIRED_GO_VERSION" ]]; then
        log error "A vers√£o do Go deve ser >= $REQUIRED_GO_VERSION. Detectado: $GO_VERSION"
        exit 1
    fi
    log success "Vers√£o do Go v√°lida: $GO_VERSION"
    go mod tidy || return 1
}

check_dependencies() {
    for dep in "$@"; do
        if ! command -v "$dep" > /dev/null; then
            log error "$dep n√£o est√° instalado."
            exit 1
        else
            log success "$dep est√° instalado."
        fi
    done
}

export -f validate_versions
export -f check_dependencies

/// tests/example_agents.md ///
# Agents

## Agent 1: Python Backend Developer
- Role: Design and implement scalable backend systems using Python and FastAPI
- Skills: Python, FastAPI, PostgreSQL, Docker, Test-Driven Development, Redis, Celery
- Restrictions: Avoid synchronous operations, must use async/await patterns, no Django
- Prompt Example: "Create a REST API endpoint for user authentication using FastAPI and JWT tokens. Include proper error handling and validation."

## Agent 2: React Frontend Developer
- Role: Build modern, responsive web applications using React and TypeScript
- Skills: React, TypeScript, Tailwind CSS, Redux Toolkit, React Query, Jest, Cypress
- Restrictions: No class components, use functional components with hooks only
- Prompt Example: "Develop a user dashboard component with dark/light theme support, responsive design, and real-time data updates."

## Agent 3: DevOps Engineer
- Role: Manage infrastructure, CI/CD pipelines, and deployment processes
- Skills: Docker, Kubernetes, GitHub Actions, Terraform, AWS, Monitoring, Logging
- Restrictions: All infrastructure must be as code, no manual configurations
- Prompt Example: "Set up a complete CI/CD pipeline for a Python application with automated testing, security scanning, and blue-green deployment."

## Agent 4: Database Architect
- Role: Design and optimize database schemas and queries for high performance
- Skills: PostgreSQL, MongoDB, Redis, Database Indexing, Query Optimization, Data Modeling
- Restrictions: Must consider scalability and performance in all designs
- Prompt Example: "Design a database schema for a multi-tenant SaaS application with proper data isolation and query optimization."

/// tests/test_agents_with_errors.md ///
# Agents

## Agent 1: Python Backend Developer
- Role: Design and implement scalable backend systems using Python and FastAPI
- Skills: Python, FastAPI, PostgreSQL, Docker, Test-Driven Development, Redis, Celery
- Restrictions: Avoid synchronous operations, must use async/await patterns, no Django
- Prompt Example: Create a REST API endpoint for user authentication using FastAPI and JWT tokens

## Agent Without Role
- Skills: React, TypeScript, Tailwind CSS
- Restrictions: No class components

## Agent 3
- Role: Missing title format test
- Skills: 
- Restrictions: 

## Agent 4: Database Architect
- Skills: PostgreSQL, MongoDB, Redis, Database Indexing, Query Optimization, Data Modeling
- Restrictions: Must consider scalability and performance in all designs
- Invalid Field: This field should not exist
- Prompt Example: Design a database schema for a multi-tenant SaaS application

/// utils/utils.go ///
// Package utils provides utility functions for the application.
// It provides a function to get environment variables with a default value.
// It is used to retrieve configuration values from the environment, allowing for flexible application settings.
package utils

import "os"

func GetEnvOr(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

/// version/semantic.go ///
// Package version provides functionality to manage and check the version of the Grompt CLI tool.
// It includes methods to get the current version, check for the latest version, and compare versions
package version

import (
	"os"
	"path/filepath"

	gl "github.com/rafa-mori/grompt/logger"
	l "github.com/rafa-mori/logz"

	"github.com/spf13/cobra"

	_ "embed"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strconv"
	"strings"
	"time"
)

func init() {
	if owner := os.Getenv("GITHUB_OWNER"); owner != "" {
		projectOwner = owner
	}
	moduleName = os.Getenv("GITHUB_REPOSITORY")
	if moduleName == "" {
		moduleName, err := os.Executable()
		if err == nil {
			moduleName = filepath.Base(moduleName)
		}
	}
	if moduleAliasEnv := os.Getenv("MODULE_ALIAS"); moduleAliasEnv != "" {
		moduleAlias = moduleAliasEnv
	}
}

var moduleAlias = "Grompt" // Default module alias, can be overridden by environment variable
var moduleName = "grompt"  // Default module name, can be overridden by environment variable

const currentVersionFallback = "v1.0.0"

//go:embed CLI_VERSION
var cliVersion string
var projectOwner = "rafa-mori" // Default project owner, can be overridden by environment variable
var gitModelURL = "https://github.com/" + projectOwner + "/" + moduleName + ".git"

type Service interface {
	GetLatestVersion() (string, error)
	GetCurrentVersion() string
	IsLatestVersion() (bool, error)
}
type ServiceImpl struct {
	gitModelURL    string
	latestVersion  string
	currentVersion string
}
type Tag struct {
	Name string `json:"name"`
}

func init() {
	l.GetLogger(moduleAlias)
}

func getLatestTag(repoURL string) (string, error) {
	apiURL := fmt.Sprintf("%s/tags", repoURL)
	resp, err := http.Get(apiURL)
	if err != nil {
		return "", err
	}
	defer func(Body io.ReadCloser) {
		_ = Body.Close()
	}(resp.Body)

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("failed to fetch tags: %s", resp.Status)
	}

	var tags []Tag
	if err := json.NewDecoder(resp.Body).Decode(&tags); err != nil {
		return "", err
	}

	if len(tags) == 0 {
		return "", fmt.Errorf("no tags found")
	}

	return tags[0].Name, nil
}

func (v *ServiceImpl) updateLatestVersion() error {
	repoURL := strings.TrimSuffix(v.gitModelURL, ".git")
	tag, err := getLatestTag(repoURL)
	if err != nil {
		return err
	}
	v.latestVersion = tag
	return nil
}
func (v *ServiceImpl) vrsCompare(v1, v2 []int) (int, error) {
	if len(v1) != len(v2) {
		return 0, fmt.Errorf("version length mismatch")
	}

	for idx, v2S := range v2 {
		v1S := v1[idx]
		if v1S > v2S {
			return 1, nil
		}

		if v1S < v2S {
			return -1, nil
		}
	}
	return 0, nil
}
func (v *ServiceImpl) versionAtMost(versionAtMostArg, max []int) (bool, error) {
	if comp, err := v.vrsCompare(versionAtMostArg, max); err != nil {
		return false, err
	} else if comp == 1 {
		return false, nil
	}
	return true, nil
}
func (v *ServiceImpl) parseVersion(versionToParse string) []int {
	version := make([]int, 3)
	for idx, vStr := range strings.Split(versionToParse, ".") {
		vS, err := strconv.Atoi(vStr)
		if err != nil {
			return nil
		}
		version[idx] = vS
	}
	return version
}

func (v *ServiceImpl) IsLatestVersion() (bool, error) {
	if v.latestVersion == "" {
		if err := v.updateLatestVersion(); err != nil {
			return false, err
		}
	}

	curr := v.parseVersion(v.currentVersion)
	latest := v.parseVersion(v.latestVersion)

	if curr == nil || latest == nil {
		return false, fmt.Errorf("error parsing versions")
	}

	if isLatest, err := v.versionAtMost(curr, latest); err != nil {
		return false, err
	} else if isLatest {
		return true, nil
	}
	return false, nil
}
func (v *ServiceImpl) GetLatestVersion() (string, error) {
	if v.latestVersion == "" {
		if err := v.updateLatestVersion(); err != nil {
			return "", err
		}
	}

	return v.latestVersion, nil
}
func (v *ServiceImpl) GetCurrentVersion() string { return v.currentVersion }

func NewVersionService() Service {
	return &ServiceImpl{
		gitModelURL:    gitModelURL,
		currentVersion: currentVersion,
		latestVersion:  "",
	}
}

var (
	versionCmd = &cobra.Command{
		Use:   "version",
		Short: "Print the version number of " + moduleAlias,
		Long:  "Print the version number of " + moduleAlias,
		Run: func(cmd *cobra.Command, args []string) {
			GetVersionInfo()
		},
	}
	subLatestCmd = &cobra.Command{
		Use:   "latest",
		Short: "Print the latest version number of " + moduleAlias,
		Long:  "Print the latest version number of " + moduleAlias,
		Run: func(cmd *cobra.Command, args []string) {
			GetLatestVersionInfo()
		},
	}
	subCmdCheck = &cobra.Command{
		Use:   "check",
		Short: "Check if the current version is the latest version of " + moduleAlias,
		Long:  "Check if the current version is the latest version of " + moduleAlias,
		Run: func(cmd *cobra.Command, args []string) {
			GetVersionInfoWithLatestAndCheck()
		},
	}
)

//go:embed CLI_VERSION
var currentVersion string

func GetVersion() string {
	if currentVersion == "" {
		return currentVersionFallback
	}
	return currentVersion
}

func GetGitModelURL() string {
	return gitModelURL
}

func GetVersionInfo() string {
	gl.Log("info", "Version: "+GetVersion())
	gl.Log("info", "Git repository: "+GetGitModelURL())
	return fmt.Sprintf("Version: %s\nGit repository: %s", GetVersion(), GetGitModelURL())
}

func GetLatestVersionFromGit() string {
	netClient := &http.Client{
		Timeout: time.Second * 10,
	}

	gitURLWithoutGit := strings.TrimSuffix(gitModelURL, ".git")

	response, err := netClient.Get(gitURLWithoutGit + "/releases/latest")
	if err != nil {
		gl.Log("error", "Error fetching latest version: "+err.Error())
		gl.Log("error", gitURLWithoutGit+"/releases/latest")
		return err.Error()
	}

	if response.StatusCode != 200 {
		gl.Log("error", "Error fetching latest version: "+response.Status)
		gl.Log("error", "Url: "+gitURLWithoutGit+"/releases/latest")
		body, _ := io.ReadAll(response.Body)
		return fmt.Sprintf("Error: %s\nResponse: %s", response.Status, string(body))
	}

	tag := strings.Split(response.Request.URL.Path, "/")

	return tag[len(tag)-1]
}

func GetLatestVersionInfo() string {
	gl.Log("info", "Latest version: "+GetLatestVersionFromGit())
	return "Latest version: " + GetLatestVersionFromGit()
}

func GetVersionInfoWithLatestAndCheck() string {
	if GetVersion() == GetLatestVersionFromGit() {
		gl.Log("info", "You are using the latest version.")
		return fmt.Sprintf("You are using the latest version.\n%s\n%s", GetVersionInfo(), GetLatestVersionInfo())
	} else {
		gl.Log("warn", "You are using an outdated version.")
		return fmt.Sprintf("You are using an outdated version.\n%s\n%s", GetVersionInfo(), GetLatestVersionInfo())
	}
}

func CliCommand() *cobra.Command {
	versionCmd.AddCommand(subLatestCmd)
	versionCmd.AddCommand(subCmdCheck)
	return versionCmd
}
