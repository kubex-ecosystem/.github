// Demo AI Generated React Project with LookAtni Markers
// Projeto de demonstração gerado por IA com marcadores LookAtni

// main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

App.tsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import TaskList from './components/TaskList';
import AddTask from './components/AddTask';

interface Task {
  id: number;
  text: string;
  completed: boolean;
}

const App: React.FC = () => {
  const [tasks, setTasks] = useState<Task[]>([]);

  const addTask = (text: string) => {
    const newTask = {
      id: Date.now(),
      text,
      completed: false
    };
    setTasks([...tasks, newTask]);
  };

  const toggleTask = (id: number) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  const deleteTask = (id: number) => {
    setTasks(tasks.filter(task => task.id !== id));
  };

  return (
    <motion.div 
      className="app"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
    >
      <h1>🚀 Todo App Powered by LookAtni</h1>
      <AddTask onAdd={addTask} />
      <TaskList 
        tasks={tasks} 
        onToggle={toggleTask} 
        onDelete={deleteTask} 
      />
    </motion.div>
  );
};

export default App;

components/TaskList.tsx
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import TaskItem from './TaskItem';

interface Task {
  id: number;
  text: string;
  completed: boolean;
}

interface TaskListProps {
  tasks: Task[];
  onToggle: (id: number) => void;
  onDelete: (id: number) => void;
}

const TaskList: React.FC<TaskListProps> = ({ tasks, onToggle, onDelete }) => {
  return (
    <motion.div className="task-list">
      <AnimatePresence>
        {tasks.map(task => (
          <TaskItem
            key={task.id}
            task={task}
            onToggle={onToggle}
            onDelete={onDelete}
          />
        ))}
      </AnimatePresence>
    </motion.div>
  );
};

export default TaskList;

components/TaskItem.tsx
import React from 'react';
import { motion } from 'framer-motion';

interface Task {
  id: number;
  text: string;
  completed: boolean;
}

interface TaskItemProps {
  task: Task;
  onToggle: (id: number) => void;
  onDelete: (id: number) => void;
}

const TaskItem: React.FC<TaskItemProps> = ({ task, onToggle, onDelete }) => {
  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className={`task-item ${task.completed ? 'completed' : ''}`}
    >
      <input
        type="checkbox"
        checked={task.completed}
        onChange={() => onToggle(task.id)}
      />
      <span>{task.text}</span>
      <button onClick={() => onDelete(task.id)}>🗑️</button>
    </motion.div>
  );
};

export default TaskItem;

components/AddTask.tsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';

interface AddTaskProps {
  onAdd: (text: string) => void;
}

const AddTask: React.FC<AddTaskProps> = ({ onAdd }) => {
  const [text, setText] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (text.trim()) {
      onAdd(text.trim());
      setText('');
    }
  };

  return (
    <motion.form 
      onSubmit={handleSubmit}
      className="add-task-form"
      whileHover={{ scale: 1.02 }}
    >
      <input
        type="text"
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="Adicionar nova tarefa..."
        className="task-input"
      />
      <button type="submit" className="add-button">
        ➕ Adicionar
      </button>
    </motion.form>
  );
};

export default AddTask;

index.css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
  padding: 20px;
}

.app {
  max-width: 600px;
  margin: 0 auto;
  background: white;
  border-radius: 16px;
  padding: 2rem;
  box-shadow: 0 20px 40px rgba(0,0,0,0.1);
}

h1 {
  text-align: center;
  color: #333;
  margin-bottom: 2rem;
  font-size: 2rem;
}

.add-task-form {
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
}

.task-input {
  flex: 1;
  padding: 0.75rem;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 1rem;
  outline: none;
  transition: border-color 0.2s;
}

.task-input:focus {
  border-color: #667eea;
}

.add-button {
  padding: 0.75rem 1.5rem;
  background: #667eea;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
  transition: background 0.2s;
}

.add-button:hover {
  background: #5a6fd8;
}

.task-list {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.task-item {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  background: #f8f9fa;
  border-radius: 8px;
  transition: all 0.2s;
}

.task-item:hover {
  background: #e9ecef;
}

.task-item.completed {
  opacity: 0.6;
}

.task-item.completed span {
  text-decoration: line-through;
}

.task-item input[type="checkbox"] {
  width: 1.2rem;
  height: 1.2rem;
}

.task-item span {
  flex: 1;
  font-size: 1rem;
}

.task-item button {
  background: #dc3545;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 0.5rem;
  cursor: pointer;
  transition: background 0.2s;
}

.task-item button:hover {
  background: #c82333;
}

package.json
{
  "name": "lookatni-todo-app",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "framer-motion": "^10.16.4"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@vitejs/plugin-react": "^4.2.1",
    "typescript": "^5.2.2",
    "vite": "^5.0.8"
  }
}

vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    open: true
  },
  build: {
    outDir: 'dist'
  }
});

README.md
# 🚀 LookAtni Todo App

Um aplicativo de tarefas moderno criado com React, TypeScript e Framer Motion, organizado com marcadores LookAtni.

## ✨ Funcionalidades

- ✅ Adicionar tarefas
- ✅ Marcar como concluído
- ✅ Excluir tarefas
- ✅ Animações suaves
- ✅ Design responsivo

## 🛠️ Tecnologias

- React 18
- TypeScript
- Framer Motion
- Vite
- CSS3

## 🚀 Como executar

```bash
npm install
npm run dev
```

## 📦 Como extrair com LookAtni

Este projeto foi organizado usando marcadores invisíveis ASCII 28. 
Você pode extrair os arquivos usando a extensão LookAtni File Markers.

## 📄 Estrutura

```
src/
  ├── main.tsx
  ├── App.tsx
  ├── index.css
  └── components/
      ├── TaskList.tsx
      ├── TaskItem.tsx
      └── AddTask.tsx
```
